
sketch_aug01a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00001ca2  00001d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000db  0080015a  0080015a  00001d90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a733  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000212c  00000000  00000000  0000c9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027ae  00000000  00000000  0000eacf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d3c  00000000  00000000  00011280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002966  00000000  00000000  00011fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ecd  00000000  00000000  00014922  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  000197ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_13>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__vector_18>
      4c:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	82 02       	muls	r24, r18
      ba:	60 07       	cpc	r22, r16

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e2 ea       	ldi	r30, 0xA2	; 162
      d0:	fc e1       	ldi	r31, 0x1C	; 28
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 35       	cpi	r26, 0x5A	; 90
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	aa e5       	ldi	r26, 0x5A	; 90
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a5 33       	cpi	r26, 0x35	; 53
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 6f 0c 	call	0x18de	; 0x18de <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 8e 07 	call	0xf1c	; 0xf1c <main>
     108:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_Z7Valoresv>:
// Função para Fazer a soma

float fun_soma(float val){
  somaTotal = val + somaTotal;
  return somaTotal;
} 
     110:	8f 92       	push	r8
     112:	9f 92       	push	r9
     114:	af 92       	push	r10
     116:	bf 92       	push	r11
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	8e e0       	ldi	r24, 0x0E	; 14
     126:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <analogRead>
     12a:	bc 01       	movw	r22, r24
     12c:	99 0f       	add	r25, r25
     12e:	88 0b       	sbc	r24, r24
     130:	99 0b       	sbc	r25, r25
     132:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
     136:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <val>
     13a:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <val+0x1>
     13e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <val+0x2>
     142:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <val+0x3>
     146:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <cont>
     14a:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <cont+0x1>
     14e:	49 01       	movw	r8, r18
     150:	33 0f       	add	r19, r19
     152:	aa 08       	sbc	r10, r10
     154:	bb 08       	sbc	r11, r11
     156:	c0 90 5a 01 	lds	r12, 0x015A	; 0x80015a <__data_end>
     15a:	d0 90 5b 01 	lds	r13, 0x015B	; 0x80015b <__data_end+0x1>
     15e:	e0 90 5c 01 	lds	r14, 0x015C	; 0x80015c <__data_end+0x2>
     162:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <__data_end+0x3>
     166:	8c 14       	cp	r8, r12
     168:	9d 04       	cpc	r9, r13
     16a:	ae 04       	cpc	r10, r14
     16c:	bf 04       	cpc	r11, r15
     16e:	74 f0       	brlt	.+28     	; 0x18c <_Z7Valoresv+0x7c>
     170:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <cont+0x1>
     174:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <cont>
     178:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <qtdSobrescrito>
     17c:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <qtdSobrescrito+0x1>
     180:	2f 5f       	subi	r18, 0xFF	; 255
     182:	3f 4f       	sbci	r19, 0xFF	; 255
     184:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <qtdSobrescrito+0x1>
     188:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <qtdSobrescrito>
     18c:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <cont>
     190:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <cont+0x1>
     194:	9a 01       	movw	r18, r20
     196:	22 0f       	add	r18, r18
     198:	33 1f       	adc	r19, r19
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <vet>
     1a2:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <vet+0x1>
     1a6:	e2 0f       	add	r30, r18
     1a8:	f3 1f       	adc	r31, r19
     1aa:	60 83       	st	Z, r22
     1ac:	71 83       	std	Z+1, r23	; 0x01
     1ae:	82 83       	std	Z+2, r24	; 0x02
     1b0:	93 83       	std	Z+3, r25	; 0x03
     1b2:	ca 01       	movw	r24, r20
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <cont+0x1>
     1ba:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <cont>
     1be:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <qtdTotal>
     1c2:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <qtdTotal+0x1>
     1c6:	eb 01       	movw	r28, r22
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	d0 93 69 01 	sts	0x0169, r29	; 0x800169 <qtdTotal+0x1>
     1ce:	c0 93 68 01 	sts	0x0168, r28	; 0x800168 <qtdTotal>
     1d2:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <somaTotal>
     1d6:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <somaTotal+0x1>
     1da:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <somaTotal+0x2>
     1de:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <somaTotal+0x3>
     1e2:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <val>
     1e6:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <val+0x1>
     1ea:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val+0x2>
     1ee:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x3>
     1f2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__addsf3>
     1f6:	6b 01       	movw	r12, r22
     1f8:	7c 01       	movw	r14, r24
     1fa:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <somaTotal>
     1fe:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <somaTotal+0x1>
     202:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <somaTotal+0x2>
     206:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <somaTotal+0x3>
     20a:	be 01       	movw	r22, r28
     20c:	dd 0f       	add	r29, r29
     20e:	88 0b       	sbc	r24, r24
     210:	99 0b       	sbc	r25, r25
     212:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
     216:	9b 01       	movw	r18, r22
     218:	ac 01       	movw	r20, r24
     21a:	c7 01       	movw	r24, r14
     21c:	b6 01       	movw	r22, r12
     21e:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
     222:	4b 01       	movw	r8, r22
     224:	5c 01       	movw	r10, r24
     226:	8e e6       	ldi	r24, 0x6E	; 110
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN13LiquidCrystal5clearEv>
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	8e e6       	ldi	r24, 0x6E	; 110
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     23a:	6b e0       	ldi	r22, 0x0B	; 11
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	8e e6       	ldi	r24, 0x6E	; 110
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN5Print5printEPKc>
     246:	41 e0       	ldi	r20, 0x01	; 1
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	8e e6       	ldi	r24, 0x6E	; 110
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     252:	2a e9       	ldi	r18, 0x9A	; 154
     254:	39 e9       	ldi	r19, 0x99	; 153
     256:	4c e4       	ldi	r20, 0x4C	; 76
     258:	53 e4       	ldi	r21, 0x43	; 67
     25a:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <val>
     25e:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <val+0x1>
     262:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <val+0x2>
     266:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <val+0x3>
     26a:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
     26e:	ab 01       	movw	r20, r22
     270:	bc 01       	movw	r22, r24
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	8e e6       	ldi	r24, 0x6E	; 110
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN5Print5printEdi>
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	64 e0       	ldi	r22, 0x04	; 4
     282:	8e e6       	ldi	r24, 0x6E	; 110
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     28a:	6f e0       	ldi	r22, 0x0F	; 15
     28c:	71 e0       	ldi	r23, 0x01	; 1
     28e:	8e e6       	ldi	r24, 0x6E	; 110
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN5Print5printEPKc>
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	65 e0       	ldi	r22, 0x05	; 5
     29a:	8e e6       	ldi	r24, 0x6E	; 110
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     2a2:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <qtdSobrescrito>
     2a6:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <qtdSobrescrito+0x1>
     2aa:	4a e0       	ldi	r20, 0x0A	; 10
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	8e e6       	ldi	r24, 0x6E	; 110
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN5Print5printEii>
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	68 e0       	ldi	r22, 0x08	; 8
     2ba:	8e e6       	ldi	r24, 0x6E	; 110
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     2c2:	63 e1       	ldi	r22, 0x13	; 19
     2c4:	71 e0       	ldi	r23, 0x01	; 1
     2c6:	8e e6       	ldi	r24, 0x6E	; 110
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN5Print5printEPKc>
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	67 e0       	ldi	r22, 0x07	; 7
     2d2:	8e e6       	ldi	r24, 0x6E	; 110
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     2da:	2a e9       	ldi	r18, 0x9A	; 154
     2dc:	39 e9       	ldi	r19, 0x99	; 153
     2de:	4c e4       	ldi	r20, 0x4C	; 76
     2e0:	53 e4       	ldi	r21, 0x43	; 67
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
     2ea:	ab 01       	movw	r20, r22
     2ec:	bc 01       	movw	r22, r24
     2ee:	22 e0       	ldi	r18, 0x02	; 2
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	8e e6       	ldi	r24, 0x6E	; 110
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN5Print5printEdi>
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	6d e0       	ldi	r22, 0x0D	; 13
     2fe:	8e e6       	ldi	r24, 0x6E	; 110
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     306:	68 e1       	ldi	r22, 0x18	; 24
     308:	71 e0       	ldi	r23, 0x01	; 1
     30a:	8e e6       	ldi	r24, 0x6E	; 110
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN5Print5printEPKc>
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	6d e0       	ldi	r22, 0x0D	; 13
     316:	8e e6       	ldi	r24, 0x6E	; 110
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
     31e:	2a e9       	ldi	r18, 0x9A	; 154
     320:	39 e9       	ldi	r19, 0x99	; 153
     322:	4c e4       	ldi	r20, 0x4C	; 76
     324:	53 e4       	ldi	r21, 0x43	; 67
     326:	c5 01       	movw	r24, r10
     328:	b4 01       	movw	r22, r8
     32a:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
     32e:	ab 01       	movw	r20, r22
     330:	bc 01       	movw	r22, r24
     332:	22 e0       	ldi	r18, 0x02	; 2
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	8e e6       	ldi	r24, 0x6E	; 110
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN5Print5printEdi>
     33e:	8e e6       	ldi	r24, 0x6E	; 110
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN13LiquidCrystal7displayEv>
     346:	80 e1       	ldi	r24, 0x10	; 16
     348:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     34c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     350:	85 e0       	ldi	r24, 0x05	; 5
     352:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <_ZN8TimerOne15clockSelectBitsE>
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_ZN8TimerOne9pwmPeriodE+0x1>
     35e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_ZN8TimerOne9pwmPeriodE>
     362:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     366:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     36a:	85 e1       	ldi	r24, 0x15	; 21
     36c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	df 90       	pop	r13
     37a:	cf 90       	pop	r12
     37c:	bf 90       	pop	r11
     37e:	af 90       	pop	r10
     380:	9f 90       	pop	r9
     382:	8f 90       	pop	r8
     384:	08 95       	ret

00000386 <setup>:
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	8e e0       	ldi	r24, 0x0E	; 14
     390:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <analogRead>
     394:	bc 01       	movw	r22, r24
     396:	99 0f       	add	r25, r25
     398:	88 0b       	sbc	r24, r24
     39a:	99 0b       	sbc	r25, r25
     39c:	0e 94 0f 0b 	call	0x161e	; 0x161e <_Z10randomSeedm>
     3a0:	23 e3       	ldi	r18, 0x33	; 51
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	64 e1       	ldi	r22, 0x14	; 20
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 31 0b 	call	0x1662	; 0x1662 <_Z6randomll>
     3b4:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
     3b8:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <__data_end+0x1>
     3bc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end+0x2>
     3c0:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x3>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	42 e0       	ldi	r20, 0x02	; 2
     3c8:	60 e1       	ldi	r22, 0x10	; 16
     3ca:	8e e6       	ldi	r24, 0x6E	; 110
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal5beginEhhh>
     3d2:	c0 90 5a 01 	lds	r12, 0x015A	; 0x80015a <__data_end>
     3d6:	d0 90 5b 01 	lds	r13, 0x015B	; 0x80015b <__data_end+0x1>
     3da:	e0 90 5c 01 	lds	r14, 0x015C	; 0x80015c <__data_end+0x2>
     3de:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <__data_end+0x3>
     3e2:	c6 01       	movw	r24, r12
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	0e 94 84 0c 	call	0x1908	; 0x1908 <malloc>
     3f0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <vet>
     3f4:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <vet+0x1>
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	dc 01       	movw	r26, r24
     400:	8c 15       	cp	r24, r12
     402:	9d 05       	cpc	r25, r13
     404:	ae 05       	cpc	r26, r14
     406:	bf 05       	cpc	r27, r15
     408:	44 f4       	brge	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     40a:	11 92       	st	Z+, r1
     40c:	11 92       	st	Z+, r1
     40e:	11 92       	st	Z+, r1
     410:	11 92       	st	Z+, r1
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	f3 cf       	rjmp	.-26     	; 0x400 <__EEPROM_REGION_LENGTH__>
     41a:	26 e0       	ldi	r18, 0x06	; 6
     41c:	40 e8       	ldi	r20, 0x80	; 128
     41e:	55 e2       	ldi	r21, 0x25	; 37
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	8b e8       	ldi	r24, 0x8B	; 139
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN14HardwareSerial5beginEmh>
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <_ZN8TimerOne15clockSelectBitsE>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_ZN8TimerOne9pwmPeriodE+0x1>
     43a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_ZN8TimerOne9pwmPeriodE>
     43e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     442:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     446:	85 e1       	ldi	r24, 0x15	; 21
     448:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     44c:	88 e8       	ldi	r24, 0x88	; 136
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <_ZN8TimerOne11isrCallbackE+0x1>
     454:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <_ZN8TimerOne11isrCallbackE>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	df 90       	pop	r13
     464:	cf 90       	pop	r12
     466:	08 95       	ret

00000468 <loop>:
void loop(){
	  lcd.clear();
     468:	8e e6       	ldi	r24, 0x6E	; 110
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN13LiquidCrystal5clearEv>
	  lcd.setCursor(0,0);
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	8e e6       	ldi	r24, 0x6E	; 110
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print("Q_LIDOS");      // Quantidade dos valores lidos
     47c:	6c e1       	ldi	r22, 0x1C	; 28
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	8e e6       	ldi	r24, 0x6E	; 110
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN5Print5printEPKc>
	  lcd.setCursor(3,1);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	63 e0       	ldi	r22, 0x03	; 3
     48c:	8e e6       	ldi	r24, 0x6E	; 110
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(cont);
     494:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <cont>
     498:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <cont+0x1>
     49c:	4a e0       	ldi	r20, 0x0A	; 10
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	8e e6       	ldi	r24, 0x6E	; 110
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN5Print5printEii>
	  lcd.display();
     4a8:	8e e6       	ldi	r24, 0x6E	; 110
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN13LiquidCrystal7displayEv>
	  lcd.setCursor(8,0);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	68 e0       	ldi	r22, 0x08	; 8
     4b4:	8e e6       	ldi	r24, 0x6E	; 110
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print("T_Vetor");      // Tamanho do vetor
     4bc:	64 e2       	ldi	r22, 0x24	; 36
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	8e e6       	ldi	r24, 0x6E	; 110
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN5Print5printEPKc>
	  lcd.setCursor(11,1);
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	6b e0       	ldi	r22, 0x0B	; 11
     4cc:	8e e6       	ldi	r24, 0x6E	; 110
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(randomNumber);
     4d4:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <__data_end>
     4d8:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <__data_end+0x1>
     4dc:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <__data_end+0x2>
     4e0:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <__data_end+0x3>
     4e4:	2a e0       	ldi	r18, 0x0A	; 10
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	8e e6       	ldi	r24, 0x6E	; 110
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEli>
	  lcd.display();
     4f0:	8e e6       	ldi	r24, 0x6E	; 110
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN13LiquidCrystal7displayEv>
	  delay(10000);
     4f8:	60 e1       	ldi	r22, 0x10	; 16
     4fa:	77 e2       	ldi	r23, 0x27	; 39
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <delay>

00000504 <_GLOBAL__sub_I_lcd>:
  }
     504:	cf 92       	push	r12
     506:	ef 92       	push	r14
     508:	0f 93       	push	r16
float fun_soma(float val);
//End of Auto generated function prototypes by Atmel Studio



LiquidCrystal lcd(7, 6, 5, 4, 3, 2); 
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	c8 2e       	mov	r12, r24
     50e:	93 e0       	ldi	r25, 0x03	; 3
     510:	e9 2e       	mov	r14, r25
     512:	04 e0       	ldi	r16, 0x04	; 4
     514:	25 e0       	ldi	r18, 0x05	; 5
     516:	46 e0       	ldi	r20, 0x06	; 6
     518:	67 e0       	ldi	r22, 0x07	; 7
     51a:	8e e6       	ldi	r24, 0x6E	; 110
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 03 04 	call	0x806	; 0x806 <_ZN13LiquidCrystalC1Ehhhhhh>
	  lcd.print("T_Vetor");      // Tamanho do vetor
	  lcd.setCursor(11,1);
	  lcd.print(randomNumber);
	  lcd.display();
	  delay(10000);
  }
     522:	0f 91       	pop	r16
     524:	ef 90       	pop	r14
     526:	cf 90       	pop	r12
     528:	08 95       	ret

0000052a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	08 95       	ret

00000530 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     530:	08 95       	ret

00000532 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	8e 81       	ldd	r24, Y+6	; 0x06
     53c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	8e 81       	ldd	r24, Y+6	; 0x06
     54c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	8e 81       	ldd	r24, Y+6	; 0x06
     55c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     560:	84 e6       	ldi	r24, 0x64	; 100
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <delayMicroseconds>

0000056c <_ZN13LiquidCrystal10write4bitsEh>:
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	6c 01       	movw	r12, r24
     57e:	7c 01       	movw	r14, r24
     580:	87 e0       	ldi	r24, 0x07	; 7
     582:	e8 0e       	add	r14, r24
     584:	f1 1c       	adc	r15, r1
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	06 2f       	mov	r16, r22
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	b8 01       	movw	r22, r16
     590:	0c 2e       	mov	r0, r28
     592:	02 c0       	rjmp	.+4      	; 0x598 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     594:	75 95       	asr	r23
     596:	67 95       	ror	r22
     598:	0a 94       	dec	r0
     59a:	e2 f7       	brpl	.-8      	; 0x594 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     59c:	61 70       	andi	r22, 0x01	; 1
     59e:	f7 01       	movw	r30, r14
     5a0:	81 91       	ld	r24, Z+
     5a2:	7f 01       	movw	r14, r30
     5a4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     5a8:	21 96       	adiw	r28, 0x01	; 1
     5aa:	c4 30       	cpi	r28, 0x04	; 4
     5ac:	d1 05       	cpc	r29, r1
     5ae:	79 f7       	brne	.-34     	; 0x58e <_ZN13LiquidCrystal10write4bitsEh+0x22>
     5b0:	c6 01       	movw	r24, r12
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	0c 94 99 02 	jmp	0x532	; 0x532 <_ZN13LiquidCrystal11pulseEnableEv>

000005c6 <_ZN13LiquidCrystal10write8bitsEh>:
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	6c 01       	movw	r12, r24
     5d8:	7c 01       	movw	r14, r24
     5da:	87 e0       	ldi	r24, 0x07	; 7
     5dc:	e8 0e       	add	r14, r24
     5de:	f1 1c       	adc	r15, r1
     5e0:	c0 e0       	ldi	r28, 0x00	; 0
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
     5e4:	06 2f       	mov	r16, r22
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	b8 01       	movw	r22, r16
     5ea:	0c 2e       	mov	r0, r28
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     5ee:	75 95       	asr	r23
     5f0:	67 95       	ror	r22
     5f2:	0a 94       	dec	r0
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <_ZN13LiquidCrystal10write8bitsEh+0x28>
     5f6:	61 70       	andi	r22, 0x01	; 1
     5f8:	f7 01       	movw	r30, r14
     5fa:	81 91       	ld	r24, Z+
     5fc:	7f 01       	movw	r14, r30
     5fe:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     602:	21 96       	adiw	r28, 0x01	; 1
     604:	c8 30       	cpi	r28, 0x08	; 8
     606:	d1 05       	cpc	r29, r1
     608:	79 f7       	brne	.-34     	; 0x5e8 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     60a:	c6 01       	movw	r24, r12
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	0c 94 99 02 	jmp	0x532	; 0x532 <_ZN13LiquidCrystal11pulseEnableEv>

00000620 <_ZN13LiquidCrystal4sendEhh>:
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
     628:	16 2f       	mov	r17, r22
     62a:	64 2f       	mov	r22, r20
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
     62e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     632:	8d 81       	ldd	r24, Y+5	; 0x05
     634:	8f 3f       	cpi	r24, 0xFF	; 255
     636:	19 f0       	breq	.+6      	; 0x63e <_ZN13LiquidCrystal4sendEhh+0x1e>
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     63e:	8f 85       	ldd	r24, Y+15	; 0x0f
     640:	61 2f       	mov	r22, r17
     642:	84 ff       	sbrs	r24, 4
     644:	06 c0       	rjmp	.+12     	; 0x652 <_ZN13LiquidCrystal4sendEhh+0x32>
     646:	ce 01       	movw	r24, r28
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <_ZN13LiquidCrystal10write8bitsEh>
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	75 95       	asr	r23
     658:	67 95       	ror	r22
     65a:	8a 95       	dec	r24
     65c:	e1 f7       	brne	.-8      	; 0x656 <_ZN13LiquidCrystal4sendEhh+0x36>
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13LiquidCrystal10write4bitsEh>
     664:	61 2f       	mov	r22, r17
     666:	ce 01       	movw	r24, r28
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_ZN13LiquidCrystal10write4bitsEh>

00000672 <_ZN13LiquidCrystal7commandEh>:
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	0c 94 10 03 	jmp	0x620	; 0x620 <_ZN13LiquidCrystal4sendEhh>

00000678 <_ZN13LiquidCrystal5clearEv>:
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	0e 94 39 03 	call	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>
     67e:	80 ed       	ldi	r24, 0xD0	; 208
     680:	97 e0       	ldi	r25, 0x07	; 7
     682:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <delayMicroseconds>

00000686 <_ZN13LiquidCrystal9setCursorEhh>:
     686:	fc 01       	movw	r30, r24
     688:	44 30       	cpi	r20, 0x04	; 4
     68a:	08 f0       	brcs	.+2      	; 0x68e <_ZN13LiquidCrystal9setCursorEhh+0x8>
     68c:	43 e0       	ldi	r20, 0x03	; 3
     68e:	83 89       	ldd	r24, Z+19	; 0x13
     690:	48 17       	cp	r20, r24
     692:	10 f0       	brcs	.+4      	; 0x698 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     694:	4f ef       	ldi	r20, 0xFF	; 255
     696:	48 0f       	add	r20, r24
     698:	df 01       	movw	r26, r30
     69a:	a4 0f       	add	r26, r20
     69c:	b1 1d       	adc	r27, r1
     69e:	54 96       	adiw	r26, 0x14	; 20
     6a0:	9c 91       	ld	r25, X
     6a2:	69 0f       	add	r22, r25
     6a4:	60 68       	ori	r22, 0x80	; 128
     6a6:	cf 01       	movw	r24, r30
     6a8:	0c 94 39 03 	jmp	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>

000006ac <_ZN13LiquidCrystal7displayEv>:
     6ac:	fc 01       	movw	r30, r24
     6ae:	60 89       	ldd	r22, Z+16	; 0x10
     6b0:	26 2f       	mov	r18, r22
     6b2:	24 60       	ori	r18, 0x04	; 4
     6b4:	20 8b       	std	Z+16, r18	; 0x10
     6b6:	6c 60       	ori	r22, 0x0C	; 12
     6b8:	0c 94 39 03 	jmp	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>

000006bc <_ZN13LiquidCrystal5beginEhhh>:
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
     6ca:	42 30       	cpi	r20, 0x02	; 2
     6cc:	18 f0       	brcs	.+6      	; 0x6d4 <_ZN13LiquidCrystal5beginEhhh+0x18>
     6ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     6d0:	88 60       	ori	r24, 0x08	; 8
     6d2:	8f 87       	std	Y+15, r24	; 0x0f
     6d4:	4b 8b       	std	Y+19, r20	; 0x13
     6d6:	1c 8a       	std	Y+20, r1	; 0x14
     6d8:	80 e4       	ldi	r24, 0x40	; 64
     6da:	8d 8b       	std	Y+21, r24	; 0x15
     6dc:	6e 8b       	std	Y+22, r22	; 0x16
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	60 5c       	subi	r22, 0xC0	; 192
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	6f 8b       	std	Y+23, r22	; 0x17
     6e6:	22 23       	and	r18, r18
     6e8:	29 f0       	breq	.+10     	; 0x6f4 <_ZN13LiquidCrystal5beginEhhh+0x38>
     6ea:	41 30       	cpi	r20, 0x01	; 1
     6ec:	19 f4       	brne	.+6      	; 0x6f4 <_ZN13LiquidCrystal5beginEhhh+0x38>
     6ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f0:	84 60       	ori	r24, 0x04	; 4
     6f2:	8f 87       	std	Y+15, r24	; 0x0f
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	8c 81       	ldd	r24, Y+4	; 0x04
     6f8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <pinMode>
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	8f 3f       	cpi	r24, 0xFF	; 255
     700:	19 f0       	breq	.+6      	; 0x708 <_ZN13LiquidCrystal5beginEhhh+0x4c>
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	0e 94 a4 0a 	call	0x1548	; 0x1548 <pinMode>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	8e 81       	ldd	r24, Y+6	; 0x06
     70c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <pinMode>
     710:	7e 01       	movw	r14, r28
     712:	87 e0       	ldi	r24, 0x07	; 7
     714:	e8 0e       	add	r14, r24
     716:	f1 1c       	adc	r15, r1
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	10 e0       	ldi	r17, 0x00	; 0
     71c:	8f 85       	ldd	r24, Y+15	; 0x0f
     71e:	84 fd       	sbrc	r24, 4
     720:	03 c0       	rjmp	.+6      	; 0x728 <_ZN13LiquidCrystal5beginEhhh+0x6c>
     722:	84 e0       	ldi	r24, 0x04	; 4
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	02 c0       	rjmp	.+4      	; 0x72c <_ZN13LiquidCrystal5beginEhhh+0x70>
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	08 17       	cp	r16, r24
     72e:	19 07       	cpc	r17, r25
     730:	4c f4       	brge	.+18     	; 0x744 <_ZN13LiquidCrystal5beginEhhh+0x88>
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	f7 01       	movw	r30, r14
     736:	81 91       	ld	r24, Z+
     738:	7f 01       	movw	r14, r30
     73a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <pinMode>
     73e:	0f 5f       	subi	r16, 0xFF	; 255
     740:	1f 4f       	sbci	r17, 0xFF	; 255
     742:	ec cf       	rjmp	.-40     	; 0x71c <_ZN13LiquidCrystal5beginEhhh+0x60>
     744:	80 e5       	ldi	r24, 0x50	; 80
     746:	93 ec       	ldi	r25, 0xC3	; 195
     748:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	8c 81       	ldd	r24, Y+4	; 0x04
     750:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	8e 81       	ldd	r24, Y+6	; 0x06
     758:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     75c:	8d 81       	ldd	r24, Y+5	; 0x05
     75e:	8f 3f       	cpi	r24, 0xFF	; 255
     760:	19 f0       	breq	.+6      	; 0x768 <_ZN13LiquidCrystal5beginEhhh+0xac>
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <digitalWrite>
     768:	6f 85       	ldd	r22, Y+15	; 0x0f
     76a:	64 fd       	sbrc	r22, 4
     76c:	1d c0       	rjmp	.+58     	; 0x7a8 <_ZN13LiquidCrystal5beginEhhh+0xec>
     76e:	63 e0       	ldi	r22, 0x03	; 3
     770:	ce 01       	movw	r24, r28
     772:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13LiquidCrystal10write4bitsEh>
     776:	84 e9       	ldi	r24, 0x94	; 148
     778:	91 e1       	ldi	r25, 0x11	; 17
     77a:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     77e:	63 e0       	ldi	r22, 0x03	; 3
     780:	ce 01       	movw	r24, r28
     782:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13LiquidCrystal10write4bitsEh>
     786:	84 e9       	ldi	r24, 0x94	; 148
     788:	91 e1       	ldi	r25, 0x11	; 17
     78a:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     78e:	63 e0       	ldi	r22, 0x03	; 3
     790:	ce 01       	movw	r24, r28
     792:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13LiquidCrystal10write4bitsEh>
     796:	86 e9       	ldi	r24, 0x96	; 150
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     79e:	62 e0       	ldi	r22, 0x02	; 2
     7a0:	ce 01       	movw	r24, r28
     7a2:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13LiquidCrystal10write4bitsEh>
     7a6:	16 c0       	rjmp	.+44     	; 0x7d4 <_ZN13LiquidCrystal5beginEhhh+0x118>
     7a8:	60 62       	ori	r22, 0x20	; 32
     7aa:	ce 01       	movw	r24, r28
     7ac:	0e 94 39 03 	call	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>
     7b0:	84 e9       	ldi	r24, 0x94	; 148
     7b2:	91 e1       	ldi	r25, 0x11	; 17
     7b4:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     7b8:	6f 85       	ldd	r22, Y+15	; 0x0f
     7ba:	60 62       	ori	r22, 0x20	; 32
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 39 03 	call	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>
     7c2:	86 e9       	ldi	r24, 0x96	; 150
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 18 0a 	call	0x1430	; 0x1430 <delayMicroseconds>
     7ca:	6f 85       	ldd	r22, Y+15	; 0x0f
     7cc:	60 62       	ori	r22, 0x20	; 32
     7ce:	ce 01       	movw	r24, r28
     7d0:	0e 94 39 03 	call	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>
     7d4:	6f 85       	ldd	r22, Y+15	; 0x0f
     7d6:	60 62       	ori	r22, 0x20	; 32
     7d8:	ce 01       	movw	r24, r28
     7da:	0e 94 39 03 	call	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	88 8b       	std	Y+16, r24	; 0x10
     7e2:	ce 01       	movw	r24, r28
     7e4:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN13LiquidCrystal7displayEv>
     7e8:	ce 01       	movw	r24, r28
     7ea:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN13LiquidCrystal5clearEv>
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	89 8b       	std	Y+17, r24	; 0x11
     7f2:	66 e0       	ldi	r22, 0x06	; 6
     7f4:	ce 01       	movw	r24, r28
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	0c 94 39 03 	jmp	0x672	; 0x672 <_ZN13LiquidCrystal7commandEh>

00000806 <_ZN13LiquidCrystalC1Ehhhhhh>:
     806:	cf 92       	push	r12
     808:	ef 92       	push	r14
     80a:	0f 93       	push	r16
     80c:	fc 01       	movw	r30, r24
     80e:	13 82       	std	Z+3, r1	; 0x03
     810:	12 82       	std	Z+2, r1	; 0x02
     812:	80 e3       	ldi	r24, 0x30	; 48
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	91 83       	std	Z+1, r25	; 0x01
     818:	80 83       	st	Z, r24
     81a:	64 83       	std	Z+4, r22	; 0x04
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	85 83       	std	Z+5, r24	; 0x05
     820:	46 83       	std	Z+6, r20	; 0x06
     822:	27 83       	std	Z+7, r18	; 0x07
     824:	00 87       	std	Z+8, r16	; 0x08
     826:	e1 86       	std	Z+9, r14	; 0x09
     828:	c2 86       	std	Z+10, r12	; 0x0a
     82a:	13 86       	std	Z+11, r1	; 0x0b
     82c:	14 86       	std	Z+12, r1	; 0x0c
     82e:	15 86       	std	Z+13, r1	; 0x0d
     830:	16 86       	std	Z+14, r1	; 0x0e
     832:	17 86       	std	Z+15, r1	; 0x0f
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	60 e1       	ldi	r22, 0x10	; 16
     83a:	cf 01       	movw	r24, r30
     83c:	0f 91       	pop	r16
     83e:	ef 90       	pop	r14
     840:	cf 90       	pop	r12
     842:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <_ZN13LiquidCrystal5beginEhhh>

00000846 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     846:	41 e0       	ldi	r20, 0x01	; 1
     848:	0e 94 10 03 	call	0x620	; 0x620 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	08 95       	ret

00000852 <__vector_13>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	4f 93       	push	r20
     862:	5f 93       	push	r21
     864:	6f 93       	push	r22
     866:	7f 93       	push	r23
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
     870:	ef 93       	push	r30
     872:	ff 93       	push	r31
  Timer1.isrCallback();
     874:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <_ZN8TimerOne11isrCallbackE>
     878:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <_ZN8TimerOne11isrCallbackE+0x1>
     87c:	09 95       	icall
}
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__subsf3>:
     8a0:	50 58       	subi	r21, 0x80	; 128

000008a2 <__addsf3>:
     8a2:	bb 27       	eor	r27, r27
     8a4:	aa 27       	eor	r26, r26
     8a6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__addsf3x>
     8aa:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
     8ae:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
     8b2:	38 f0       	brcs	.+14     	; 0x8c2 <__addsf3+0x20>
     8b4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
     8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__addsf3+0x20>
     8ba:	39 f4       	brne	.+14     	; 0x8ca <__addsf3+0x28>
     8bc:	9f 3f       	cpi	r25, 0xFF	; 255
     8be:	19 f4       	brne	.+6      	; 0x8c6 <__addsf3+0x24>
     8c0:	26 f4       	brtc	.+8      	; 0x8ca <__addsf3+0x28>
     8c2:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>
     8c6:	0e f4       	brtc	.+2      	; 0x8ca <__addsf3+0x28>
     8c8:	e0 95       	com	r30
     8ca:	e7 fb       	bst	r30, 7
     8cc:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>

000008d0 <__addsf3x>:
     8d0:	e9 2f       	mov	r30, r25
     8d2:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
     8d6:	58 f3       	brcs	.-42     	; 0x8ae <__addsf3+0xc>
     8d8:	ba 17       	cp	r27, r26
     8da:	62 07       	cpc	r22, r18
     8dc:	73 07       	cpc	r23, r19
     8de:	84 07       	cpc	r24, r20
     8e0:	95 07       	cpc	r25, r21
     8e2:	20 f0       	brcs	.+8      	; 0x8ec <__addsf3x+0x1c>
     8e4:	79 f4       	brne	.+30     	; 0x904 <__stack+0x5>
     8e6:	a6 f5       	brtc	.+104    	; 0x950 <__stack+0x51>
     8e8:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_zero>
     8ec:	0e f4       	brtc	.+2      	; 0x8f0 <__addsf3x+0x20>
     8ee:	e0 95       	com	r30
     8f0:	0b 2e       	mov	r0, r27
     8f2:	ba 2f       	mov	r27, r26
     8f4:	a0 2d       	mov	r26, r0
     8f6:	0b 01       	movw	r0, r22
     8f8:	b9 01       	movw	r22, r18
     8fa:	90 01       	movw	r18, r0
     8fc:	0c 01       	movw	r0, r24
     8fe:	ca 01       	movw	r24, r20
     900:	a0 01       	movw	r20, r0
     902:	11 24       	eor	r1, r1
     904:	ff 27       	eor	r31, r31
     906:	59 1b       	sub	r21, r25
     908:	99 f0       	breq	.+38     	; 0x930 <__stack+0x31>
     90a:	59 3f       	cpi	r21, 0xF9	; 249
     90c:	50 f4       	brcc	.+20     	; 0x922 <__stack+0x23>
     90e:	50 3e       	cpi	r21, 0xE0	; 224
     910:	68 f1       	brcs	.+90     	; 0x96c <__stack+0x6d>
     912:	1a 16       	cp	r1, r26
     914:	f0 40       	sbci	r31, 0x00	; 0
     916:	a2 2f       	mov	r26, r18
     918:	23 2f       	mov	r18, r19
     91a:	34 2f       	mov	r19, r20
     91c:	44 27       	eor	r20, r20
     91e:	58 5f       	subi	r21, 0xF8	; 248
     920:	f3 cf       	rjmp	.-26     	; 0x908 <__stack+0x9>
     922:	46 95       	lsr	r20
     924:	37 95       	ror	r19
     926:	27 95       	ror	r18
     928:	a7 95       	ror	r26
     92a:	f0 40       	sbci	r31, 0x00	; 0
     92c:	53 95       	inc	r21
     92e:	c9 f7       	brne	.-14     	; 0x922 <__stack+0x23>
     930:	7e f4       	brtc	.+30     	; 0x950 <__stack+0x51>
     932:	1f 16       	cp	r1, r31
     934:	ba 0b       	sbc	r27, r26
     936:	62 0b       	sbc	r22, r18
     938:	73 0b       	sbc	r23, r19
     93a:	84 0b       	sbc	r24, r20
     93c:	ba f0       	brmi	.+46     	; 0x96c <__stack+0x6d>
     93e:	91 50       	subi	r25, 0x01	; 1
     940:	a1 f0       	breq	.+40     	; 0x96a <__stack+0x6b>
     942:	ff 0f       	add	r31, r31
     944:	bb 1f       	adc	r27, r27
     946:	66 1f       	adc	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	88 1f       	adc	r24, r24
     94c:	c2 f7       	brpl	.-16     	; 0x93e <__stack+0x3f>
     94e:	0e c0       	rjmp	.+28     	; 0x96c <__stack+0x6d>
     950:	ba 0f       	add	r27, r26
     952:	62 1f       	adc	r22, r18
     954:	73 1f       	adc	r23, r19
     956:	84 1f       	adc	r24, r20
     958:	48 f4       	brcc	.+18     	; 0x96c <__stack+0x6d>
     95a:	87 95       	ror	r24
     95c:	77 95       	ror	r23
     95e:	67 95       	ror	r22
     960:	b7 95       	ror	r27
     962:	f7 95       	ror	r31
     964:	9e 3f       	cpi	r25, 0xFE	; 254
     966:	08 f0       	brcs	.+2      	; 0x96a <__stack+0x6b>
     968:	b0 cf       	rjmp	.-160    	; 0x8ca <__addsf3+0x28>
     96a:	93 95       	inc	r25
     96c:	88 0f       	add	r24, r24
     96e:	08 f0       	brcs	.+2      	; 0x972 <__stack+0x73>
     970:	99 27       	eor	r25, r25
     972:	ee 0f       	add	r30, r30
     974:	97 95       	ror	r25
     976:	87 95       	ror	r24
     978:	08 95       	ret

0000097a <__divsf3>:
     97a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__divsf3x>
     97e:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
     982:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
     986:	58 f0       	brcs	.+22     	; 0x99e <__divsf3+0x24>
     988:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
     98c:	40 f0       	brcs	.+16     	; 0x99e <__divsf3+0x24>
     98e:	29 f4       	brne	.+10     	; 0x99a <__divsf3+0x20>
     990:	5f 3f       	cpi	r21, 0xFF	; 255
     992:	29 f0       	breq	.+10     	; 0x99e <__divsf3+0x24>
     994:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
     998:	51 11       	cpse	r21, r1
     99a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
     99e:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>

000009a2 <__divsf3x>:
     9a2:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
     9a6:	68 f3       	brcs	.-38     	; 0x982 <__divsf3+0x8>

000009a8 <__divsf3_pse>:
     9a8:	99 23       	and	r25, r25
     9aa:	b1 f3       	breq	.-20     	; 0x998 <__divsf3+0x1e>
     9ac:	55 23       	and	r21, r21
     9ae:	91 f3       	breq	.-28     	; 0x994 <__divsf3+0x1a>
     9b0:	95 1b       	sub	r25, r21
     9b2:	55 0b       	sbc	r21, r21
     9b4:	bb 27       	eor	r27, r27
     9b6:	aa 27       	eor	r26, r26
     9b8:	62 17       	cp	r22, r18
     9ba:	73 07       	cpc	r23, r19
     9bc:	84 07       	cpc	r24, r20
     9be:	38 f0       	brcs	.+14     	; 0x9ce <__divsf3_pse+0x26>
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	44 1f       	adc	r20, r20
     9ca:	aa 1f       	adc	r26, r26
     9cc:	a9 f3       	breq	.-22     	; 0x9b8 <__divsf3_pse+0x10>
     9ce:	35 d0       	rcall	.+106    	; 0xa3a <__divsf3_pse+0x92>
     9d0:	0e 2e       	mov	r0, r30
     9d2:	3a f0       	brmi	.+14     	; 0x9e2 <__divsf3_pse+0x3a>
     9d4:	e0 e8       	ldi	r30, 0x80	; 128
     9d6:	32 d0       	rcall	.+100    	; 0xa3c <__divsf3_pse+0x94>
     9d8:	91 50       	subi	r25, 0x01	; 1
     9da:	50 40       	sbci	r21, 0x00	; 0
     9dc:	e6 95       	lsr	r30
     9de:	00 1c       	adc	r0, r0
     9e0:	ca f7       	brpl	.-14     	; 0x9d4 <__divsf3_pse+0x2c>
     9e2:	2b d0       	rcall	.+86     	; 0xa3a <__divsf3_pse+0x92>
     9e4:	fe 2f       	mov	r31, r30
     9e6:	29 d0       	rcall	.+82     	; 0xa3a <__divsf3_pse+0x92>
     9e8:	66 0f       	add	r22, r22
     9ea:	77 1f       	adc	r23, r23
     9ec:	88 1f       	adc	r24, r24
     9ee:	bb 1f       	adc	r27, r27
     9f0:	26 17       	cp	r18, r22
     9f2:	37 07       	cpc	r19, r23
     9f4:	48 07       	cpc	r20, r24
     9f6:	ab 07       	cpc	r26, r27
     9f8:	b0 e8       	ldi	r27, 0x80	; 128
     9fa:	09 f0       	breq	.+2      	; 0x9fe <__divsf3_pse+0x56>
     9fc:	bb 0b       	sbc	r27, r27
     9fe:	80 2d       	mov	r24, r0
     a00:	bf 01       	movw	r22, r30
     a02:	ff 27       	eor	r31, r31
     a04:	93 58       	subi	r25, 0x83	; 131
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	3a f0       	brmi	.+14     	; 0xa18 <__divsf3_pse+0x70>
     a0a:	9e 3f       	cpi	r25, 0xFE	; 254
     a0c:	51 05       	cpc	r21, r1
     a0e:	78 f0       	brcs	.+30     	; 0xa2e <__divsf3_pse+0x86>
     a10:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
     a14:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
     a18:	5f 3f       	cpi	r21, 0xFF	; 255
     a1a:	e4 f3       	brlt	.-8      	; 0xa14 <__divsf3_pse+0x6c>
     a1c:	98 3e       	cpi	r25, 0xE8	; 232
     a1e:	d4 f3       	brlt	.-12     	; 0xa14 <__divsf3_pse+0x6c>
     a20:	86 95       	lsr	r24
     a22:	77 95       	ror	r23
     a24:	67 95       	ror	r22
     a26:	b7 95       	ror	r27
     a28:	f7 95       	ror	r31
     a2a:	9f 5f       	subi	r25, 0xFF	; 255
     a2c:	c9 f7       	brne	.-14     	; 0xa20 <__divsf3_pse+0x78>
     a2e:	88 0f       	add	r24, r24
     a30:	91 1d       	adc	r25, r1
     a32:	96 95       	lsr	r25
     a34:	87 95       	ror	r24
     a36:	97 f9       	bld	r25, 7
     a38:	08 95       	ret
     a3a:	e1 e0       	ldi	r30, 0x01	; 1
     a3c:	66 0f       	add	r22, r22
     a3e:	77 1f       	adc	r23, r23
     a40:	88 1f       	adc	r24, r24
     a42:	bb 1f       	adc	r27, r27
     a44:	62 17       	cp	r22, r18
     a46:	73 07       	cpc	r23, r19
     a48:	84 07       	cpc	r24, r20
     a4a:	ba 07       	cpc	r27, r26
     a4c:	20 f0       	brcs	.+8      	; 0xa56 <__divsf3_pse+0xae>
     a4e:	62 1b       	sub	r22, r18
     a50:	73 0b       	sbc	r23, r19
     a52:	84 0b       	sbc	r24, r20
     a54:	ba 0b       	sbc	r27, r26
     a56:	ee 1f       	adc	r30, r30
     a58:	88 f7       	brcc	.-30     	; 0xa3c <__divsf3_pse+0x94>
     a5a:	e0 95       	com	r30
     a5c:	08 95       	ret

00000a5e <__floatunsisf>:
     a5e:	e8 94       	clt
     a60:	09 c0       	rjmp	.+18     	; 0xa74 <__floatsisf+0x12>

00000a62 <__floatsisf>:
     a62:	97 fb       	bst	r25, 7
     a64:	3e f4       	brtc	.+14     	; 0xa74 <__floatsisf+0x12>
     a66:	90 95       	com	r25
     a68:	80 95       	com	r24
     a6a:	70 95       	com	r23
     a6c:	61 95       	neg	r22
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	8f 4f       	sbci	r24, 0xFF	; 255
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	99 23       	and	r25, r25
     a76:	a9 f0       	breq	.+42     	; 0xaa2 <__floatsisf+0x40>
     a78:	f9 2f       	mov	r31, r25
     a7a:	96 e9       	ldi	r25, 0x96	; 150
     a7c:	bb 27       	eor	r27, r27
     a7e:	93 95       	inc	r25
     a80:	f6 95       	lsr	r31
     a82:	87 95       	ror	r24
     a84:	77 95       	ror	r23
     a86:	67 95       	ror	r22
     a88:	b7 95       	ror	r27
     a8a:	f1 11       	cpse	r31, r1
     a8c:	f8 cf       	rjmp	.-16     	; 0xa7e <__floatsisf+0x1c>
     a8e:	fa f4       	brpl	.+62     	; 0xace <__floatsisf+0x6c>
     a90:	bb 0f       	add	r27, r27
     a92:	11 f4       	brne	.+4      	; 0xa98 <__floatsisf+0x36>
     a94:	60 ff       	sbrs	r22, 0
     a96:	1b c0       	rjmp	.+54     	; 0xace <__floatsisf+0x6c>
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	8f 4f       	sbci	r24, 0xFF	; 255
     a9e:	9f 4f       	sbci	r25, 0xFF	; 255
     aa0:	16 c0       	rjmp	.+44     	; 0xace <__floatsisf+0x6c>
     aa2:	88 23       	and	r24, r24
     aa4:	11 f0       	breq	.+4      	; 0xaaa <__floatsisf+0x48>
     aa6:	96 e9       	ldi	r25, 0x96	; 150
     aa8:	11 c0       	rjmp	.+34     	; 0xacc <__floatsisf+0x6a>
     aaa:	77 23       	and	r23, r23
     aac:	21 f0       	breq	.+8      	; 0xab6 <__floatsisf+0x54>
     aae:	9e e8       	ldi	r25, 0x8E	; 142
     ab0:	87 2f       	mov	r24, r23
     ab2:	76 2f       	mov	r23, r22
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__floatsisf+0x5e>
     ab6:	66 23       	and	r22, r22
     ab8:	71 f0       	breq	.+28     	; 0xad6 <__floatsisf+0x74>
     aba:	96 e8       	ldi	r25, 0x86	; 134
     abc:	86 2f       	mov	r24, r22
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	2a f0       	brmi	.+10     	; 0xace <__floatsisf+0x6c>
     ac4:	9a 95       	dec	r25
     ac6:	66 0f       	add	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	88 1f       	adc	r24, r24
     acc:	da f7       	brpl	.-10     	; 0xac4 <__floatsisf+0x62>
     ace:	88 0f       	add	r24, r24
     ad0:	96 95       	lsr	r25
     ad2:	87 95       	ror	r24
     ad4:	97 f9       	bld	r25, 7
     ad6:	08 95       	ret

00000ad8 <__fp_inf>:
     ad8:	97 f9       	bld	r25, 7
     ada:	9f 67       	ori	r25, 0x7F	; 127
     adc:	80 e8       	ldi	r24, 0x80	; 128
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	08 95       	ret

00000ae4 <__fp_nan>:
     ae4:	9f ef       	ldi	r25, 0xFF	; 255
     ae6:	80 ec       	ldi	r24, 0xC0	; 192
     ae8:	08 95       	ret

00000aea <__fp_pscA>:
     aea:	00 24       	eor	r0, r0
     aec:	0a 94       	dec	r0
     aee:	16 16       	cp	r1, r22
     af0:	17 06       	cpc	r1, r23
     af2:	18 06       	cpc	r1, r24
     af4:	09 06       	cpc	r0, r25
     af6:	08 95       	ret

00000af8 <__fp_pscB>:
     af8:	00 24       	eor	r0, r0
     afa:	0a 94       	dec	r0
     afc:	12 16       	cp	r1, r18
     afe:	13 06       	cpc	r1, r19
     b00:	14 06       	cpc	r1, r20
     b02:	05 06       	cpc	r0, r21
     b04:	08 95       	ret

00000b06 <__fp_round>:
     b06:	09 2e       	mov	r0, r25
     b08:	03 94       	inc	r0
     b0a:	00 0c       	add	r0, r0
     b0c:	11 f4       	brne	.+4      	; 0xb12 <__fp_round+0xc>
     b0e:	88 23       	and	r24, r24
     b10:	52 f0       	brmi	.+20     	; 0xb26 <__fp_round+0x20>
     b12:	bb 0f       	add	r27, r27
     b14:	40 f4       	brcc	.+16     	; 0xb26 <__fp_round+0x20>
     b16:	bf 2b       	or	r27, r31
     b18:	11 f4       	brne	.+4      	; 0xb1e <__fp_round+0x18>
     b1a:	60 ff       	sbrs	r22, 0
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__fp_round+0x20>
     b1e:	6f 5f       	subi	r22, 0xFF	; 255
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	8f 4f       	sbci	r24, 0xFF	; 255
     b24:	9f 4f       	sbci	r25, 0xFF	; 255
     b26:	08 95       	ret

00000b28 <__fp_split3>:
     b28:	57 fd       	sbrc	r21, 7
     b2a:	90 58       	subi	r25, 0x80	; 128
     b2c:	44 0f       	add	r20, r20
     b2e:	55 1f       	adc	r21, r21
     b30:	59 f0       	breq	.+22     	; 0xb48 <__fp_splitA+0x10>
     b32:	5f 3f       	cpi	r21, 0xFF	; 255
     b34:	71 f0       	breq	.+28     	; 0xb52 <__fp_splitA+0x1a>
     b36:	47 95       	ror	r20

00000b38 <__fp_splitA>:
     b38:	88 0f       	add	r24, r24
     b3a:	97 fb       	bst	r25, 7
     b3c:	99 1f       	adc	r25, r25
     b3e:	61 f0       	breq	.+24     	; 0xb58 <__fp_splitA+0x20>
     b40:	9f 3f       	cpi	r25, 0xFF	; 255
     b42:	79 f0       	breq	.+30     	; 0xb62 <__fp_splitA+0x2a>
     b44:	87 95       	ror	r24
     b46:	08 95       	ret
     b48:	12 16       	cp	r1, r18
     b4a:	13 06       	cpc	r1, r19
     b4c:	14 06       	cpc	r1, r20
     b4e:	55 1f       	adc	r21, r21
     b50:	f2 cf       	rjmp	.-28     	; 0xb36 <__fp_split3+0xe>
     b52:	46 95       	lsr	r20
     b54:	f1 df       	rcall	.-30     	; 0xb38 <__fp_splitA>
     b56:	08 c0       	rjmp	.+16     	; 0xb68 <__fp_splitA+0x30>
     b58:	16 16       	cp	r1, r22
     b5a:	17 06       	cpc	r1, r23
     b5c:	18 06       	cpc	r1, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	f1 cf       	rjmp	.-30     	; 0xb44 <__fp_splitA+0xc>
     b62:	86 95       	lsr	r24
     b64:	71 05       	cpc	r23, r1
     b66:	61 05       	cpc	r22, r1
     b68:	08 94       	sec
     b6a:	08 95       	ret

00000b6c <__fp_zero>:
     b6c:	e8 94       	clt

00000b6e <__fp_szero>:
     b6e:	bb 27       	eor	r27, r27
     b70:	66 27       	eor	r22, r22
     b72:	77 27       	eor	r23, r23
     b74:	cb 01       	movw	r24, r22
     b76:	97 f9       	bld	r25, 7
     b78:	08 95       	ret

00000b7a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     b7a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     b7c:	91 8d       	ldd	r25, Z+25	; 0x19
     b7e:	22 8d       	ldd	r18, Z+26	; 0x1a
     b80:	89 2f       	mov	r24, r25
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	80 5c       	subi	r24, 0xC0	; 192
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	82 1b       	sub	r24, r18
     b8a:	91 09       	sbc	r25, r1
}
     b8c:	8f 73       	andi	r24, 0x3F	; 63
     b8e:	99 27       	eor	r25, r25
     b90:	08 95       	ret

00000b92 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     b92:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     b94:	91 8d       	ldd	r25, Z+25	; 0x19
     b96:	82 8d       	ldd	r24, Z+26	; 0x1a
     b98:	98 17       	cp	r25, r24
     b9a:	31 f0       	breq	.+12     	; 0xba8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b9c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b9e:	e8 0f       	add	r30, r24
     ba0:	f1 1d       	adc	r31, r1
     ba2:	85 8d       	ldd	r24, Z+29	; 0x1d
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     bac:	08 95       	ret

00000bae <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     bae:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     bb0:	91 8d       	ldd	r25, Z+25	; 0x19
     bb2:	82 8d       	ldd	r24, Z+26	; 0x1a
     bb4:	98 17       	cp	r25, r24
     bb6:	61 f0       	breq	.+24     	; 0xbd0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     bb8:	82 8d       	ldd	r24, Z+26	; 0x1a
     bba:	df 01       	movw	r26, r30
     bbc:	a8 0f       	add	r26, r24
     bbe:	b1 1d       	adc	r27, r1
     bc0:	5d 96       	adiw	r26, 0x1d	; 29
     bc2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     bc4:	92 8d       	ldd	r25, Z+26	; 0x1a
     bc6:	9f 5f       	subi	r25, 0xFF	; 255
     bc8:	9f 73       	andi	r25, 0x3F	; 63
     bca:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     bd4:	08 95       	ret

00000bd6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     bd6:	fc 01       	movw	r30, r24
     bd8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     bda:	44 8d       	ldd	r20, Z+28	; 0x1c
     bdc:	25 2f       	mov	r18, r21
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	84 2f       	mov	r24, r20
     be2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     be4:	82 1b       	sub	r24, r18
     be6:	93 0b       	sbc	r25, r19
     be8:	54 17       	cp	r21, r20
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     bec:	cf 96       	adiw	r24, 0x3f	; 63
     bee:	08 95       	ret
  return tail - head - 1;
     bf0:	01 97       	sbiw	r24, 0x01	; 1
}
     bf2:	08 95       	ret

00000bf4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bf4:	86 e5       	ldi	r24, 0x56	; 86
     bf6:	97 e0       	ldi	r25, 0x07	; 7
     bf8:	89 2b       	or	r24, r25
     bfa:	49 f0       	breq	.+18     	; 0xc0e <_Z14serialEventRunv+0x1a>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	89 2b       	or	r24, r25
     c02:	29 f0       	breq	.+10     	; 0xc0e <_Z14serialEventRunv+0x1a>
     c04:	0e 94 56 07 	call	0xeac	; 0xeac <_Z17Serial0_availablev>
     c08:	81 11       	cpse	r24, r1
     c0a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     c0e:	08 95       	ret

00000c10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     c10:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     c12:	84 8d       	ldd	r24, Z+28	; 0x1c
     c14:	df 01       	movw	r26, r30
     c16:	a8 0f       	add	r26, r24
     c18:	b1 1d       	adc	r27, r1
     c1a:	a3 5a       	subi	r26, 0xA3	; 163
     c1c:	bf 4f       	sbci	r27, 0xFF	; 255
     c1e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     c20:	84 8d       	ldd	r24, Z+28	; 0x1c
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	8f 73       	andi	r24, 0x3F	; 63
     c28:	99 27       	eor	r25, r25
     c2a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     c2c:	a6 89       	ldd	r26, Z+22	; 0x16
     c2e:	b7 89       	ldd	r27, Z+23	; 0x17
     c30:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     c32:	a0 89       	ldd	r26, Z+16	; 0x10
     c34:	b1 89       	ldd	r27, Z+17	; 0x11
     c36:	8c 91       	ld	r24, X
     c38:	83 70       	andi	r24, 0x03	; 3
     c3a:	80 64       	ori	r24, 0x40	; 64
     c3c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     c3e:	93 8d       	ldd	r25, Z+27	; 0x1b
     c40:	84 8d       	ldd	r24, Z+28	; 0x1c
     c42:	98 13       	cpse	r25, r24
     c44:	06 c0       	rjmp	.+12     	; 0xc52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     c46:	02 88       	ldd	r0, Z+18	; 0x12
     c48:	f3 89       	ldd	r31, Z+19	; 0x13
     c4a:	e0 2d       	mov	r30, r0
     c4c:	80 81       	ld	r24, Z
     c4e:	8f 7d       	andi	r24, 0xDF	; 223
     c50:	80 83       	st	Z, r24
     c52:	08 95       	ret

00000c54 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
  _written = true;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     c66:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c68:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c6a:	98 13       	cpse	r25, r24
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <_ZN14HardwareSerial5writeEh+0x24>
     c6e:	e8 89       	ldd	r30, Y+16	; 0x10
     c70:	f9 89       	ldd	r31, Y+17	; 0x11
     c72:	80 81       	ld	r24, Z
     c74:	85 fd       	sbrc	r24, 5
     c76:	26 c0       	rjmp	.+76     	; 0xcc4 <_ZN14HardwareSerial5writeEh+0x70>
     c78:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c7a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	0f 5f       	subi	r16, 0xFF	; 255
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
     c82:	0f 73       	andi	r16, 0x3F	; 63
     c84:	11 27       	eor	r17, r17
     c86:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c88:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c8a:	e8 12       	cpse	r14, r24
     c8c:	0c c0       	rjmp	.+24     	; 0xca6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	07 fc       	sbrc	r0, 7
     c92:	fa cf       	rjmp	.-12     	; 0xc88 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     c94:	e8 89       	ldd	r30, Y+16	; 0x10
     c96:	f9 89       	ldd	r31, Y+17	; 0x11
     c98:	80 81       	ld	r24, Z
     c9a:	85 ff       	sbrs	r24, 5
     c9c:	f5 cf       	rjmp	.-22     	; 0xc88 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ca4:	f1 cf       	rjmp	.-30     	; 0xc88 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca8:	fe 01       	movw	r30, r28
     caa:	e8 0f       	add	r30, r24
     cac:	f1 1d       	adc	r31, r1
     cae:	e3 5a       	subi	r30, 0xA3	; 163
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     cb4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cb6:	f8 94       	cli
    _tx_buffer_head = i;
     cb8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     cba:	ea 89       	ldd	r30, Y+18	; 0x12
     cbc:	fb 89       	ldd	r31, Y+19	; 0x13
     cbe:	80 81       	ld	r24, Z
     cc0:	80 62       	ori	r24, 0x20	; 32
     cc2:	0a c0       	rjmp	.+20     	; 0xcd8 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     cc4:	9f b7       	in	r25, 0x3f	; 63
     cc6:	f8 94       	cli
      *_udr = c;
     cc8:	ee 89       	ldd	r30, Y+22	; 0x16
     cca:	ff 89       	ldd	r31, Y+23	; 0x17
     ccc:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     cce:	e8 89       	ldd	r30, Y+16	; 0x10
     cd0:	f9 89       	ldd	r31, Y+17	; 0x11
     cd2:	80 81       	ld	r24, Z
     cd4:	83 70       	andi	r24, 0x03	; 3
     cd6:	80 64       	ori	r24, 0x40	; 64
     cd8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cda:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	08 95       	ret

00000cee <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     cf4:	88 8d       	ldd	r24, Y+24	; 0x18
     cf6:	88 23       	and	r24, r24
     cf8:	c9 f0       	breq	.+50     	; 0xd2c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     cfa:	ea 89       	ldd	r30, Y+18	; 0x12
     cfc:	fb 89       	ldd	r31, Y+19	; 0x13
     cfe:	80 81       	ld	r24, Z
     d00:	85 fd       	sbrc	r24, 5
     d02:	05 c0       	rjmp	.+10     	; 0xd0e <_ZN14HardwareSerial5flushEv+0x20>
     d04:	a8 89       	ldd	r26, Y+16	; 0x10
     d06:	b9 89       	ldd	r27, Y+17	; 0x11
     d08:	8c 91       	ld	r24, X
     d0a:	86 fd       	sbrc	r24, 6
     d0c:	0f c0       	rjmp	.+30     	; 0xd2c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	07 fc       	sbrc	r0, 7
     d12:	f5 cf       	rjmp	.-22     	; 0xcfe <_ZN14HardwareSerial5flushEv+0x10>
     d14:	80 81       	ld	r24, Z
     d16:	85 ff       	sbrs	r24, 5
     d18:	f2 cf       	rjmp	.-28     	; 0xcfe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     d1a:	a8 89       	ldd	r26, Y+16	; 0x10
     d1c:	b9 89       	ldd	r27, Y+17	; 0x11
     d1e:	8c 91       	ld	r24, X
     d20:	85 ff       	sbrs	r24, 5
     d22:	ed cf       	rjmp	.-38     	; 0xcfe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     d24:	ce 01       	movw	r24, r28
     d26:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     d2a:	e7 cf       	rjmp	.-50     	; 0xcfa <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
     d42:	6a 01       	movw	r12, r20
     d44:	7b 01       	movw	r14, r22
     d46:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     d48:	e8 89       	ldd	r30, Y+16	; 0x10
     d4a:	f9 89       	ldd	r31, Y+17	; 0x11
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d50:	41 15       	cp	r20, r1
     d52:	51 4e       	sbci	r21, 0xE1	; 225
     d54:	61 05       	cpc	r22, r1
     d56:	71 05       	cpc	r23, r1
     d58:	b1 f0       	breq	.+44     	; 0xd86 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	79 e0       	ldi	r23, 0x09	; 9
     d5e:	8d e3       	ldi	r24, 0x3D	; 61
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	a7 01       	movw	r20, r14
     d64:	96 01       	movw	r18, r12
     d66:	0e 94 23 0c 	call	0x1846	; 0x1846 <__udivmodsi4>
     d6a:	da 01       	movw	r26, r20
     d6c:	c9 01       	movw	r24, r18
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	a1 09       	sbc	r26, r1
     d72:	b1 09       	sbc	r27, r1
     d74:	b6 95       	lsr	r27
     d76:	a7 95       	ror	r26
     d78:	97 95       	ror	r25
     d7a:	87 95       	ror	r24
     d7c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d7e:	21 15       	cp	r18, r1
     d80:	80 e1       	ldi	r24, 0x10	; 16
     d82:	38 07       	cpc	r19, r24
     d84:	a8 f0       	brcs	.+42     	; 0xdb0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     d86:	e8 89       	ldd	r30, Y+16	; 0x10
     d88:	f9 89       	ldd	r31, Y+17	; 0x11
     d8a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d8c:	60 e8       	ldi	r22, 0x80	; 128
     d8e:	74 e8       	ldi	r23, 0x84	; 132
     d90:	8e e1       	ldi	r24, 0x1E	; 30
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a7 01       	movw	r20, r14
     d96:	96 01       	movw	r18, r12
     d98:	0e 94 23 0c 	call	0x1846	; 0x1846 <__udivmodsi4>
     d9c:	da 01       	movw	r26, r20
     d9e:	c9 01       	movw	r24, r18
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	a1 09       	sbc	r26, r1
     da4:	b1 09       	sbc	r27, r1
     da6:	b6 95       	lsr	r27
     da8:	a7 95       	ror	r26
     daa:	97 95       	ror	r25
     dac:	87 95       	ror	r24
     dae:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     db0:	ec 85       	ldd	r30, Y+12	; 0x0c
     db2:	fd 85       	ldd	r31, Y+13	; 0x0d
     db4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     db6:	ee 85       	ldd	r30, Y+14	; 0x0e
     db8:	ff 85       	ldd	r31, Y+15	; 0x0f
     dba:	20 83       	st	Z, r18

  _written = false;
     dbc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     dbe:	ec 89       	ldd	r30, Y+20	; 0x14
     dc0:	fd 89       	ldd	r31, Y+21	; 0x15
     dc2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     dc4:	ea 89       	ldd	r30, Y+18	; 0x12
     dc6:	fb 89       	ldd	r31, Y+19	; 0x13
     dc8:	80 81       	ld	r24, Z
     dca:	80 61       	ori	r24, 0x10	; 16
     dcc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     dce:	ea 89       	ldd	r30, Y+18	; 0x12
     dd0:	fb 89       	ldd	r31, Y+19	; 0x13
     dd2:	80 81       	ld	r24, Z
     dd4:	88 60       	ori	r24, 0x08	; 8
     dd6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     dd8:	ea 89       	ldd	r30, Y+18	; 0x12
     dda:	fb 89       	ldd	r31, Y+19	; 0x13
     ddc:	80 81       	ld	r24, Z
     dde:	80 68       	ori	r24, 0x80	; 128
     de0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     de2:	ea 89       	ldd	r30, Y+18	; 0x12
     de4:	fb 89       	ldd	r31, Y+19	; 0x13
     de6:	80 81       	ld	r24, Z
     de8:	8f 7d       	andi	r24, 0xDF	; 223
     dea:	80 83       	st	Z, r24
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	08 95       	ret

00000dfc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	2f 93       	push	r18
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     e10:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <Serial+0x10>
     e14:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <Serial+0x11>
     e18:	80 81       	ld	r24, Z
     e1a:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <Serial+0x16>
     e1e:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <Serial+0x17>
     e22:	82 fd       	sbrc	r24, 2
     e24:	12 c0       	rjmp	.+36     	; 0xe4a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e26:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e28:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Serial+0x19>
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e30:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <Serial+0x1a>
     e34:	82 17       	cp	r24, r18
     e36:	51 f0       	breq	.+20     	; 0xe4c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     e38:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <Serial+0x19>
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	e5 57       	subi	r30, 0x75	; 117
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
     e42:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     e44:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Serial+0x19>
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e4a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     e4c:	ff 91       	pop	r31
     e4e:	ef 91       	pop	r30
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     e82:	8b e8       	ldi	r24, 0x8B	; 139
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	bf 91       	pop	r27
     e90:	af 91       	pop	r26
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	7f 91       	pop	r23
     e98:	6f 91       	pop	r22
     e9a:	5f 91       	pop	r21
     e9c:	4f 91       	pop	r20
     e9e:	3f 91       	pop	r19
     ea0:	2f 91       	pop	r18
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     eac:	8b e8       	ldi	r24, 0x8B	; 139
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN14HardwareSerial9availableEv>
     eb4:	21 e0       	ldi	r18, 0x01	; 1
     eb6:	89 2b       	or	r24, r25
     eb8:	09 f4       	brne	.+2      	; 0xebc <_Z17Serial0_availablev+0x10>
     eba:	20 e0       	ldi	r18, 0x00	; 0
}
     ebc:	82 2f       	mov	r24, r18
     ebe:	08 95       	ret

00000ec0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ec0:	eb e8       	ldi	r30, 0x8B	; 139
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	13 82       	std	Z+3, r1	; 0x03
     ec6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     ec8:	88 ee       	ldi	r24, 0xE8	; 232
     eca:	93 e0       	ldi	r25, 0x03	; 3
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	84 83       	std	Z+4, r24	; 0x04
     ed2:	95 83       	std	Z+5, r25	; 0x05
     ed4:	a6 83       	std	Z+6, r26	; 0x06
     ed6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ed8:	8c e3       	ldi	r24, 0x3C	; 60
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	85 ec       	ldi	r24, 0xC5	; 197
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	95 87       	std	Z+13, r25	; 0x0d
     ee6:	84 87       	std	Z+12, r24	; 0x0c
     ee8:	84 ec       	ldi	r24, 0xC4	; 196
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	97 87       	std	Z+15, r25	; 0x0f
     eee:	86 87       	std	Z+14, r24	; 0x0e
     ef0:	80 ec       	ldi	r24, 0xC0	; 192
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	91 8b       	std	Z+17, r25	; 0x11
     ef6:	80 8b       	std	Z+16, r24	; 0x10
     ef8:	81 ec       	ldi	r24, 0xC1	; 193
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	93 8b       	std	Z+19, r25	; 0x13
     efe:	82 8b       	std	Z+18, r24	; 0x12
     f00:	82 ec       	ldi	r24, 0xC2	; 194
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	95 8b       	std	Z+21, r25	; 0x15
     f06:	84 8b       	std	Z+20, r24	; 0x14
     f08:	86 ec       	ldi	r24, 0xC6	; 198
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	97 8b       	std	Z+23, r25	; 0x17
     f0e:	86 8b       	std	Z+22, r24	; 0x16
     f10:	11 8e       	std	Z+25, r1	; 0x19
     f12:	12 8e       	std	Z+26, r1	; 0x1a
     f14:	13 8e       	std	Z+27, r1	; 0x1b
     f16:	14 8e       	std	Z+28, r1	; 0x1c
     f18:	08 95       	ret

00000f1a <initVariant>:
     f1a:	08 95       	ret

00000f1c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     f1c:	0e 94 23 0a 	call	0x1446	; 0x1446 <init>

	initVariant();
     f20:	0e 94 8d 07 	call	0xf1a	; 0xf1a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     f24:	0e 94 c3 01 	call	0x386	; 0x386 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     f28:	ca ef       	ldi	r28, 0xFA	; 250
     f2a:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     f2c:	0e 94 34 02 	call	0x468	; 0x468 <loop>
		if (serialEventRun) serialEventRun();
     f30:	20 97       	sbiw	r28, 0x00	; 0
     f32:	e1 f3       	breq	.-8      	; 0xf2c <main+0x10>
     f34:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_Z14serialEventRunv>
     f38:	f9 cf       	rjmp	.-14     	; 0xf2c <main+0x10>

00000f3a <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	6c 01       	movw	r12, r24
     f4c:	7a 01       	movw	r14, r20
     f4e:	8b 01       	movw	r16, r22
     f50:	c0 e0       	ldi	r28, 0x00	; 0
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	ce 15       	cp	r28, r14
     f56:	df 05       	cpc	r29, r15
     f58:	81 f0       	breq	.+32     	; 0xf7a <_ZN5Print5writeEPKhj+0x40>
     f5a:	d8 01       	movw	r26, r16
     f5c:	6d 91       	ld	r22, X+
     f5e:	8d 01       	movw	r16, r26
     f60:	d6 01       	movw	r26, r12
     f62:	ed 91       	ld	r30, X+
     f64:	fc 91       	ld	r31, X
     f66:	01 90       	ld	r0, Z+
     f68:	f0 81       	ld	r31, Z
     f6a:	e0 2d       	mov	r30, r0
     f6c:	c6 01       	movw	r24, r12
     f6e:	09 95       	icall
     f70:	89 2b       	or	r24, r25
     f72:	11 f0       	breq	.+4      	; 0xf78 <_ZN5Print5writeEPKhj+0x3e>
     f74:	21 96       	adiw	r28, 0x01	; 1
     f76:	ee cf       	rjmp	.-36     	; 0xf54 <_ZN5Print5writeEPKhj+0x1a>
     f78:	7e 01       	movw	r14, r28
     f7a:	c7 01       	movw	r24, r14
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	df 90       	pop	r13
     f8a:	cf 90       	pop	r12
     f8c:	08 95       	ret

00000f8e <_ZN5Print5writeEPKc>:
     f8e:	61 15       	cp	r22, r1
     f90:	71 05       	cpc	r23, r1
     f92:	79 f0       	breq	.+30     	; 0xfb2 <_ZN5Print5writeEPKc+0x24>
     f94:	fb 01       	movw	r30, r22
     f96:	01 90       	ld	r0, Z+
     f98:	00 20       	and	r0, r0
     f9a:	e9 f7       	brne	.-6      	; 0xf96 <_ZN5Print5writeEPKc+0x8>
     f9c:	31 97       	sbiw	r30, 0x01	; 1
     f9e:	af 01       	movw	r20, r30
     fa0:	46 1b       	sub	r20, r22
     fa2:	57 0b       	sbc	r21, r23
     fa4:	dc 01       	movw	r26, r24
     fa6:	ed 91       	ld	r30, X+
     fa8:	fc 91       	ld	r31, X
     faa:	02 80       	ldd	r0, Z+2	; 0x02
     fac:	f3 81       	ldd	r31, Z+3	; 0x03
     fae:	e0 2d       	mov	r30, r0
     fb0:	09 94       	ijmp
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	08 95       	ret

00000fb8 <_ZN5Print5printEPKc>:
     fb8:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <_ZN5Print5writeEPKc>

00000fbc <_ZN5Print5printEc>:
     fbc:	dc 01       	movw	r26, r24
     fbe:	ed 91       	ld	r30, X+
     fc0:	fc 91       	ld	r31, X
     fc2:	01 90       	ld	r0, Z+
     fc4:	f0 81       	ld	r31, Z
     fc6:	e0 2d       	mov	r30, r0
     fc8:	09 94       	ijmp

00000fca <_ZN5Print11printNumberEmh>:
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	a1 97       	sbiw	r28, 0x21	; 33
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	7c 01       	movw	r14, r24
     ff0:	fa 01       	movw	r30, r20
     ff2:	cb 01       	movw	r24, r22
     ff4:	19 a2       	std	Y+33, r1	; 0x21
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	08 f4       	brcc	.+2      	; 0xffc <_ZN5Print11printNumberEmh+0x32>
     ffa:	2a e0       	ldi	r18, 0x0A	; 10
     ffc:	8e 01       	movw	r16, r28
     ffe:	0f 5d       	subi	r16, 0xDF	; 223
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	82 2e       	mov	r8, r18
    1004:	91 2c       	mov	r9, r1
    1006:	a1 2c       	mov	r10, r1
    1008:	b1 2c       	mov	r11, r1
    100a:	bf 01       	movw	r22, r30
    100c:	a5 01       	movw	r20, r10
    100e:	94 01       	movw	r18, r8
    1010:	0e 94 23 0c 	call	0x1846	; 0x1846 <__udivmodsi4>
    1014:	f9 01       	movw	r30, r18
    1016:	ca 01       	movw	r24, r20
    1018:	01 50       	subi	r16, 0x01	; 1
    101a:	11 09       	sbc	r17, r1
    101c:	6a 30       	cpi	r22, 0x0A	; 10
    101e:	10 f4       	brcc	.+4      	; 0x1024 <_ZN5Print11printNumberEmh+0x5a>
    1020:	60 5d       	subi	r22, 0xD0	; 208
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <_ZN5Print11printNumberEmh+0x5c>
    1024:	69 5c       	subi	r22, 0xC9	; 201
    1026:	d8 01       	movw	r26, r16
    1028:	6c 93       	st	X, r22
    102a:	23 2b       	or	r18, r19
    102c:	24 2b       	or	r18, r20
    102e:	25 2b       	or	r18, r21
    1030:	61 f7       	brne	.-40     	; 0x100a <_ZN5Print11printNumberEmh+0x40>
    1032:	b8 01       	movw	r22, r16
    1034:	c7 01       	movw	r24, r14
    1036:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN5Print5writeEPKc>
    103a:	a1 96       	adiw	r28, 0x21	; 33
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	08 95       	ret

0000105c <_ZN5Print5printEmi>:
    105c:	21 15       	cp	r18, r1
    105e:	31 05       	cpc	r19, r1
    1060:	41 f4       	brne	.+16     	; 0x1072 <_ZN5Print5printEmi+0x16>
    1062:	dc 01       	movw	r26, r24
    1064:	ed 91       	ld	r30, X+
    1066:	fc 91       	ld	r31, X
    1068:	01 90       	ld	r0, Z+
    106a:	f0 81       	ld	r31, Z
    106c:	e0 2d       	mov	r30, r0
    106e:	64 2f       	mov	r22, r20
    1070:	09 94       	ijmp
    1072:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_ZN5Print11printNumberEmh>

00001076 <_ZN5Print5printEji>:
    1076:	9a 01       	movw	r18, r20
    1078:	ab 01       	movw	r20, r22
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	0c 94 2e 08 	jmp	0x105c	; 0x105c <_ZN5Print5printEmi>

00001082 <_ZN5Print5printEli>:
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	81 f4       	brne	.+32     	; 0x10b8 <_ZN5Print5printEli+0x36>
    1098:	dc 01       	movw	r26, r24
    109a:	ed 91       	ld	r30, X+
    109c:	fc 91       	ld	r31, X
    109e:	01 90       	ld	r0, Z+
    10a0:	f0 81       	ld	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	64 2f       	mov	r22, r20
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	09 94       	ijmp
    10b8:	2a 30       	cpi	r18, 0x0A	; 10
    10ba:	31 05       	cpc	r19, r1
    10bc:	01 f5       	brne	.+64     	; 0x10fe <_ZN5Print5printEli+0x7c>
    10be:	77 ff       	sbrs	r23, 7
    10c0:	1d c0       	rjmp	.+58     	; 0x10fc <_ZN5Print5printEli+0x7a>
    10c2:	6a 01       	movw	r12, r20
    10c4:	7b 01       	movw	r14, r22
    10c6:	ec 01       	movw	r28, r24
    10c8:	6d e2       	ldi	r22, 0x2D	; 45
    10ca:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print5printEc>
    10ce:	8c 01       	movw	r16, r24
    10d0:	44 27       	eor	r20, r20
    10d2:	55 27       	eor	r21, r21
    10d4:	ba 01       	movw	r22, r20
    10d6:	4c 19       	sub	r20, r12
    10d8:	5d 09       	sbc	r21, r13
    10da:	6e 09       	sbc	r22, r14
    10dc:	7f 09       	sbc	r23, r15
    10de:	2a e0       	ldi	r18, 0x0A	; 10
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN5Print11printNumberEmh>
    10e6:	80 0f       	add	r24, r16
    10e8:	91 1f       	adc	r25, r17
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	08 95       	ret
    10fc:	2a e0       	ldi	r18, 0x0A	; 10
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_ZN5Print11printNumberEmh>

00001112 <_ZN5Print5printEii>:
    1112:	9a 01       	movw	r18, r20
    1114:	ab 01       	movw	r20, r22
    1116:	77 0f       	add	r23, r23
    1118:	66 0b       	sbc	r22, r22
    111a:	77 0b       	sbc	r23, r23
    111c:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_ZN5Print5printEli>

00001120 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	8c 01       	movw	r16, r24
    113c:	6a 01       	movw	r12, r20
    113e:	7b 01       	movw	r14, r22
    1140:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1142:	9a 01       	movw	r18, r20
    1144:	ab 01       	movw	r20, r22
    1146:	c7 01       	movw	r24, r14
    1148:	b6 01       	movw	r22, r12
    114a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__unordsf2>
    114e:	88 23       	and	r24, r24
    1150:	19 f0       	breq	.+6      	; 0x1158 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1152:	6d e4       	ldi	r22, 0x4D	; 77
    1154:	71 e0       	ldi	r23, 0x01	; 1
    1156:	27 c0       	rjmp	.+78     	; 0x11a6 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1158:	46 01       	movw	r8, r12
    115a:	57 01       	movw	r10, r14
    115c:	e8 94       	clt
    115e:	b7 f8       	bld	r11, 7
    1160:	2f ef       	ldi	r18, 0xFF	; 255
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	5f e7       	ldi	r21, 0x7F	; 127
    1168:	c5 01       	movw	r24, r10
    116a:	b4 01       	movw	r22, r8
    116c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__unordsf2>
    1170:	81 11       	cpse	r24, r1
    1172:	0d c0       	rjmp	.+26     	; 0x118e <_ZN5Print10printFloatEdh+0x6e>
    1174:	2f ef       	ldi	r18, 0xFF	; 255
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	5f e7       	ldi	r21, 0x7F	; 127
    117c:	c5 01       	movw	r24, r10
    117e:	b4 01       	movw	r22, r8
    1180:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__cmpsf2>
    1184:	18 16       	cp	r1, r24
    1186:	1c f4       	brge	.+6      	; 0x118e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1188:	61 e5       	ldi	r22, 0x51	; 81
    118a:	71 e0       	ldi	r23, 0x01	; 1
    118c:	0c c0       	rjmp	.+24     	; 0x11a6 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    118e:	2f ef       	ldi	r18, 0xFF	; 255
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	5f e4       	ldi	r21, 0x4F	; 79
    1196:	c7 01       	movw	r24, r14
    1198:	b6 01       	movw	r22, r12
    119a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__gesf2>
    119e:	18 16       	cp	r1, r24
    11a0:	94 f4       	brge	.+36     	; 0x11c6 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    11a2:	65 e5       	ldi	r22, 0x55	; 85
    11a4:	71 e0       	ldi	r23, 0x01	; 1
    11a6:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	9f 90       	pop	r9
    11be:	8f 90       	pop	r8
    11c0:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    11c2:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    11c6:	2f ef       	ldi	r18, 0xFF	; 255
    11c8:	3f ef       	ldi	r19, 0xFF	; 255
    11ca:	4f e7       	ldi	r20, 0x7F	; 127
    11cc:	5f ec       	ldi	r21, 0xCF	; 207
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__cmpsf2>
    11d6:	87 fd       	sbrc	r24, 7
    11d8:	e4 cf       	rjmp	.-56     	; 0x11a2 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	c7 01       	movw	r24, r14
    11e2:	b6 01       	movw	r22, r12
    11e4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__cmpsf2>
    11e8:	87 ff       	sbrs	r24, 7
    11ea:	0a c0       	rjmp	.+20     	; 0x1200 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    11ec:	6d e2       	ldi	r22, 0x2D	; 45
    11ee:	c8 01       	movw	r24, r16
    11f0:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print5printEc>
    11f4:	ec 01       	movw	r28, r24
     number = -number;
    11f6:	f7 fa       	bst	r15, 7
    11f8:	f0 94       	com	r15
    11fa:	f7 f8       	bld	r15, 7
    11fc:	f0 94       	com	r15
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1200:	c0 e0       	ldi	r28, 0x00	; 0
    1202:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1204:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    120e:	7b 14       	cp	r7, r11
    1210:	41 f0       	breq	.+16     	; 0x1222 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e2       	ldi	r20, 0x20	; 32
    1218:	51 e4       	ldi	r21, 0x41	; 65
    121a:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    121e:	b3 94       	inc	r11
    1220:	f6 cf       	rjmp	.-20     	; 0x120e <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1222:	a7 01       	movw	r20, r14
    1224:	96 01       	movw	r18, r12
    1226:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__addsf3>
    122a:	6b 01       	movw	r12, r22
    122c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    122e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__fixunssfsi>
    1232:	4b 01       	movw	r8, r22
    1234:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1236:	2a e0       	ldi	r18, 0x0A	; 10
    1238:	ab 01       	movw	r20, r22
    123a:	bc 01       	movw	r22, r24
    123c:	c8 01       	movw	r24, r16
    123e:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1242:	c8 0f       	add	r28, r24
    1244:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1246:	77 20       	and	r7, r7
    1248:	b9 f1       	breq	.+110    	; 0x12b8 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    124a:	c5 01       	movw	r24, r10
    124c:	b4 01       	movw	r22, r8
    124e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
    1252:	9b 01       	movw	r18, r22
    1254:	ac 01       	movw	r20, r24
    1256:	c7 01       	movw	r24, r14
    1258:	b6 01       	movw	r22, r12
    125a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__subsf3>
    125e:	6b 01       	movw	r12, r22
    1260:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1262:	6e e2       	ldi	r22, 0x2E	; 46
    1264:	c8 01       	movw	r24, r16
    1266:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print5printEc>
    126a:	c8 0f       	add	r28, r24
    126c:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	c7 01       	movw	r24, r14
    1278:	b6 01       	movw	r22, r12
    127a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__mulsf3>
    127e:	4b 01       	movw	r8, r22
    1280:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1282:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__fixunssfsi>
    1286:	6b 01       	movw	r12, r22
    1288:	7c 01       	movw	r14, r24
    n += print(toPrint);
    128a:	4a e0       	ldi	r20, 0x0A	; 10
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	c8 01       	movw	r24, r16
    1290:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN5Print5printEji>
    1294:	c8 0f       	add	r28, r24
    1296:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1298:	b6 01       	movw	r22, r12
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	c5 01       	movw	r24, r10
    12a8:	b4 01       	movw	r22, r8
    12aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__subsf3>
    12ae:	6b 01       	movw	r12, r22
    12b0:	7c 01       	movw	r14, r24
    12b2:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    12b4:	71 10       	cpse	r7, r1
    12b6:	db cf       	rjmp	.-74     	; 0x126e <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    12b8:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	8f 90       	pop	r8
    12d2:	7f 90       	pop	r7
    12d4:	08 95       	ret

000012d6 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    12d6:	0c 94 90 08 	jmp	0x1120	; 0x1120 <_ZN5Print10printFloatEdh>

000012da <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timer0_millis>
    12f4:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timer0_millis+0x1>
    12f8:	a0 91 2b 02 	lds	r26, 0x022B	; 0x80022b <timer0_millis+0x2>
    12fc:	b0 91 2c 02 	lds	r27, 0x022C	; 0x80022c <timer0_millis+0x3>
    1300:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <timer0_fract>
    1304:	23 e0       	ldi	r18, 0x03	; 3
    1306:	23 0f       	add	r18, r19
    1308:	2d 37       	cpi	r18, 0x7D	; 125
    130a:	20 f4       	brcc	.+8      	; 0x1314 <__vector_16+0x3a>
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	a1 1d       	adc	r26, r1
    1310:	b1 1d       	adc	r27, r1
    1312:	05 c0       	rjmp	.+10     	; 0x131e <__vector_16+0x44>
    1314:	26 e8       	ldi	r18, 0x86	; 134
    1316:	23 0f       	add	r18, r19
    1318:	02 96       	adiw	r24, 0x02	; 2
    131a:	a1 1d       	adc	r26, r1
    131c:	b1 1d       	adc	r27, r1
    131e:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <timer0_fract>
    1322:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <timer0_millis>
    1326:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <timer0_millis+0x1>
    132a:	a0 93 2b 02 	sts	0x022B, r26	; 0x80022b <timer0_millis+0x2>
    132e:	b0 93 2c 02 	sts	0x022C, r27	; 0x80022c <timer0_millis+0x3>
    1332:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timer0_overflow_count>
    1336:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <timer0_overflow_count+0x1>
    133a:	a0 91 2f 02 	lds	r26, 0x022F	; 0x80022f <timer0_overflow_count+0x2>
    133e:	b0 91 30 02 	lds	r27, 0x0230	; 0x800230 <timer0_overflow_count+0x3>
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	a1 1d       	adc	r26, r1
    1346:	b1 1d       	adc	r27, r1
    1348:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timer0_overflow_count>
    134c:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <timer0_overflow_count+0x1>
    1350:	a0 93 2f 02 	sts	0x022F, r26	; 0x80022f <timer0_overflow_count+0x2>
    1354:	b0 93 30 02 	sts	0x0230, r27	; 0x800230 <timer0_overflow_count+0x3>
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    136e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1370:	f8 94       	cli
	m = timer0_overflow_count;
    1372:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timer0_overflow_count>
    1376:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <timer0_overflow_count+0x1>
    137a:	a0 91 2f 02 	lds	r26, 0x022F	; 0x80022f <timer0_overflow_count+0x2>
    137e:	b0 91 30 02 	lds	r27, 0x0230	; 0x800230 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1382:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1384:	a8 9b       	sbis	0x15, 0	; 21
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <micros+0x24>
    1388:	2f 3f       	cpi	r18, 0xFF	; 255
    138a:	19 f0       	breq	.+6      	; 0x1392 <micros+0x24>
		m++;
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	a1 1d       	adc	r26, r1
    1390:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1392:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1394:	ba 2f       	mov	r27, r26
    1396:	a9 2f       	mov	r26, r25
    1398:	98 2f       	mov	r25, r24
    139a:	88 27       	eor	r24, r24
    139c:	82 0f       	add	r24, r18
    139e:	91 1d       	adc	r25, r1
    13a0:	a1 1d       	adc	r26, r1
    13a2:	b1 1d       	adc	r27, r1
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	42 e0       	ldi	r20, 0x02	; 2
    13aa:	66 0f       	add	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	88 1f       	adc	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	4a 95       	dec	r20
    13b4:	d1 f7       	brne	.-12     	; 0x13aa <micros+0x3c>
}
    13b6:	08 95       	ret

000013b8 <delay>:

void delay(unsigned long ms)
{
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	6b 01       	movw	r12, r22
    13ca:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    13cc:	0e 94 b7 09 	call	0x136e	; 0x136e <micros>
    13d0:	4b 01       	movw	r8, r22
    13d2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    13d4:	c1 14       	cp	r12, r1
    13d6:	d1 04       	cpc	r13, r1
    13d8:	e1 04       	cpc	r14, r1
    13da:	f1 04       	cpc	r15, r1
    13dc:	01 f1       	breq	.+64     	; 0x141e <delay+0x66>
		yield();
    13de:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    13e2:	0e 94 b7 09 	call	0x136e	; 0x136e <micros>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	88 19       	sub	r24, r8
    13ec:	99 09       	sbc	r25, r9
    13ee:	aa 09       	sbc	r26, r10
    13f0:	bb 09       	sbc	r27, r11
    13f2:	88 3e       	cpi	r24, 0xE8	; 232
    13f4:	93 40       	sbci	r25, 0x03	; 3
    13f6:	a1 05       	cpc	r26, r1
    13f8:	b1 05       	cpc	r27, r1
    13fa:	60 f3       	brcs	.-40     	; 0x13d4 <delay+0x1c>
			ms--;
    13fc:	21 e0       	ldi	r18, 0x01	; 1
    13fe:	c2 1a       	sub	r12, r18
    1400:	d1 08       	sbc	r13, r1
    1402:	e1 08       	sbc	r14, r1
    1404:	f1 08       	sbc	r15, r1
			start += 1000;
    1406:	88 ee       	ldi	r24, 0xE8	; 232
    1408:	88 0e       	add	r8, r24
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	98 1e       	adc	r9, r24
    140e:	a1 1c       	adc	r10, r1
    1410:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1412:	c1 14       	cp	r12, r1
    1414:	d1 04       	cpc	r13, r1
    1416:	e1 04       	cpc	r14, r1
    1418:	f1 04       	cpc	r15, r1
    141a:	19 f7       	brne	.-58     	; 0x13e2 <delay+0x2a>
    141c:	db cf       	rjmp	.-74     	; 0x13d4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	cf 90       	pop	r12
    1426:	bf 90       	pop	r11
    1428:	af 90       	pop	r10
    142a:	9f 90       	pop	r9
    142c:	8f 90       	pop	r8
    142e:	08 95       	ret

00001430 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	91 05       	cpc	r25, r1
    1434:	38 f0       	brcs	.+14     	; 0x1444 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    143e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <delayMicroseconds+0x10>
    1444:	08 95       	ret

00001446 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1446:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1448:	84 b5       	in	r24, 0x24	; 36
    144a:	82 60       	ori	r24, 0x02	; 2
    144c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    144e:	84 b5       	in	r24, 0x24	; 36
    1450:	81 60       	ori	r24, 0x01	; 1
    1452:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1454:	85 b5       	in	r24, 0x25	; 37
    1456:	82 60       	ori	r24, 0x02	; 2
    1458:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    145a:	85 b5       	in	r24, 0x25	; 37
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1460:	ee e6       	ldi	r30, 0x6E	; 110
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    146a:	e1 e8       	ldi	r30, 0x81	; 129
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    147c:	e0 e8       	ldi	r30, 0x80	; 128
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	81 60       	ori	r24, 0x01	; 1
    1484:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1486:	e1 eb       	ldi	r30, 0xB1	; 177
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	84 60       	ori	r24, 0x04	; 4
    148e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1490:	e0 eb       	ldi	r30, 0xB0	; 176
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	81 60       	ori	r24, 0x01	; 1
    1498:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    149a:	ea e7       	ldi	r30, 0x7A	; 122
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	84 60       	ori	r24, 0x04	; 4
    14a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    14aa:	80 81       	ld	r24, Z
    14ac:	81 60       	ori	r24, 0x01	; 1
    14ae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    14b0:	80 81       	ld	r24, Z
    14b2:	80 68       	ori	r24, 0x80	; 128
    14b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    14b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    14ba:	08 95       	ret

000014bc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    14bc:	8e 30       	cpi	r24, 0x0E	; 14
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <analogRead+0x6>
    14c0:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    14c2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <analog_reference>
    14c6:	90 e4       	ldi	r25, 0x40	; 64
    14c8:	29 9f       	mul	r18, r25
    14ca:	90 01       	movw	r18, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	87 70       	andi	r24, 0x07	; 7
    14d0:	82 2b       	or	r24, r18
    14d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    14d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    14da:	80 64       	ori	r24, 0x40	; 64
    14dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    14e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    14e4:	86 fd       	sbrc	r24, 6
    14e6:	fc cf       	rjmp	.-8      	; 0x14e0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    14e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    14ec:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    14f0:	90 e0       	ldi	r25, 0x00	; 0
}
    14f2:	92 2b       	or	r25, r18
    14f4:	08 95       	ret

000014f6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	81 f0       	breq	.+32     	; 0x151a <turnOffPWM+0x24>
    14fa:	28 f4       	brcc	.+10     	; 0x1506 <turnOffPWM+0x10>
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	99 f0       	breq	.+38     	; 0x1526 <turnOffPWM+0x30>
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	a1 f0       	breq	.+40     	; 0x152c <turnOffPWM+0x36>
    1504:	08 95       	ret
    1506:	87 30       	cpi	r24, 0x07	; 7
    1508:	a9 f0       	breq	.+42     	; 0x1534 <turnOffPWM+0x3e>
    150a:	88 30       	cpi	r24, 0x08	; 8
    150c:	b9 f0       	breq	.+46     	; 0x153c <turnOffPWM+0x46>
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	d1 f4       	brne	.+52     	; 0x1546 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1512:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1516:	8f 7d       	andi	r24, 0xDF	; 223
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    151a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    151e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1520:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1524:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1526:	84 b5       	in	r24, 0x24	; 36
    1528:	8f 77       	andi	r24, 0x7F	; 127
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    152c:	84 b5       	in	r24, 0x24	; 36
    152e:	8f 7d       	andi	r24, 0xDF	; 223
    1530:	84 bd       	out	0x24, r24	; 36
    1532:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1534:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1538:	8f 77       	andi	r24, 0x7F	; 127
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    153c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1540:	8f 7d       	andi	r24, 0xDF	; 223
    1542:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1546:	08 95       	ret

00001548 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	fc 01       	movw	r30, r24
    1550:	e4 58       	subi	r30, 0x84	; 132
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1556:	fc 01       	movw	r30, r24
    1558:	e0 57       	subi	r30, 0x70	; 112
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    155e:	88 23       	and	r24, r24
    1560:	61 f1       	breq	.+88     	; 0x15ba <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	fc 01       	movw	r30, r24
    156a:	e2 55       	subi	r30, 0x52	; 82
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	c5 91       	lpm	r28, Z+
    1570:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1572:	fc 01       	movw	r30, r24
    1574:	ec 55       	subi	r30, 0x5C	; 92
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	a5 91       	lpm	r26, Z+
    157a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    157c:	61 11       	cpse	r22, r1
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1580:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1582:	f8 94       	cli
		*reg &= ~bit;
    1584:	88 81       	ld	r24, Y
    1586:	20 95       	com	r18
    1588:	82 23       	and	r24, r18
    158a:	88 83       	st	Y, r24
		*out &= ~bit;
    158c:	ec 91       	ld	r30, X
    158e:	2e 23       	and	r18, r30
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1592:	62 30       	cpi	r22, 0x02	; 2
    1594:	61 f4       	brne	.+24     	; 0x15ae <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1596:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1598:	f8 94       	cli
		*reg &= ~bit;
    159a:	88 81       	ld	r24, Y
    159c:	32 2f       	mov	r19, r18
    159e:	30 95       	com	r19
    15a0:	83 23       	and	r24, r19
    15a2:	88 83       	st	Y, r24
		*out |= bit;
    15a4:	ec 91       	ld	r30, X
    15a6:	2e 2b       	or	r18, r30
    15a8:	2c 93       	st	X, r18
		SREG = oldSREG;
    15aa:	9f bf       	out	0x3f, r25	; 63
    15ac:	06 c0       	rjmp	.+12     	; 0x15ba <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    15ae:	8f b7       	in	r24, 0x3f	; 63
                cli();
    15b0:	f8 94       	cli
		*reg |= bit;
    15b2:	e8 81       	ld	r30, Y
    15b4:	2e 2b       	or	r18, r30
    15b6:	28 83       	st	Y, r18
		SREG = oldSREG;
    15b8:	8f bf       	out	0x3f, r24	; 63
	}
}
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	f9 01       	movw	r30, r18
    15cc:	e8 59       	subi	r30, 0x98	; 152
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    15d2:	f9 01       	movw	r30, r18
    15d4:	e4 58       	subi	r30, 0x84	; 132
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    15da:	f9 01       	movw	r30, r18
    15dc:	e0 57       	subi	r30, 0x70	; 112
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    15e2:	cc 23       	and	r28, r28
    15e4:	c1 f0       	breq	.+48     	; 0x1616 <digitalWrite+0x56>
    15e6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15e8:	81 11       	cpse	r24, r1
    15ea:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <turnOffPWM>

	out = portOutputRegister(port);
    15ee:	ec 2f       	mov	r30, r28
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	ec 55       	subi	r30, 0x5C	; 92
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	a5 91       	lpm	r26, Z+
    15fc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    15fe:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1600:	f8 94       	cli

	if (val == LOW) {
    1602:	11 11       	cpse	r17, r1
    1604:	04 c0       	rjmp	.+8      	; 0x160e <digitalWrite+0x4e>
		*out &= ~bit;
    1606:	8c 91       	ld	r24, X
    1608:	d0 95       	com	r29
    160a:	d8 23       	and	r29, r24
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <digitalWrite+0x52>
	} else {
		*out |= bit;
    160e:	ec 91       	ld	r30, X
    1610:	de 2b       	or	r29, r30
    1612:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1614:	9f bf       	out	0x3f, r25	; 63
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	08 95       	ret

0000161e <_Z10randomSeedm>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    161e:	61 15       	cp	r22, r1
    1620:	71 05       	cpc	r23, r1
    1622:	81 05       	cpc	r24, r1
    1624:	91 05       	cpc	r25, r1
    1626:	11 f0       	breq	.+4      	; 0x162c <_Z10randomSeedm+0xe>
    srandom(seed);
    1628:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <srandom>
    162c:	08 95       	ret

0000162e <_Z6randoml>:
  }
}

long random(long howbig)
{
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
  if (howbig == 0) {
    1636:	61 15       	cp	r22, r1
    1638:	71 05       	cpc	r23, r1
    163a:	81 05       	cpc	r24, r1
    163c:	91 05       	cpc	r25, r1
    163e:	49 f0       	breq	.+18     	; 0x1652 <_Z6randoml+0x24>
    1640:	6b 01       	movw	r12, r22
    1642:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    1644:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <random>
    1648:	a7 01       	movw	r20, r14
    164a:	96 01       	movw	r18, r12
    164c:	0e 94 45 0c 	call	0x188a	; 0x188a <__divmodsi4>
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	08 95       	ret

00001662 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
  if (howsmall >= howbig) {
    166e:	62 17       	cp	r22, r18
    1670:	73 07       	cpc	r23, r19
    1672:	84 07       	cpc	r24, r20
    1674:	95 07       	cpc	r25, r21
    1676:	84 f4       	brge	.+32     	; 0x1698 <_Z6randomll+0x36>
    1678:	89 01       	movw	r16, r18
    167a:	9a 01       	movw	r18, r20
    167c:	6b 01       	movw	r12, r22
    167e:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1680:	c9 01       	movw	r24, r18
    1682:	b8 01       	movw	r22, r16
    1684:	6c 19       	sub	r22, r12
    1686:	7d 09       	sbc	r23, r13
    1688:	8e 09       	sbc	r24, r14
    168a:	9f 09       	sbc	r25, r15
    168c:	0e 94 17 0b 	call	0x162e	; 0x162e <_Z6randoml>
    1690:	6c 0d       	add	r22, r12
    1692:	7d 1d       	adc	r23, r13
    1694:	8e 1d       	adc	r24, r14
    1696:	9f 1d       	adc	r25, r15
}
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	df 90       	pop	r13
    16a2:	cf 90       	pop	r12
    16a4:	08 95       	ret

000016a6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    16a6:	08 95       	ret

000016a8 <__cmpsf2>:
    16a8:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fp_cmp>
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <__cmpsf2+0x8>
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	08 95       	ret

000016b2 <__fixunssfsi>:
    16b2:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fp_splitA>
    16b6:	88 f0       	brcs	.+34     	; 0x16da <__fixunssfsi+0x28>
    16b8:	9f 57       	subi	r25, 0x7F	; 127
    16ba:	98 f0       	brcs	.+38     	; 0x16e2 <__fixunssfsi+0x30>
    16bc:	b9 2f       	mov	r27, r25
    16be:	99 27       	eor	r25, r25
    16c0:	b7 51       	subi	r27, 0x17	; 23
    16c2:	b0 f0       	brcs	.+44     	; 0x16f0 <__fixunssfsi+0x3e>
    16c4:	e1 f0       	breq	.+56     	; 0x16fe <__fixunssfsi+0x4c>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	88 1f       	adc	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	1a f0       	brmi	.+6      	; 0x16d6 <__fixunssfsi+0x24>
    16d0:	ba 95       	dec	r27
    16d2:	c9 f7       	brne	.-14     	; 0x16c6 <__fixunssfsi+0x14>
    16d4:	14 c0       	rjmp	.+40     	; 0x16fe <__fixunssfsi+0x4c>
    16d6:	b1 30       	cpi	r27, 0x01	; 1
    16d8:	91 f0       	breq	.+36     	; 0x16fe <__fixunssfsi+0x4c>
    16da:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_zero>
    16de:	b1 e0       	ldi	r27, 0x01	; 1
    16e0:	08 95       	ret
    16e2:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_zero>
    16e6:	67 2f       	mov	r22, r23
    16e8:	78 2f       	mov	r23, r24
    16ea:	88 27       	eor	r24, r24
    16ec:	b8 5f       	subi	r27, 0xF8	; 248
    16ee:	39 f0       	breq	.+14     	; 0x16fe <__fixunssfsi+0x4c>
    16f0:	b9 3f       	cpi	r27, 0xF9	; 249
    16f2:	cc f3       	brlt	.-14     	; 0x16e6 <__fixunssfsi+0x34>
    16f4:	86 95       	lsr	r24
    16f6:	77 95       	ror	r23
    16f8:	67 95       	ror	r22
    16fa:	b3 95       	inc	r27
    16fc:	d9 f7       	brne	.-10     	; 0x16f4 <__fixunssfsi+0x42>
    16fe:	3e f4       	brtc	.+14     	; 0x170e <__fixunssfsi+0x5c>
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	08 95       	ret

00001710 <__fp_cmp>:
    1710:	99 0f       	add	r25, r25
    1712:	00 08       	sbc	r0, r0
    1714:	55 0f       	add	r21, r21
    1716:	aa 0b       	sbc	r26, r26
    1718:	e0 e8       	ldi	r30, 0x80	; 128
    171a:	fe ef       	ldi	r31, 0xFE	; 254
    171c:	16 16       	cp	r1, r22
    171e:	17 06       	cpc	r1, r23
    1720:	e8 07       	cpc	r30, r24
    1722:	f9 07       	cpc	r31, r25
    1724:	c0 f0       	brcs	.+48     	; 0x1756 <__fp_cmp+0x46>
    1726:	12 16       	cp	r1, r18
    1728:	13 06       	cpc	r1, r19
    172a:	e4 07       	cpc	r30, r20
    172c:	f5 07       	cpc	r31, r21
    172e:	98 f0       	brcs	.+38     	; 0x1756 <__fp_cmp+0x46>
    1730:	62 1b       	sub	r22, r18
    1732:	73 0b       	sbc	r23, r19
    1734:	84 0b       	sbc	r24, r20
    1736:	95 0b       	sbc	r25, r21
    1738:	39 f4       	brne	.+14     	; 0x1748 <__fp_cmp+0x38>
    173a:	0a 26       	eor	r0, r26
    173c:	61 f0       	breq	.+24     	; 0x1756 <__fp_cmp+0x46>
    173e:	23 2b       	or	r18, r19
    1740:	24 2b       	or	r18, r20
    1742:	25 2b       	or	r18, r21
    1744:	21 f4       	brne	.+8      	; 0x174e <__fp_cmp+0x3e>
    1746:	08 95       	ret
    1748:	0a 26       	eor	r0, r26
    174a:	09 f4       	brne	.+2      	; 0x174e <__fp_cmp+0x3e>
    174c:	a1 40       	sbci	r26, 0x01	; 1
    174e:	a6 95       	lsr	r26
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	81 1d       	adc	r24, r1
    1754:	81 1d       	adc	r24, r1
    1756:	08 95       	ret

00001758 <__gesf2>:
    1758:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fp_cmp>
    175c:	08 f4       	brcc	.+2      	; 0x1760 <__gesf2+0x8>
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	08 95       	ret

00001762 <__mulsf3>:
    1762:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__mulsf3x>
    1766:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
    176a:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
    176e:	38 f0       	brcs	.+14     	; 0x177e <__mulsf3+0x1c>
    1770:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
    1774:	20 f0       	brcs	.+8      	; 0x177e <__mulsf3+0x1c>
    1776:	95 23       	and	r25, r21
    1778:	11 f0       	breq	.+4      	; 0x177e <__mulsf3+0x1c>
    177a:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
    177e:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>
    1782:	11 24       	eor	r1, r1
    1784:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>

00001788 <__mulsf3x>:
    1788:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
    178c:	70 f3       	brcs	.-36     	; 0x176a <__mulsf3+0x8>

0000178e <__mulsf3_pse>:
    178e:	95 9f       	mul	r25, r21
    1790:	c1 f3       	breq	.-16     	; 0x1782 <__mulsf3+0x20>
    1792:	95 0f       	add	r25, r21
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	55 1f       	adc	r21, r21
    1798:	62 9f       	mul	r22, r18
    179a:	f0 01       	movw	r30, r0
    179c:	72 9f       	mul	r23, r18
    179e:	bb 27       	eor	r27, r27
    17a0:	f0 0d       	add	r31, r0
    17a2:	b1 1d       	adc	r27, r1
    17a4:	63 9f       	mul	r22, r19
    17a6:	aa 27       	eor	r26, r26
    17a8:	f0 0d       	add	r31, r0
    17aa:	b1 1d       	adc	r27, r1
    17ac:	aa 1f       	adc	r26, r26
    17ae:	64 9f       	mul	r22, r20
    17b0:	66 27       	eor	r22, r22
    17b2:	b0 0d       	add	r27, r0
    17b4:	a1 1d       	adc	r26, r1
    17b6:	66 1f       	adc	r22, r22
    17b8:	82 9f       	mul	r24, r18
    17ba:	22 27       	eor	r18, r18
    17bc:	b0 0d       	add	r27, r0
    17be:	a1 1d       	adc	r26, r1
    17c0:	62 1f       	adc	r22, r18
    17c2:	73 9f       	mul	r23, r19
    17c4:	b0 0d       	add	r27, r0
    17c6:	a1 1d       	adc	r26, r1
    17c8:	62 1f       	adc	r22, r18
    17ca:	83 9f       	mul	r24, r19
    17cc:	a0 0d       	add	r26, r0
    17ce:	61 1d       	adc	r22, r1
    17d0:	22 1f       	adc	r18, r18
    17d2:	74 9f       	mul	r23, r20
    17d4:	33 27       	eor	r19, r19
    17d6:	a0 0d       	add	r26, r0
    17d8:	61 1d       	adc	r22, r1
    17da:	23 1f       	adc	r18, r19
    17dc:	84 9f       	mul	r24, r20
    17de:	60 0d       	add	r22, r0
    17e0:	21 1d       	adc	r18, r1
    17e2:	82 2f       	mov	r24, r18
    17e4:	76 2f       	mov	r23, r22
    17e6:	6a 2f       	mov	r22, r26
    17e8:	11 24       	eor	r1, r1
    17ea:	9f 57       	subi	r25, 0x7F	; 127
    17ec:	50 40       	sbci	r21, 0x00	; 0
    17ee:	9a f0       	brmi	.+38     	; 0x1816 <__mulsf3_pse+0x88>
    17f0:	f1 f0       	breq	.+60     	; 0x182e <__mulsf3_pse+0xa0>
    17f2:	88 23       	and	r24, r24
    17f4:	4a f0       	brmi	.+18     	; 0x1808 <__mulsf3_pse+0x7a>
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	bb 1f       	adc	r27, r27
    17fc:	66 1f       	adc	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	88 1f       	adc	r24, r24
    1802:	91 50       	subi	r25, 0x01	; 1
    1804:	50 40       	sbci	r21, 0x00	; 0
    1806:	a9 f7       	brne	.-22     	; 0x17f2 <__mulsf3_pse+0x64>
    1808:	9e 3f       	cpi	r25, 0xFE	; 254
    180a:	51 05       	cpc	r21, r1
    180c:	80 f0       	brcs	.+32     	; 0x182e <__mulsf3_pse+0xa0>
    180e:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
    1812:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
    1816:	5f 3f       	cpi	r21, 0xFF	; 255
    1818:	e4 f3       	brlt	.-8      	; 0x1812 <__mulsf3_pse+0x84>
    181a:	98 3e       	cpi	r25, 0xE8	; 232
    181c:	d4 f3       	brlt	.-12     	; 0x1812 <__mulsf3_pse+0x84>
    181e:	86 95       	lsr	r24
    1820:	77 95       	ror	r23
    1822:	67 95       	ror	r22
    1824:	b7 95       	ror	r27
    1826:	f7 95       	ror	r31
    1828:	e7 95       	ror	r30
    182a:	9f 5f       	subi	r25, 0xFF	; 255
    182c:	c1 f7       	brne	.-16     	; 0x181e <__mulsf3_pse+0x90>
    182e:	fe 2b       	or	r31, r30
    1830:	88 0f       	add	r24, r24
    1832:	91 1d       	adc	r25, r1
    1834:	96 95       	lsr	r25
    1836:	87 95       	ror	r24
    1838:	97 f9       	bld	r25, 7
    183a:	08 95       	ret

0000183c <__unordsf2>:
    183c:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fp_cmp>
    1840:	88 0b       	sbc	r24, r24
    1842:	99 0b       	sbc	r25, r25
    1844:	08 95       	ret

00001846 <__udivmodsi4>:
    1846:	a1 e2       	ldi	r26, 0x21	; 33
    1848:	1a 2e       	mov	r1, r26
    184a:	aa 1b       	sub	r26, r26
    184c:	bb 1b       	sub	r27, r27
    184e:	fd 01       	movw	r30, r26
    1850:	0d c0       	rjmp	.+26     	; 0x186c <__udivmodsi4_ep>

00001852 <__udivmodsi4_loop>:
    1852:	aa 1f       	adc	r26, r26
    1854:	bb 1f       	adc	r27, r27
    1856:	ee 1f       	adc	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	a2 17       	cp	r26, r18
    185c:	b3 07       	cpc	r27, r19
    185e:	e4 07       	cpc	r30, r20
    1860:	f5 07       	cpc	r31, r21
    1862:	20 f0       	brcs	.+8      	; 0x186c <__udivmodsi4_ep>
    1864:	a2 1b       	sub	r26, r18
    1866:	b3 0b       	sbc	r27, r19
    1868:	e4 0b       	sbc	r30, r20
    186a:	f5 0b       	sbc	r31, r21

0000186c <__udivmodsi4_ep>:
    186c:	66 1f       	adc	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	88 1f       	adc	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	1a 94       	dec	r1
    1876:	69 f7       	brne	.-38     	; 0x1852 <__udivmodsi4_loop>
    1878:	60 95       	com	r22
    187a:	70 95       	com	r23
    187c:	80 95       	com	r24
    187e:	90 95       	com	r25
    1880:	9b 01       	movw	r18, r22
    1882:	ac 01       	movw	r20, r24
    1884:	bd 01       	movw	r22, r26
    1886:	cf 01       	movw	r24, r30
    1888:	08 95       	ret

0000188a <__divmodsi4>:
    188a:	05 2e       	mov	r0, r21
    188c:	97 fb       	bst	r25, 7
    188e:	1e f4       	brtc	.+6      	; 0x1896 <__divmodsi4+0xc>
    1890:	00 94       	com	r0
    1892:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__negsi2>
    1896:	57 fd       	sbrc	r21, 7
    1898:	07 d0       	rcall	.+14     	; 0x18a8 <__divmodsi4_neg2>
    189a:	0e 94 23 0c 	call	0x1846	; 0x1846 <__udivmodsi4>
    189e:	07 fc       	sbrc	r0, 7
    18a0:	03 d0       	rcall	.+6      	; 0x18a8 <__divmodsi4_neg2>
    18a2:	4e f4       	brtc	.+18     	; 0x18b6 <__divmodsi4_exit>
    18a4:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__negsi2>

000018a8 <__divmodsi4_neg2>:
    18a8:	50 95       	com	r21
    18aa:	40 95       	com	r20
    18ac:	30 95       	com	r19
    18ae:	21 95       	neg	r18
    18b0:	3f 4f       	sbci	r19, 0xFF	; 255
    18b2:	4f 4f       	sbci	r20, 0xFF	; 255
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255

000018b6 <__divmodsi4_exit>:
    18b6:	08 95       	ret

000018b8 <__negsi2>:
    18b8:	90 95       	com	r25
    18ba:	80 95       	com	r24
    18bc:	70 95       	com	r23
    18be:	61 95       	neg	r22
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	8f 4f       	sbci	r24, 0xFF	; 255
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	08 95       	ret

000018c8 <__muluhisi3>:
    18c8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__umulhisi3>
    18cc:	a5 9f       	mul	r26, r21
    18ce:	90 0d       	add	r25, r0
    18d0:	b4 9f       	mul	r27, r20
    18d2:	90 0d       	add	r25, r0
    18d4:	a4 9f       	mul	r26, r20
    18d6:	80 0d       	add	r24, r0
    18d8:	91 1d       	adc	r25, r1
    18da:	11 24       	eor	r1, r1
    18dc:	08 95       	ret

000018de <__tablejump2__>:
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	05 90       	lpm	r0, Z+
    18e4:	f4 91       	lpm	r31, Z
    18e6:	e0 2d       	mov	r30, r0
    18e8:	09 94       	ijmp

000018ea <__umulhisi3>:
    18ea:	a2 9f       	mul	r26, r18
    18ec:	b0 01       	movw	r22, r0
    18ee:	b3 9f       	mul	r27, r19
    18f0:	c0 01       	movw	r24, r0
    18f2:	a3 9f       	mul	r26, r19
    18f4:	70 0d       	add	r23, r0
    18f6:	81 1d       	adc	r24, r1
    18f8:	11 24       	eor	r1, r1
    18fa:	91 1d       	adc	r25, r1
    18fc:	b2 9f       	mul	r27, r18
    18fe:	70 0d       	add	r23, r0
    1900:	81 1d       	adc	r24, r1
    1902:	11 24       	eor	r1, r1
    1904:	91 1d       	adc	r25, r1
    1906:	08 95       	ret

00001908 <malloc>:
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	82 30       	cpi	r24, 0x02	; 2
    1912:	91 05       	cpc	r25, r1
    1914:	10 f4       	brcc	.+4      	; 0x191a <malloc+0x12>
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <__flp>
    191e:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <__flp+0x1>
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	30 97       	sbiw	r30, 0x00	; 0
    192c:	19 f1       	breq	.+70     	; 0x1974 <malloc+0x6c>
    192e:	40 81       	ld	r20, Z
    1930:	51 81       	ldd	r21, Z+1	; 0x01
    1932:	02 81       	ldd	r16, Z+2	; 0x02
    1934:	13 81       	ldd	r17, Z+3	; 0x03
    1936:	48 17       	cp	r20, r24
    1938:	59 07       	cpc	r21, r25
    193a:	c8 f0       	brcs	.+50     	; 0x196e <malloc+0x66>
    193c:	84 17       	cp	r24, r20
    193e:	95 07       	cpc	r25, r21
    1940:	69 f4       	brne	.+26     	; 0x195c <malloc+0x54>
    1942:	10 97       	sbiw	r26, 0x00	; 0
    1944:	31 f0       	breq	.+12     	; 0x1952 <malloc+0x4a>
    1946:	12 96       	adiw	r26, 0x02	; 2
    1948:	0c 93       	st	X, r16
    194a:	12 97       	sbiw	r26, 0x02	; 2
    194c:	13 96       	adiw	r26, 0x03	; 3
    194e:	1c 93       	st	X, r17
    1950:	27 c0       	rjmp	.+78     	; 0x19a0 <malloc+0x98>
    1952:	00 93 33 02 	sts	0x0233, r16	; 0x800233 <__flp>
    1956:	10 93 34 02 	sts	0x0234, r17	; 0x800234 <__flp+0x1>
    195a:	22 c0       	rjmp	.+68     	; 0x19a0 <malloc+0x98>
    195c:	21 15       	cp	r18, r1
    195e:	31 05       	cpc	r19, r1
    1960:	19 f0       	breq	.+6      	; 0x1968 <malloc+0x60>
    1962:	42 17       	cp	r20, r18
    1964:	53 07       	cpc	r21, r19
    1966:	18 f4       	brcc	.+6      	; 0x196e <malloc+0x66>
    1968:	9a 01       	movw	r18, r20
    196a:	bd 01       	movw	r22, r26
    196c:	ef 01       	movw	r28, r30
    196e:	df 01       	movw	r26, r30
    1970:	f8 01       	movw	r30, r16
    1972:	db cf       	rjmp	.-74     	; 0x192a <malloc+0x22>
    1974:	21 15       	cp	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	f9 f0       	breq	.+62     	; 0x19b8 <malloc+0xb0>
    197a:	28 1b       	sub	r18, r24
    197c:	39 0b       	sbc	r19, r25
    197e:	24 30       	cpi	r18, 0x04	; 4
    1980:	31 05       	cpc	r19, r1
    1982:	80 f4       	brcc	.+32     	; 0x19a4 <malloc+0x9c>
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	61 15       	cp	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	21 f0       	breq	.+8      	; 0x1996 <malloc+0x8e>
    198e:	fb 01       	movw	r30, r22
    1990:	93 83       	std	Z+3, r25	; 0x03
    1992:	82 83       	std	Z+2, r24	; 0x02
    1994:	04 c0       	rjmp	.+8      	; 0x199e <malloc+0x96>
    1996:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <__flp+0x1>
    199a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <__flp>
    199e:	fe 01       	movw	r30, r28
    19a0:	32 96       	adiw	r30, 0x02	; 2
    19a2:	44 c0       	rjmp	.+136    	; 0x1a2c <malloc+0x124>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	81 93       	st	Z+, r24
    19ac:	91 93       	st	Z+, r25
    19ae:	22 50       	subi	r18, 0x02	; 2
    19b0:	31 09       	sbc	r19, r1
    19b2:	39 83       	std	Y+1, r19	; 0x01
    19b4:	28 83       	st	Y, r18
    19b6:	3a c0       	rjmp	.+116    	; 0x1a2c <malloc+0x124>
    19b8:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <__brkval>
    19bc:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <__brkval+0x1>
    19c0:	23 2b       	or	r18, r19
    19c2:	41 f4       	brne	.+16     	; 0x19d4 <malloc+0xcc>
    19c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    19c8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    19cc:	30 93 32 02 	sts	0x0232, r19	; 0x800232 <__brkval+0x1>
    19d0:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <__brkval>
    19d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    19d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    19dc:	21 15       	cp	r18, r1
    19de:	31 05       	cpc	r19, r1
    19e0:	41 f4       	brne	.+16     	; 0x19f2 <malloc+0xea>
    19e2:	2d b7       	in	r18, 0x3d	; 61
    19e4:	3e b7       	in	r19, 0x3e	; 62
    19e6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    19ea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    19ee:	24 1b       	sub	r18, r20
    19f0:	35 0b       	sbc	r19, r21
    19f2:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <__brkval>
    19f6:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <__brkval+0x1>
    19fa:	e2 17       	cp	r30, r18
    19fc:	f3 07       	cpc	r31, r19
    19fe:	a0 f4       	brcc	.+40     	; 0x1a28 <malloc+0x120>
    1a00:	2e 1b       	sub	r18, r30
    1a02:	3f 0b       	sbc	r19, r31
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	78 f0       	brcs	.+30     	; 0x1a28 <malloc+0x120>
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	4e 5f       	subi	r20, 0xFE	; 254
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	24 17       	cp	r18, r20
    1a12:	35 07       	cpc	r19, r21
    1a14:	48 f0       	brcs	.+18     	; 0x1a28 <malloc+0x120>
    1a16:	4e 0f       	add	r20, r30
    1a18:	5f 1f       	adc	r21, r31
    1a1a:	50 93 32 02 	sts	0x0232, r21	; 0x800232 <__brkval+0x1>
    1a1e:	40 93 31 02 	sts	0x0231, r20	; 0x800231 <__brkval>
    1a22:	81 93       	st	Z+, r24
    1a24:	91 93       	st	Z+, r25
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <malloc+0x124>
    1a28:	e0 e0       	ldi	r30, 0x00	; 0
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	cf 01       	movw	r24, r30
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <free>:
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <free+0xa>
    1a40:	81 c0       	rjmp	.+258    	; 0x1b44 <free+0x10c>
    1a42:	fc 01       	movw	r30, r24
    1a44:	32 97       	sbiw	r30, 0x02	; 2
    1a46:	13 82       	std	Z+3, r1	; 0x03
    1a48:	12 82       	std	Z+2, r1	; 0x02
    1a4a:	a0 91 33 02 	lds	r26, 0x0233	; 0x800233 <__flp>
    1a4e:	b0 91 34 02 	lds	r27, 0x0234	; 0x800234 <__flp+0x1>
    1a52:	10 97       	sbiw	r26, 0x00	; 0
    1a54:	81 f4       	brne	.+32     	; 0x1a76 <free+0x3e>
    1a56:	20 81       	ld	r18, Z
    1a58:	31 81       	ldd	r19, Z+1	; 0x01
    1a5a:	82 0f       	add	r24, r18
    1a5c:	93 1f       	adc	r25, r19
    1a5e:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <__brkval>
    1a62:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <__brkval+0x1>
    1a66:	28 17       	cp	r18, r24
    1a68:	39 07       	cpc	r19, r25
    1a6a:	51 f5       	brne	.+84     	; 0x1ac0 <free+0x88>
    1a6c:	f0 93 32 02 	sts	0x0232, r31	; 0x800232 <__brkval+0x1>
    1a70:	e0 93 31 02 	sts	0x0231, r30	; 0x800231 <__brkval>
    1a74:	67 c0       	rjmp	.+206    	; 0x1b44 <free+0x10c>
    1a76:	ed 01       	movw	r28, r26
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	ce 17       	cp	r28, r30
    1a7e:	df 07       	cpc	r29, r31
    1a80:	40 f4       	brcc	.+16     	; 0x1a92 <free+0x5a>
    1a82:	4a 81       	ldd	r20, Y+2	; 0x02
    1a84:	5b 81       	ldd	r21, Y+3	; 0x03
    1a86:	9e 01       	movw	r18, r28
    1a88:	41 15       	cp	r20, r1
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	f1 f0       	breq	.+60     	; 0x1aca <free+0x92>
    1a8e:	ea 01       	movw	r28, r20
    1a90:	f5 cf       	rjmp	.-22     	; 0x1a7c <free+0x44>
    1a92:	d3 83       	std	Z+3, r29	; 0x03
    1a94:	c2 83       	std	Z+2, r28	; 0x02
    1a96:	40 81       	ld	r20, Z
    1a98:	51 81       	ldd	r21, Z+1	; 0x01
    1a9a:	84 0f       	add	r24, r20
    1a9c:	95 1f       	adc	r25, r21
    1a9e:	c8 17       	cp	r28, r24
    1aa0:	d9 07       	cpc	r29, r25
    1aa2:	59 f4       	brne	.+22     	; 0x1aba <free+0x82>
    1aa4:	88 81       	ld	r24, Y
    1aa6:	99 81       	ldd	r25, Y+1	; 0x01
    1aa8:	84 0f       	add	r24, r20
    1aaa:	95 1f       	adc	r25, r21
    1aac:	02 96       	adiw	r24, 0x02	; 2
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab6:	93 83       	std	Z+3, r25	; 0x03
    1ab8:	82 83       	std	Z+2, r24	; 0x02
    1aba:	21 15       	cp	r18, r1
    1abc:	31 05       	cpc	r19, r1
    1abe:	29 f4       	brne	.+10     	; 0x1aca <free+0x92>
    1ac0:	f0 93 34 02 	sts	0x0234, r31	; 0x800234 <__flp+0x1>
    1ac4:	e0 93 33 02 	sts	0x0233, r30	; 0x800233 <__flp>
    1ac8:	3d c0       	rjmp	.+122    	; 0x1b44 <free+0x10c>
    1aca:	e9 01       	movw	r28, r18
    1acc:	fb 83       	std	Y+3, r31	; 0x03
    1ace:	ea 83       	std	Y+2, r30	; 0x02
    1ad0:	49 91       	ld	r20, Y+
    1ad2:	59 91       	ld	r21, Y+
    1ad4:	c4 0f       	add	r28, r20
    1ad6:	d5 1f       	adc	r29, r21
    1ad8:	ec 17       	cp	r30, r28
    1ada:	fd 07       	cpc	r31, r29
    1adc:	61 f4       	brne	.+24     	; 0x1af6 <free+0xbe>
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	84 0f       	add	r24, r20
    1ae4:	95 1f       	adc	r25, r21
    1ae6:	02 96       	adiw	r24, 0x02	; 2
    1ae8:	e9 01       	movw	r28, r18
    1aea:	99 83       	std	Y+1, r25	; 0x01
    1aec:	88 83       	st	Y, r24
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	9b 83       	std	Y+3, r25	; 0x03
    1af4:	8a 83       	std	Y+2, r24	; 0x02
    1af6:	e0 e0       	ldi	r30, 0x00	; 0
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	12 96       	adiw	r26, 0x02	; 2
    1afc:	8d 91       	ld	r24, X+
    1afe:	9c 91       	ld	r25, X
    1b00:	13 97       	sbiw	r26, 0x03	; 3
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <free+0xd4>
    1b06:	fd 01       	movw	r30, r26
    1b08:	dc 01       	movw	r26, r24
    1b0a:	f7 cf       	rjmp	.-18     	; 0x1afa <free+0xc2>
    1b0c:	8d 91       	ld	r24, X+
    1b0e:	9c 91       	ld	r25, X
    1b10:	11 97       	sbiw	r26, 0x01	; 1
    1b12:	9d 01       	movw	r18, r26
    1b14:	2e 5f       	subi	r18, 0xFE	; 254
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	82 0f       	add	r24, r18
    1b1a:	93 1f       	adc	r25, r19
    1b1c:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <__brkval>
    1b20:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <__brkval+0x1>
    1b24:	28 17       	cp	r18, r24
    1b26:	39 07       	cpc	r19, r25
    1b28:	69 f4       	brne	.+26     	; 0x1b44 <free+0x10c>
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	29 f4       	brne	.+10     	; 0x1b38 <free+0x100>
    1b2e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__flp+0x1>
    1b32:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <__flp>
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <free+0x104>
    1b38:	13 82       	std	Z+3, r1	; 0x03
    1b3a:	12 82       	std	Z+2, r1	; 0x02
    1b3c:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <__brkval+0x1>
    1b40:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <__brkval>
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <random_r>:
    1b4a:	8f 92       	push	r8
    1b4c:	9f 92       	push	r9
    1b4e:	af 92       	push	r10
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	ec 01       	movw	r28, r24
    1b60:	68 81       	ld	r22, Y
    1b62:	79 81       	ldd	r23, Y+1	; 0x01
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	9b 81       	ldd	r25, Y+3	; 0x03
    1b68:	61 15       	cp	r22, r1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	81 05       	cpc	r24, r1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	21 f4       	brne	.+8      	; 0x1b7a <random_r+0x30>
    1b72:	64 e2       	ldi	r22, 0x24	; 36
    1b74:	79 ed       	ldi	r23, 0xD9	; 217
    1b76:	8b e5       	ldi	r24, 0x5B	; 91
    1b78:	97 e0       	ldi	r25, 0x07	; 7
    1b7a:	2d e1       	ldi	r18, 0x1D	; 29
    1b7c:	33 ef       	ldi	r19, 0xF3	; 243
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	0e 94 45 0c 	call	0x188a	; 0x188a <__divmodsi4>
    1b86:	49 01       	movw	r8, r18
    1b88:	5a 01       	movw	r10, r20
    1b8a:	9b 01       	movw	r18, r22
    1b8c:	ac 01       	movw	r20, r24
    1b8e:	a7 ea       	ldi	r26, 0xA7	; 167
    1b90:	b1 e4       	ldi	r27, 0x41	; 65
    1b92:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__muluhisi3>
    1b96:	6b 01       	movw	r12, r22
    1b98:	7c 01       	movw	r14, r24
    1b9a:	ac ee       	ldi	r26, 0xEC	; 236
    1b9c:	b4 ef       	ldi	r27, 0xF4	; 244
    1b9e:	a5 01       	movw	r20, r10
    1ba0:	94 01       	movw	r18, r8
    1ba2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__mulohisi3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8c 0d       	add	r24, r12
    1bac:	9d 1d       	adc	r25, r13
    1bae:	ae 1d       	adc	r26, r14
    1bb0:	bf 1d       	adc	r27, r15
    1bb2:	b7 ff       	sbrs	r27, 7
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <random_r+0x72>
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	a1 09       	sbc	r26, r1
    1bba:	b0 48       	sbci	r27, 0x80	; 128
    1bbc:	88 83       	st	Y, r24
    1bbe:	99 83       	std	Y+1, r25	; 0x01
    1bc0:	aa 83       	std	Y+2, r26	; 0x02
    1bc2:	bb 83       	std	Y+3, r27	; 0x03
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	9f 77       	andi	r25, 0x7F	; 127
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	9f 90       	pop	r9
    1bdc:	8f 90       	pop	r8
    1bde:	08 95       	ret

00001be0 <random>:
    1be0:	8f 92       	push	r8
    1be2:	9f 92       	push	r9
    1be4:	af 92       	push	r10
    1be6:	bf 92       	push	r11
    1be8:	cf 92       	push	r12
    1bea:	df 92       	push	r13
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    1bf4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    1bf8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    1bfc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    1c00:	61 15       	cp	r22, r1
    1c02:	71 05       	cpc	r23, r1
    1c04:	81 05       	cpc	r24, r1
    1c06:	91 05       	cpc	r25, r1
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <random+0x32>
    1c0a:	64 e2       	ldi	r22, 0x24	; 36
    1c0c:	79 ed       	ldi	r23, 0xD9	; 217
    1c0e:	8b e5       	ldi	r24, 0x5B	; 91
    1c10:	97 e0       	ldi	r25, 0x07	; 7
    1c12:	2d e1       	ldi	r18, 0x1D	; 29
    1c14:	33 ef       	ldi	r19, 0xF3	; 243
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	0e 94 45 0c 	call	0x188a	; 0x188a <__divmodsi4>
    1c1e:	49 01       	movw	r8, r18
    1c20:	5a 01       	movw	r10, r20
    1c22:	9b 01       	movw	r18, r22
    1c24:	ac 01       	movw	r20, r24
    1c26:	a7 ea       	ldi	r26, 0xA7	; 167
    1c28:	b1 e4       	ldi	r27, 0x41	; 65
    1c2a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__muluhisi3>
    1c2e:	6b 01       	movw	r12, r22
    1c30:	7c 01       	movw	r14, r24
    1c32:	ac ee       	ldi	r26, 0xEC	; 236
    1c34:	b4 ef       	ldi	r27, 0xF4	; 244
    1c36:	a5 01       	movw	r20, r10
    1c38:	94 01       	movw	r18, r8
    1c3a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__mulohisi3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8c 0d       	add	r24, r12
    1c44:	9d 1d       	adc	r25, r13
    1c46:	ae 1d       	adc	r26, r14
    1c48:	bf 1d       	adc	r27, r15
    1c4a:	b7 ff       	sbrs	r27, 7
    1c4c:	03 c0       	rjmp	.+6      	; 0x1c54 <random+0x74>
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	a1 09       	sbc	r26, r1
    1c52:	b0 48       	sbci	r27, 0x80	; 128
    1c54:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1c58:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1c5c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1c60:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	9f 77       	andi	r25, 0x7F	; 127
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	df 90       	pop	r13
    1c70:	cf 90       	pop	r12
    1c72:	bf 90       	pop	r11
    1c74:	af 90       	pop	r10
    1c76:	9f 90       	pop	r9
    1c78:	8f 90       	pop	r8
    1c7a:	08 95       	ret

00001c7c <srandom>:
    1c7c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    1c80:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    1c84:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    1c88:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    1c8c:	08 95       	ret

00001c8e <__mulshisi3>:
    1c8e:	b7 ff       	sbrs	r27, 7
    1c90:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__muluhisi3>

00001c94 <__mulohisi3>:
    1c94:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__muluhisi3>
    1c98:	82 1b       	sub	r24, r18
    1c9a:	93 0b       	sbc	r25, r19
    1c9c:	08 95       	ret

00001c9e <_exit>:
    1c9e:	f8 94       	cli

00001ca0 <__stop_program>:
    1ca0:	ff cf       	rjmp	.-2      	; 0x1ca0 <__stop_program>
