
sketch_aug01a_tarefa_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00001afc  00001b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080014c  0080014c  00001bdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d20  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ab  00000000  00000000  00008d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002059  00000000  00000000  0000a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b7c  00000000  00000000  0000c630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000217e  00000000  00000000  0000d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048d4  00000000  00000000  0000f32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00013bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_13>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	c8 02       	muls	r28, r24

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ec ef       	ldi	r30, 0xFC	; 252
      ce:	fa e1       	ldi	r31, 0x1A	; 26
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 34       	cpi	r26, 0x4C	; 76
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	21 e0       	ldi	r18, 0x01	; 1
      de:	ac e4       	ldi	r26, 0x4C	; 76
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a2 39       	cpi	r26, 0x92	; 146
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 3a 06 	call	0xc74	; 0xc74 <main>
     106:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_Z7Valoresv>:
// Função para Fazer a soma

float fun_soma(float val){
	somaTotal = val + somaTotal;
	return somaTotal;
}
     10e:	4f 92       	push	r4
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	af 92       	push	r10
     118:	bf 92       	push	r11
     11a:	cf 92       	push	r12
     11c:	df 92       	push	r13
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sensorPin>
     12e:	0e 94 0a 09 	call	0x1214	; 0x1214 <analogRead>
     132:	2c 01       	movw	r4, r24
     134:	99 0f       	add	r25, r25
     136:	66 08       	sbc	r6, r6
     138:	77 08       	sbc	r7, r7
     13a:	c3 01       	movw	r24, r6
     13c:	b2 01       	movw	r22, r4
     13e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatsisf>
     142:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <val>
     146:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <val+0x1>
     14a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <val+0x2>
     14e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <val+0x3>
     152:	1f 92       	push	r1
     154:	1f 92       	push	r1
     156:	1f 92       	push	r1
     158:	8d e7       	ldi	r24, 0x7D	; 125
     15a:	8f 93       	push	r24
     15c:	fe ec       	ldi	r31, 0xCE	; 206
     15e:	af 2e       	mov	r10, r31
     160:	bb 24       	eor	r11, r11
     162:	ba 94       	dec	r11
     164:	cb 2c       	mov	r12, r11
     166:	db 2c       	mov	r13, r11
     168:	ee 24       	eor	r14, r14
     16a:	ea 94       	dec	r14
     16c:	13 e0       	ldi	r17, 0x03	; 3
     16e:	f1 2e       	mov	r15, r17
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	a9 01       	movw	r20, r18
     17a:	c3 01       	movw	r24, r6
     17c:	b2 01       	movw	r22, r4
     17e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_Z3maplllll>
     182:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatsisf>
     186:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <__data_end>
     18a:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <__data_end+0x1>
     18e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end+0x2>
     192:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <__data_end+0x3>
     196:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <val>
     19a:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <val+0x1>
     19e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <val+0x2>
     1a2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <val+0x3>
     1a6:	0e 94 75 05 	call	0xaea	; 0xaea <__fixsfsi>
     1aa:	1f 92       	push	r1
     1ac:	1f 92       	push	r1
     1ae:	1f 92       	push	r1
     1b0:	2f ef       	ldi	r18, 0xFF	; 255
     1b2:	2f 93       	push	r18
     1b4:	a1 2c       	mov	r10, r1
     1b6:	b1 2c       	mov	r11, r1
     1b8:	65 01       	movw	r12, r10
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	a9 01       	movw	r20, r18
     1c0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_Z3maplllll>
     1c4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatsisf>
     1c8:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <valor>
     1cc:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <valor+0x1>
     1d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <valor+0x2>
     1d4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <valor+0x3>
     1d8:	0e 94 75 05 	call	0xaea	; 0xaea <__fixsfsi>
     1dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ledPin>
     1e0:	0e 94 27 09 	call	0x124e	; 0x124e <analogWrite>
     1e4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <cont>
     1e8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <cont+0x1>
     1ec:	09 2e       	mov	r0, r25
     1ee:	00 0c       	add	r0, r0
     1f0:	aa 0b       	sbc	r26, r26
     1f2:	bb 0b       	sbc	r27, r27
     1f4:	2d b7       	in	r18, 0x3d	; 61
     1f6:	3e b7       	in	r19, 0x3e	; 62
     1f8:	28 5f       	subi	r18, 0xF8	; 248
     1fa:	3f 4f       	sbci	r19, 0xFF	; 255
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	3e bf       	out	0x3e, r19	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	2d bf       	out	0x3d, r18	; 61
     206:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <randomNumber>
     20a:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <randomNumber+0x1>
     20e:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <randomNumber+0x2>
     212:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <randomNumber+0x3>
     216:	84 17       	cp	r24, r20
     218:	95 07       	cpc	r25, r21
     21a:	a6 07       	cpc	r26, r22
     21c:	b7 07       	cpc	r27, r23
     21e:	6c f0       	brlt	.+26     	; 0x23a <_Z7Valoresv+0x12c>
     220:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <cont+0x1>
     224:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <cont>
     228:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <qtdSobrescrito>
     22c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <qtdSobrescrito+0x1>
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <qtdSobrescrito+0x1>
     236:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <qtdSobrescrito>
     23a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <cont>
     23e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <cont+0x1>
     242:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <val>
     246:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <val+0x1>
     24a:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <val+0x2>
     24e:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <val+0x3>
     252:	9c 01       	movw	r18, r24
     254:	22 0f       	add	r18, r18
     256:	33 1f       	adc	r19, r19
     258:	22 0f       	add	r18, r18
     25a:	33 1f       	adc	r19, r19
     25c:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <vet>
     260:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <vet+0x1>
     264:	e2 0f       	add	r30, r18
     266:	f3 1f       	adc	r31, r19
     268:	40 83       	st	Z, r20
     26a:	51 83       	std	Z+1, r21	; 0x01
     26c:	62 83       	std	Z+2, r22	; 0x02
     26e:	73 83       	std	Z+3, r23	; 0x03
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <cont+0x1>
     276:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <cont>
     27a:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <qtdTotal>
     27e:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <qtdTotal+0x1>
     282:	eb 01       	movw	r28, r22
     284:	21 96       	adiw	r28, 0x01	; 1
     286:	d0 93 63 01 	sts	0x0163, r29	; 0x800163 <qtdTotal+0x1>
     28a:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <qtdTotal>
     28e:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <somaTotal>
     292:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <somaTotal+0x1>
     296:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <somaTotal+0x2>
     29a:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <somaTotal+0x3>
     29e:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <__data_end>
     2a2:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <__data_end+0x1>
     2a6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end+0x2>
     2aa:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <__data_end+0x3>
     2ae:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     2b2:	2b 01       	movw	r4, r22
     2b4:	3c 01       	movw	r6, r24
     2b6:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <somaTotal>
     2ba:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <somaTotal+0x1>
     2be:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <somaTotal+0x2>
     2c2:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <somaTotal+0x3>
     2c6:	be 01       	movw	r22, r28
     2c8:	dd 0f       	add	r29, r29
     2ca:	88 0b       	sbc	r24, r24
     2cc:	99 0b       	sbc	r25, r25
     2ce:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatsisf>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	c3 01       	movw	r24, r6
     2d8:	b2 01       	movw	r22, r4
     2da:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
     2de:	6b 01       	movw	r12, r22
     2e0:	7c 01       	movw	r14, r24
     2e2:	88 e6       	ldi	r24, 0x68	; 104
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 82 03 	call	0x704	; 0x704 <_ZN13LiquidCrystal5clearEv>
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	88 e6       	ldi	r24, 0x68	; 104
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
     2f6:	6f e0       	ldi	r22, 0x0F	; 15
     2f8:	71 e0       	ldi	r23, 0x01	; 1
     2fa:	88 e6       	ldi	r24, 0x68	; 104
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5Print5printEPKc>
     302:	41 e0       	ldi	r20, 0x01	; 1
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	88 e6       	ldi	r24, 0x68	; 104
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
     30e:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <qtdTotal>
     312:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <qtdTotal+0x1>
     316:	4a e0       	ldi	r20, 0x0A	; 10
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	88 e6       	ldi	r24, 0x68	; 104
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 35 07 	call	0xe6a	; 0xe6a <_ZN5Print5printEii>
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	66 e0       	ldi	r22, 0x06	; 6
     326:	88 e6       	ldi	r24, 0x68	; 104
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
     32e:	65 e1       	ldi	r22, 0x15	; 21
     330:	71 e0       	ldi	r23, 0x01	; 1
     332:	88 e6       	ldi	r24, 0x68	; 104
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5Print5printEPKc>
     33a:	41 e0       	ldi	r20, 0x01	; 1
     33c:	65 e0       	ldi	r22, 0x05	; 5
     33e:	88 e6       	ldi	r24, 0x68	; 104
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
     346:	22 e0       	ldi	r18, 0x02	; 2
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	b3 01       	movw	r22, r6
     34c:	a2 01       	movw	r20, r4
     34e:	88 e6       	ldi	r24, 0x68	; 104
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 17 08 	call	0x102e	; 0x102e <_ZN5Print5printEdi>
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	6c e0       	ldi	r22, 0x0C	; 12
     35a:	88 e6       	ldi	r24, 0x68	; 104
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
     362:	6a e1       	ldi	r22, 0x1A	; 26
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	88 e6       	ldi	r24, 0x68	; 104
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5Print5printEPKc>
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	6d e0       	ldi	r22, 0x0D	; 13
     372:	88 e6       	ldi	r24, 0x68	; 104
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
     37a:	22 e0       	ldi	r18, 0x02	; 2
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	b7 01       	movw	r22, r14
     380:	a6 01       	movw	r20, r12
     382:	88 e6       	ldi	r24, 0x68	; 104
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 17 08 	call	0x102e	; 0x102e <_ZN5Print5printEdi>
     38a:	88 e6       	ldi	r24, 0x68	; 104
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN13LiquidCrystal7displayEv>
     392:	80 e1       	ldi	r24, 0x10	; 16
     394:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     398:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     39c:	85 e0       	ldi	r24, 0x05	; 5
     39e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <_ZN8TimerOne15clockSelectBitsE>
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	9f ef       	ldi	r25, 0xFF	; 255
     3a6:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <_ZN8TimerOne9pwmPeriodE+0x1>
     3aa:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <_ZN8TimerOne9pwmPeriodE>
     3ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     3b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     3b6:	85 e1       	ldi	r24, 0x15	; 21
     3b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	af 90       	pop	r10
     3d0:	7f 90       	pop	r7
     3d2:	6f 90       	pop	r6
     3d4:	5f 90       	pop	r5
     3d6:	4f 90       	pop	r4
     3d8:	08 95       	ret

000003da <setup>:
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sensorPin>
     3e8:	0e 94 af 09 	call	0x135e	; 0x135e <pinMode>
     3ec:	8e e0       	ldi	r24, 0x0E	; 14
     3ee:	0e 94 0a 09 	call	0x1214	; 0x1214 <analogRead>
     3f2:	bc 01       	movw	r22, r24
     3f4:	99 0f       	add	r25, r25
     3f6:	88 0b       	sbc	r24, r24
     3f8:	99 0b       	sbc	r25, r25
     3fa:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_Z10randomSeedm>
     3fe:	23 e3       	ldi	r18, 0x33	; 51
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	6e e1       	ldi	r22, 0x1E	; 30
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_Z6randomll>
     412:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <randomNumber>
     416:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <randomNumber+0x1>
     41a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <randomNumber+0x2>
     41e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <randomNumber+0x3>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	42 e0       	ldi	r20, 0x02	; 2
     426:	60 e1       	ldi	r22, 0x10	; 16
     428:	88 e6       	ldi	r24, 0x68	; 104
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN13LiquidCrystal5beginEhhh>
     430:	c0 90 54 01 	lds	r12, 0x0154	; 0x800154 <randomNumber>
     434:	d0 90 55 01 	lds	r13, 0x0155	; 0x800155 <randomNumber+0x1>
     438:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <randomNumber+0x2>
     43c:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <randomNumber+0x3>
     440:	c6 01       	movw	r24, r12
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <malloc>
     44e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <vet>
     452:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <vet+0x1>
     456:	fc 01       	movw	r30, r24
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	dc 01       	movw	r26, r24
     45e:	8c 15       	cp	r24, r12
     460:	9d 05       	cpc	r25, r13
     462:	ae 05       	cpc	r26, r14
     464:	bf 05       	cpc	r27, r15
     466:	44 f4       	brge	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     468:	11 92       	st	Z+, r1
     46a:	11 92       	st	Z+, r1
     46c:	11 92       	st	Z+, r1
     46e:	11 92       	st	Z+, r1
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	a1 1d       	adc	r26, r1
     474:	b1 1d       	adc	r27, r1
     476:	f3 cf       	rjmp	.-26     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     478:	85 e0       	ldi	r24, 0x05	; 5
     47a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <_ZN8TimerOne15clockSelectBitsE>
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	9f ef       	ldi	r25, 0xFF	; 255
     482:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <_ZN8TimerOne9pwmPeriodE+0x1>
     486:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <_ZN8TimerOne9pwmPeriodE>
     48a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     48e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     492:	85 e1       	ldi	r24, 0x15	; 21
     494:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     498:	87 e8       	ldi	r24, 0x87	; 135
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_ZN8TimerOne11isrCallbackE+0x1>
     4a0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_ZN8TimerOne11isrCallbackE>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	08 95       	ret

000004b4 <loop>:
void loop(){
	lcd.clear();
     4b4:	88 e6       	ldi	r24, 0x68	; 104
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 82 03 	call	0x704	; 0x704 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0,0);
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	88 e6       	ldi	r24, 0x68	; 104
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("TEMP");      // Temperatura dos valores lidos
     4c8:	60 e2       	ldi	r22, 0x20	; 32
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	88 e6       	ldi	r24, 0x68	; 104
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     4d4:	41 e0       	ldi	r20, 0x01	; 1
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	88 e6       	ldi	r24, 0x68	; 104
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(temperatura);
     4e0:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <__data_end>
     4e4:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <__data_end+0x1>
     4e8:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <__data_end+0x2>
     4ec:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <__data_end+0x3>
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	88 e6       	ldi	r24, 0x68	; 104
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 17 08 	call	0x102e	; 0x102e <_ZN5Print5printEdi>
	lcd.setCursor(5,0);
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	65 e0       	ldi	r22, 0x05	; 5
     500:	88 e6       	ldi	r24, 0x68	; 104
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Q_SOB");
     508:	65 e2       	ldi	r22, 0x25	; 37
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	88 e6       	ldi	r24, 0x68	; 104
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5Print5printEPKc>
	lcd.setCursor(7,1);
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	67 e0       	ldi	r22, 0x07	; 7
     518:	88 e6       	ldi	r24, 0x68	; 104
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(qtdSobrescrito);
     520:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <qtdSobrescrito>
     524:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <qtdSobrescrito+0x1>
     528:	4a e0       	ldi	r20, 0x0A	; 10
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	88 e6       	ldi	r24, 0x68	; 104
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 35 07 	call	0xe6a	; 0xe6a <_ZN5Print5printEii>
	lcd.display();
     534:	88 e6       	ldi	r24, 0x68	; 104
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN13LiquidCrystal7displayEv>
	lcd.setCursor(11,0);
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	6b e0       	ldi	r22, 0x0B	; 11
     540:	88 e6       	ldi	r24, 0x68	; 104
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("T_VET");      // Tamanho do vetor
     548:	6b e2       	ldi	r22, 0x2B	; 43
     54a:	71 e0       	ldi	r23, 0x01	; 1
     54c:	88 e6       	ldi	r24, 0x68	; 104
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5Print5printEPKc>
	lcd.setCursor(12,1);
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	6c e0       	ldi	r22, 0x0C	; 12
     558:	88 e6       	ldi	r24, 0x68	; 104
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 89 03 	call	0x712	; 0x712 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(randomNumber);
     560:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <randomNumber>
     564:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <randomNumber+0x1>
     568:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <randomNumber+0x2>
     56c:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <randomNumber+0x3>
     570:	2a e0       	ldi	r18, 0x0A	; 10
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	88 e6       	ldi	r24, 0x68	; 104
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print5printEli>
	lcd.display();
     57c:	88 e6       	ldi	r24, 0x68	; 104
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN13LiquidCrystal7displayEv>
	delay(15000);
     584:	68 e9       	ldi	r22, 0x98	; 152
     586:	7a e3       	ldi	r23, 0x3A	; 58
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0c 94 88 08 	jmp	0x1110	; 0x1110 <delay>

00000590 <_GLOBAL__sub_I_lcd>:
     590:	cf 92       	push	r12
     592:	ef 92       	push	r14
     594:	0f 93       	push	r16
#include <TimerOne.h>
void Valores();
float fun_media(float soma, int qtdTotal);
float fun_soma(float val);

LiquidCrystal lcd(7, 6, 5, 4, 3, 2);
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	c8 2e       	mov	r12, r24
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	e9 2e       	mov	r14, r25
     59e:	04 e0       	ldi	r16, 0x04	; 4
     5a0:	25 e0       	ldi	r18, 0x05	; 5
     5a2:	46 e0       	ldi	r20, 0x06	; 6
     5a4:	67 e0       	ldi	r22, 0x07	; 7
     5a6:	88 e6       	ldi	r24, 0x68	; 104
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 49 04 	call	0x892	; 0x892 <_ZN13LiquidCrystalC1Ehhhhhh>
	lcd.print("T_VET");      // Tamanho do vetor
	lcd.setCursor(12,1);
	lcd.print(randomNumber);
	lcd.display();
	delay(15000);
     5ae:	0f 91       	pop	r16
     5b0:	ef 90       	pop	r14
     5b2:	cf 90       	pop	r12
     5b4:	08 95       	ret

000005b6 <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	08 95       	ret

000005bc <_ZN5Print5flushEv>:
     5bc:	08 95       	ret

000005be <_ZN13LiquidCrystal11pulseEnableEv>:
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	8e 81       	ldd	r24, Y+6	; 0x06
     5c8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8e 81       	ldd	r24, Y+6	; 0x06
     5d8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	8e 81       	ldd	r24, Y+6	; 0x06
     5e8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     5ec:	84 e6       	ldi	r24, 0x64	; 100
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <delayMicroseconds>

000005f8 <_ZN13LiquidCrystal10write4bitsEh>:
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	6c 01       	movw	r12, r24
     60a:	7c 01       	movw	r14, r24
     60c:	87 e0       	ldi	r24, 0x07	; 7
     60e:	e8 0e       	add	r14, r24
     610:	f1 1c       	adc	r15, r1
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	d0 e0       	ldi	r29, 0x00	; 0
     616:	06 2f       	mov	r16, r22
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	b8 01       	movw	r22, r16
     61c:	0c 2e       	mov	r0, r28
     61e:	02 c0       	rjmp	.+4      	; 0x624 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     620:	75 95       	asr	r23
     622:	67 95       	ror	r22
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     628:	61 70       	andi	r22, 0x01	; 1
     62a:	f7 01       	movw	r30, r14
     62c:	81 91       	ld	r24, Z+
     62e:	7f 01       	movw	r14, r30
     630:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     634:	21 96       	adiw	r28, 0x01	; 1
     636:	c4 30       	cpi	r28, 0x04	; 4
     638:	d1 05       	cpc	r29, r1
     63a:	79 f7       	brne	.-34     	; 0x61a <_ZN13LiquidCrystal10write4bitsEh+0x22>
     63c:	c6 01       	movw	r24, r12
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	0c 94 df 02 	jmp	0x5be	; 0x5be <_ZN13LiquidCrystal11pulseEnableEv>

00000652 <_ZN13LiquidCrystal10write8bitsEh>:
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	6c 01       	movw	r12, r24
     664:	7c 01       	movw	r14, r24
     666:	87 e0       	ldi	r24, 0x07	; 7
     668:	e8 0e       	add	r14, r24
     66a:	f1 1c       	adc	r15, r1
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	06 2f       	mov	r16, r22
     672:	10 e0       	ldi	r17, 0x00	; 0
     674:	b8 01       	movw	r22, r16
     676:	0c 2e       	mov	r0, r28
     678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     67a:	75 95       	asr	r23
     67c:	67 95       	ror	r22
     67e:	0a 94       	dec	r0
     680:	e2 f7       	brpl	.-8      	; 0x67a <_ZN13LiquidCrystal10write8bitsEh+0x28>
     682:	61 70       	andi	r22, 0x01	; 1
     684:	f7 01       	movw	r30, r14
     686:	81 91       	ld	r24, Z+
     688:	7f 01       	movw	r14, r30
     68a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     68e:	21 96       	adiw	r28, 0x01	; 1
     690:	c8 30       	cpi	r28, 0x08	; 8
     692:	d1 05       	cpc	r29, r1
     694:	79 f7       	brne	.-34     	; 0x674 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     696:	c6 01       	movw	r24, r12
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	0c 94 df 02 	jmp	0x5be	; 0x5be <_ZN13LiquidCrystal11pulseEnableEv>

000006ac <_ZN13LiquidCrystal4sendEhh>:
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	16 2f       	mov	r17, r22
     6b6:	64 2f       	mov	r22, r20
     6b8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ba:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     6be:	8d 81       	ldd	r24, Y+5	; 0x05
     6c0:	8f 3f       	cpi	r24, 0xFF	; 255
     6c2:	19 f0       	breq	.+6      	; 0x6ca <_ZN13LiquidCrystal4sendEhh+0x1e>
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     6ca:	8f 85       	ldd	r24, Y+15	; 0x0f
     6cc:	61 2f       	mov	r22, r17
     6ce:	84 ff       	sbrs	r24, 4
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <_ZN13LiquidCrystal4sendEhh+0x32>
     6d2:	ce 01       	movw	r24, r28
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0c 94 29 03 	jmp	0x652	; 0x652 <_ZN13LiquidCrystal10write8bitsEh>
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	75 95       	asr	r23
     6e4:	67 95       	ror	r22
     6e6:	8a 95       	dec	r24
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <_ZN13LiquidCrystal4sendEhh+0x36>
     6ea:	ce 01       	movw	r24, r28
     6ec:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN13LiquidCrystal10write4bitsEh>
     6f0:	61 2f       	mov	r22, r17
     6f2:	ce 01       	movw	r24, r28
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_ZN13LiquidCrystal10write4bitsEh>

000006fe <_ZN13LiquidCrystal7commandEh>:
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_ZN13LiquidCrystal4sendEhh>

00000704 <_ZN13LiquidCrystal5clearEv>:
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>
     70a:	80 ed       	ldi	r24, 0xD0	; 208
     70c:	97 e0       	ldi	r25, 0x07	; 7
     70e:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <delayMicroseconds>

00000712 <_ZN13LiquidCrystal9setCursorEhh>:
     712:	fc 01       	movw	r30, r24
     714:	44 30       	cpi	r20, 0x04	; 4
     716:	08 f0       	brcs	.+2      	; 0x71a <_ZN13LiquidCrystal9setCursorEhh+0x8>
     718:	43 e0       	ldi	r20, 0x03	; 3
     71a:	83 89       	ldd	r24, Z+19	; 0x13
     71c:	48 17       	cp	r20, r24
     71e:	10 f0       	brcs	.+4      	; 0x724 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	48 0f       	add	r20, r24
     724:	df 01       	movw	r26, r30
     726:	a4 0f       	add	r26, r20
     728:	b1 1d       	adc	r27, r1
     72a:	54 96       	adiw	r26, 0x14	; 20
     72c:	9c 91       	ld	r25, X
     72e:	69 0f       	add	r22, r25
     730:	60 68       	ori	r22, 0x80	; 128
     732:	cf 01       	movw	r24, r30
     734:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>

00000738 <_ZN13LiquidCrystal7displayEv>:
     738:	fc 01       	movw	r30, r24
     73a:	60 89       	ldd	r22, Z+16	; 0x10
     73c:	26 2f       	mov	r18, r22
     73e:	24 60       	ori	r18, 0x04	; 4
     740:	20 8b       	std	Z+16, r18	; 0x10
     742:	6c 60       	ori	r22, 0x0C	; 12
     744:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>

00000748 <_ZN13LiquidCrystal5beginEhhh>:
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
     756:	42 30       	cpi	r20, 0x02	; 2
     758:	18 f0       	brcs	.+6      	; 0x760 <_ZN13LiquidCrystal5beginEhhh+0x18>
     75a:	8f 85       	ldd	r24, Y+15	; 0x0f
     75c:	88 60       	ori	r24, 0x08	; 8
     75e:	8f 87       	std	Y+15, r24	; 0x0f
     760:	4b 8b       	std	Y+19, r20	; 0x13
     762:	1c 8a       	std	Y+20, r1	; 0x14
     764:	80 e4       	ldi	r24, 0x40	; 64
     766:	8d 8b       	std	Y+21, r24	; 0x15
     768:	6e 8b       	std	Y+22, r22	; 0x16
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	60 5c       	subi	r22, 0xC0	; 192
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	6f 8b       	std	Y+23, r22	; 0x17
     772:	22 23       	and	r18, r18
     774:	29 f0       	breq	.+10     	; 0x780 <_ZN13LiquidCrystal5beginEhhh+0x38>
     776:	41 30       	cpi	r20, 0x01	; 1
     778:	19 f4       	brne	.+6      	; 0x780 <_ZN13LiquidCrystal5beginEhhh+0x38>
     77a:	8f 85       	ldd	r24, Y+15	; 0x0f
     77c:	84 60       	ori	r24, 0x04	; 4
     77e:	8f 87       	std	Y+15, r24	; 0x0f
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	0e 94 af 09 	call	0x135e	; 0x135e <pinMode>
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	8f 3f       	cpi	r24, 0xFF	; 255
     78c:	19 f0       	breq	.+6      	; 0x794 <_ZN13LiquidCrystal5beginEhhh+0x4c>
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	0e 94 af 09 	call	0x135e	; 0x135e <pinMode>
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	8e 81       	ldd	r24, Y+6	; 0x06
     798:	0e 94 af 09 	call	0x135e	; 0x135e <pinMode>
     79c:	7e 01       	movw	r14, r28
     79e:	87 e0       	ldi	r24, 0x07	; 7
     7a0:	e8 0e       	add	r14, r24
     7a2:	f1 1c       	adc	r15, r1
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	10 e0       	ldi	r17, 0x00	; 0
     7a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     7aa:	84 fd       	sbrc	r24, 4
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <_ZN13LiquidCrystal5beginEhhh+0x6c>
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <_ZN13LiquidCrystal5beginEhhh+0x70>
     7b4:	88 e0       	ldi	r24, 0x08	; 8
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	08 17       	cp	r16, r24
     7ba:	19 07       	cpc	r17, r25
     7bc:	4c f4       	brge	.+18     	; 0x7d0 <_ZN13LiquidCrystal5beginEhhh+0x88>
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	f7 01       	movw	r30, r14
     7c2:	81 91       	ld	r24, Z+
     7c4:	7f 01       	movw	r14, r30
     7c6:	0e 94 af 09 	call	0x135e	; 0x135e <pinMode>
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	ec cf       	rjmp	.-40     	; 0x7a8 <_ZN13LiquidCrystal5beginEhhh+0x60>
     7d0:	80 e5       	ldi	r24, 0x50	; 80
     7d2:	93 ec       	ldi	r25, 0xC3	; 195
     7d4:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     7e8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ea:	8f 3f       	cpi	r24, 0xFF	; 255
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <_ZN13LiquidCrystal5beginEhhh+0xac>
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <digitalWrite>
     7f4:	6f 85       	ldd	r22, Y+15	; 0x0f
     7f6:	64 fd       	sbrc	r22, 4
     7f8:	1d c0       	rjmp	.+58     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     7fa:	63 e0       	ldi	r22, 0x03	; 3
     7fc:	ce 01       	movw	r24, r28
     7fe:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN13LiquidCrystal10write4bitsEh>
     802:	84 e9       	ldi	r24, 0x94	; 148
     804:	91 e1       	ldi	r25, 0x11	; 17
     806:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	ce 01       	movw	r24, r28
     80e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN13LiquidCrystal10write4bitsEh>
     812:	84 e9       	ldi	r24, 0x94	; 148
     814:	91 e1       	ldi	r25, 0x11	; 17
     816:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     81a:	63 e0       	ldi	r22, 0x03	; 3
     81c:	ce 01       	movw	r24, r28
     81e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN13LiquidCrystal10write4bitsEh>
     822:	86 e9       	ldi	r24, 0x96	; 150
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN13LiquidCrystal10write4bitsEh>
     832:	16 c0       	rjmp	.+44     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     834:	60 62       	ori	r22, 0x20	; 32
     836:	ce 01       	movw	r24, r28
     838:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>
     83c:	84 e9       	ldi	r24, 0x94	; 148
     83e:	91 e1       	ldi	r25, 0x11	; 17
     840:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     844:	6f 85       	ldd	r22, Y+15	; 0x0f
     846:	60 62       	ori	r22, 0x20	; 32
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>
     84e:	86 e9       	ldi	r24, 0x96	; 150
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 c4 08 	call	0x1188	; 0x1188 <delayMicroseconds>
     856:	6f 85       	ldd	r22, Y+15	; 0x0f
     858:	60 62       	ori	r22, 0x20	; 32
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>
     860:	6f 85       	ldd	r22, Y+15	; 0x0f
     862:	60 62       	ori	r22, 0x20	; 32
     864:	ce 01       	movw	r24, r28
     866:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	88 8b       	std	Y+16, r24	; 0x10
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN13LiquidCrystal7displayEv>
     874:	ce 01       	movw	r24, r28
     876:	0e 94 82 03 	call	0x704	; 0x704 <_ZN13LiquidCrystal5clearEv>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 8b       	std	Y+17, r24	; 0x11
     87e:	66 e0       	ldi	r22, 0x06	; 6
     880:	ce 01       	movw	r24, r28
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <_ZN13LiquidCrystal7commandEh>

00000892 <_ZN13LiquidCrystalC1Ehhhhhh>:
     892:	cf 92       	push	r12
     894:	ef 92       	push	r14
     896:	0f 93       	push	r16
     898:	fc 01       	movw	r30, r24
     89a:	13 82       	std	Z+3, r1	; 0x03
     89c:	12 82       	std	Z+2, r1	; 0x02
     89e:	85 e3       	ldi	r24, 0x35	; 53
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	91 83       	std	Z+1, r25	; 0x01
     8a4:	80 83       	st	Z, r24
     8a6:	64 83       	std	Z+4, r22	; 0x04
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	85 83       	std	Z+5, r24	; 0x05
     8ac:	46 83       	std	Z+6, r20	; 0x06
     8ae:	27 83       	std	Z+7, r18	; 0x07
     8b0:	00 87       	std	Z+8, r16	; 0x08
     8b2:	e1 86       	std	Z+9, r14	; 0x09
     8b4:	c2 86       	std	Z+10, r12	; 0x0a
     8b6:	13 86       	std	Z+11, r1	; 0x0b
     8b8:	14 86       	std	Z+12, r1	; 0x0c
     8ba:	15 86       	std	Z+13, r1	; 0x0d
     8bc:	16 86       	std	Z+14, r1	; 0x0e
     8be:	17 86       	std	Z+15, r1	; 0x0f
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	60 e1       	ldi	r22, 0x10	; 16
     8c6:	cf 01       	movw	r24, r30
     8c8:	0f 91       	pop	r16
     8ca:	ef 90       	pop	r14
     8cc:	cf 90       	pop	r12
     8ce:	0c 94 a4 03 	jmp	0x748	; 0x748 <_ZN13LiquidCrystal5beginEhhh>

000008d2 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	08 95       	ret

000008de <__vector_13>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	2f 93       	push	r18
     8ea:	3f 93       	push	r19
     8ec:	4f 93       	push	r20
     8ee:	5f 93       	push	r21
     8f0:	6f 93       	push	r22
     8f2:	7f 93       	push	r23
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	af 93       	push	r26
     8fa:	bf 93       	push	r27
     8fc:	ef 93       	push	r30
     8fe:	ff 93       	push	r31
  Timer1.isrCallback();
     900:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <_ZN8TimerOne11isrCallbackE>
     904:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <_ZN8TimerOne11isrCallbackE+0x1>
     908:	09 95       	icall
}
     90a:	ff 91       	pop	r31
     90c:	ef 91       	pop	r30
     90e:	bf 91       	pop	r27
     910:	af 91       	pop	r26
     912:	9f 91       	pop	r25
     914:	8f 91       	pop	r24
     916:	7f 91       	pop	r23
     918:	6f 91       	pop	r22
     91a:	5f 91       	pop	r21
     91c:	4f 91       	pop	r20
     91e:	3f 91       	pop	r19
     920:	2f 91       	pop	r18
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <__subsf3>:
     92c:	50 58       	subi	r21, 0x80	; 128

0000092e <__addsf3>:
     92e:	bb 27       	eor	r27, r27
     930:	aa 27       	eor	r26, r26
     932:	0e 94 ae 04 	call	0x95c	; 0x95c <__addsf3x>
     936:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
     93a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
     93e:	38 f0       	brcs	.+14     	; 0x94e <__addsf3+0x20>
     940:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
     944:	20 f0       	brcs	.+8      	; 0x94e <__addsf3+0x20>
     946:	39 f4       	brne	.+14     	; 0x956 <__addsf3+0x28>
     948:	9f 3f       	cpi	r25, 0xFF	; 255
     94a:	19 f4       	brne	.+6      	; 0x952 <__addsf3+0x24>
     94c:	26 f4       	brtc	.+8      	; 0x956 <__addsf3+0x28>
     94e:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>
     952:	0e f4       	brtc	.+2      	; 0x956 <__addsf3+0x28>
     954:	e0 95       	com	r30
     956:	e7 fb       	bst	r30, 7
     958:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>

0000095c <__addsf3x>:
     95c:	e9 2f       	mov	r30, r25
     95e:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
     962:	58 f3       	brcs	.-42     	; 0x93a <__addsf3+0xc>
     964:	ba 17       	cp	r27, r26
     966:	62 07       	cpc	r22, r18
     968:	73 07       	cpc	r23, r19
     96a:	84 07       	cpc	r24, r20
     96c:	95 07       	cpc	r25, r21
     96e:	20 f0       	brcs	.+8      	; 0x978 <__addsf3x+0x1c>
     970:	79 f4       	brne	.+30     	; 0x990 <__addsf3x+0x34>
     972:	a6 f5       	brtc	.+104    	; 0x9dc <__addsf3x+0x80>
     974:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_zero>
     978:	0e f4       	brtc	.+2      	; 0x97c <__addsf3x+0x20>
     97a:	e0 95       	com	r30
     97c:	0b 2e       	mov	r0, r27
     97e:	ba 2f       	mov	r27, r26
     980:	a0 2d       	mov	r26, r0
     982:	0b 01       	movw	r0, r22
     984:	b9 01       	movw	r22, r18
     986:	90 01       	movw	r18, r0
     988:	0c 01       	movw	r0, r24
     98a:	ca 01       	movw	r24, r20
     98c:	a0 01       	movw	r20, r0
     98e:	11 24       	eor	r1, r1
     990:	ff 27       	eor	r31, r31
     992:	59 1b       	sub	r21, r25
     994:	99 f0       	breq	.+38     	; 0x9bc <__addsf3x+0x60>
     996:	59 3f       	cpi	r21, 0xF9	; 249
     998:	50 f4       	brcc	.+20     	; 0x9ae <__addsf3x+0x52>
     99a:	50 3e       	cpi	r21, 0xE0	; 224
     99c:	68 f1       	brcs	.+90     	; 0x9f8 <__addsf3x+0x9c>
     99e:	1a 16       	cp	r1, r26
     9a0:	f0 40       	sbci	r31, 0x00	; 0
     9a2:	a2 2f       	mov	r26, r18
     9a4:	23 2f       	mov	r18, r19
     9a6:	34 2f       	mov	r19, r20
     9a8:	44 27       	eor	r20, r20
     9aa:	58 5f       	subi	r21, 0xF8	; 248
     9ac:	f3 cf       	rjmp	.-26     	; 0x994 <__addsf3x+0x38>
     9ae:	46 95       	lsr	r20
     9b0:	37 95       	ror	r19
     9b2:	27 95       	ror	r18
     9b4:	a7 95       	ror	r26
     9b6:	f0 40       	sbci	r31, 0x00	; 0
     9b8:	53 95       	inc	r21
     9ba:	c9 f7       	brne	.-14     	; 0x9ae <__addsf3x+0x52>
     9bc:	7e f4       	brtc	.+30     	; 0x9dc <__addsf3x+0x80>
     9be:	1f 16       	cp	r1, r31
     9c0:	ba 0b       	sbc	r27, r26
     9c2:	62 0b       	sbc	r22, r18
     9c4:	73 0b       	sbc	r23, r19
     9c6:	84 0b       	sbc	r24, r20
     9c8:	ba f0       	brmi	.+46     	; 0x9f8 <__addsf3x+0x9c>
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	a1 f0       	breq	.+40     	; 0x9f6 <__addsf3x+0x9a>
     9ce:	ff 0f       	add	r31, r31
     9d0:	bb 1f       	adc	r27, r27
     9d2:	66 1f       	adc	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	88 1f       	adc	r24, r24
     9d8:	c2 f7       	brpl	.-16     	; 0x9ca <__addsf3x+0x6e>
     9da:	0e c0       	rjmp	.+28     	; 0x9f8 <__addsf3x+0x9c>
     9dc:	ba 0f       	add	r27, r26
     9de:	62 1f       	adc	r22, r18
     9e0:	73 1f       	adc	r23, r19
     9e2:	84 1f       	adc	r24, r20
     9e4:	48 f4       	brcc	.+18     	; 0x9f8 <__addsf3x+0x9c>
     9e6:	87 95       	ror	r24
     9e8:	77 95       	ror	r23
     9ea:	67 95       	ror	r22
     9ec:	b7 95       	ror	r27
     9ee:	f7 95       	ror	r31
     9f0:	9e 3f       	cpi	r25, 0xFE	; 254
     9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__addsf3x+0x9a>
     9f4:	b0 cf       	rjmp	.-160    	; 0x956 <__addsf3+0x28>
     9f6:	93 95       	inc	r25
     9f8:	88 0f       	add	r24, r24
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <__addsf3x+0xa2>
     9fc:	99 27       	eor	r25, r25
     9fe:	ee 0f       	add	r30, r30
     a00:	97 95       	ror	r25
     a02:	87 95       	ror	r24
     a04:	08 95       	ret

00000a06 <__divsf3>:
     a06:	0e 94 17 05 	call	0xa2e	; 0xa2e <__divsf3x>
     a0a:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
     a0e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
     a12:	58 f0       	brcs	.+22     	; 0xa2a <__divsf3+0x24>
     a14:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
     a18:	40 f0       	brcs	.+16     	; 0xa2a <__divsf3+0x24>
     a1a:	29 f4       	brne	.+10     	; 0xa26 <__divsf3+0x20>
     a1c:	5f 3f       	cpi	r21, 0xFF	; 255
     a1e:	29 f0       	breq	.+10     	; 0xa2a <__divsf3+0x24>
     a20:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
     a24:	51 11       	cpse	r21, r1
     a26:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
     a2a:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>

00000a2e <__divsf3x>:
     a2e:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
     a32:	68 f3       	brcs	.-38     	; 0xa0e <__divsf3+0x8>

00000a34 <__divsf3_pse>:
     a34:	99 23       	and	r25, r25
     a36:	b1 f3       	breq	.-20     	; 0xa24 <__divsf3+0x1e>
     a38:	55 23       	and	r21, r21
     a3a:	91 f3       	breq	.-28     	; 0xa20 <__divsf3+0x1a>
     a3c:	95 1b       	sub	r25, r21
     a3e:	55 0b       	sbc	r21, r21
     a40:	bb 27       	eor	r27, r27
     a42:	aa 27       	eor	r26, r26
     a44:	62 17       	cp	r22, r18
     a46:	73 07       	cpc	r23, r19
     a48:	84 07       	cpc	r24, r20
     a4a:	38 f0       	brcs	.+14     	; 0xa5a <__divsf3_pse+0x26>
     a4c:	9f 5f       	subi	r25, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	44 1f       	adc	r20, r20
     a56:	aa 1f       	adc	r26, r26
     a58:	a9 f3       	breq	.-22     	; 0xa44 <__divsf3_pse+0x10>
     a5a:	35 d0       	rcall	.+106    	; 0xac6 <__divsf3_pse+0x92>
     a5c:	0e 2e       	mov	r0, r30
     a5e:	3a f0       	brmi	.+14     	; 0xa6e <__divsf3_pse+0x3a>
     a60:	e0 e8       	ldi	r30, 0x80	; 128
     a62:	32 d0       	rcall	.+100    	; 0xac8 <__divsf3_pse+0x94>
     a64:	91 50       	subi	r25, 0x01	; 1
     a66:	50 40       	sbci	r21, 0x00	; 0
     a68:	e6 95       	lsr	r30
     a6a:	00 1c       	adc	r0, r0
     a6c:	ca f7       	brpl	.-14     	; 0xa60 <__divsf3_pse+0x2c>
     a6e:	2b d0       	rcall	.+86     	; 0xac6 <__divsf3_pse+0x92>
     a70:	fe 2f       	mov	r31, r30
     a72:	29 d0       	rcall	.+82     	; 0xac6 <__divsf3_pse+0x92>
     a74:	66 0f       	add	r22, r22
     a76:	77 1f       	adc	r23, r23
     a78:	88 1f       	adc	r24, r24
     a7a:	bb 1f       	adc	r27, r27
     a7c:	26 17       	cp	r18, r22
     a7e:	37 07       	cpc	r19, r23
     a80:	48 07       	cpc	r20, r24
     a82:	ab 07       	cpc	r26, r27
     a84:	b0 e8       	ldi	r27, 0x80	; 128
     a86:	09 f0       	breq	.+2      	; 0xa8a <__divsf3_pse+0x56>
     a88:	bb 0b       	sbc	r27, r27
     a8a:	80 2d       	mov	r24, r0
     a8c:	bf 01       	movw	r22, r30
     a8e:	ff 27       	eor	r31, r31
     a90:	93 58       	subi	r25, 0x83	; 131
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	3a f0       	brmi	.+14     	; 0xaa4 <__divsf3_pse+0x70>
     a96:	9e 3f       	cpi	r25, 0xFE	; 254
     a98:	51 05       	cpc	r21, r1
     a9a:	78 f0       	brcs	.+30     	; 0xaba <__divsf3_pse+0x86>
     a9c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
     aa0:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
     aa4:	5f 3f       	cpi	r21, 0xFF	; 255
     aa6:	e4 f3       	brlt	.-8      	; 0xaa0 <__divsf3_pse+0x6c>
     aa8:	98 3e       	cpi	r25, 0xE8	; 232
     aaa:	d4 f3       	brlt	.-12     	; 0xaa0 <__divsf3_pse+0x6c>
     aac:	86 95       	lsr	r24
     aae:	77 95       	ror	r23
     ab0:	67 95       	ror	r22
     ab2:	b7 95       	ror	r27
     ab4:	f7 95       	ror	r31
     ab6:	9f 5f       	subi	r25, 0xFF	; 255
     ab8:	c9 f7       	brne	.-14     	; 0xaac <__divsf3_pse+0x78>
     aba:	88 0f       	add	r24, r24
     abc:	91 1d       	adc	r25, r1
     abe:	96 95       	lsr	r25
     ac0:	87 95       	ror	r24
     ac2:	97 f9       	bld	r25, 7
     ac4:	08 95       	ret
     ac6:	e1 e0       	ldi	r30, 0x01	; 1
     ac8:	66 0f       	add	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	88 1f       	adc	r24, r24
     ace:	bb 1f       	adc	r27, r27
     ad0:	62 17       	cp	r22, r18
     ad2:	73 07       	cpc	r23, r19
     ad4:	84 07       	cpc	r24, r20
     ad6:	ba 07       	cpc	r27, r26
     ad8:	20 f0       	brcs	.+8      	; 0xae2 <__divsf3_pse+0xae>
     ada:	62 1b       	sub	r22, r18
     adc:	73 0b       	sbc	r23, r19
     ade:	84 0b       	sbc	r24, r20
     ae0:	ba 0b       	sbc	r27, r26
     ae2:	ee 1f       	adc	r30, r30
     ae4:	88 f7       	brcc	.-30     	; 0xac8 <__divsf3_pse+0x94>
     ae6:	e0 95       	com	r30
     ae8:	08 95       	ret

00000aea <__fixsfsi>:
     aea:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixunssfsi>
     aee:	68 94       	set
     af0:	b1 11       	cpse	r27, r1
     af2:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
     af6:	08 95       	ret

00000af8 <__fixunssfsi>:
     af8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_splitA>
     afc:	88 f0       	brcs	.+34     	; 0xb20 <__fixunssfsi+0x28>
     afe:	9f 57       	subi	r25, 0x7F	; 127
     b00:	98 f0       	brcs	.+38     	; 0xb28 <__fixunssfsi+0x30>
     b02:	b9 2f       	mov	r27, r25
     b04:	99 27       	eor	r25, r25
     b06:	b7 51       	subi	r27, 0x17	; 23
     b08:	b0 f0       	brcs	.+44     	; 0xb36 <__fixunssfsi+0x3e>
     b0a:	e1 f0       	breq	.+56     	; 0xb44 <__fixunssfsi+0x4c>
     b0c:	66 0f       	add	r22, r22
     b0e:	77 1f       	adc	r23, r23
     b10:	88 1f       	adc	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	1a f0       	brmi	.+6      	; 0xb1c <__fixunssfsi+0x24>
     b16:	ba 95       	dec	r27
     b18:	c9 f7       	brne	.-14     	; 0xb0c <__fixunssfsi+0x14>
     b1a:	14 c0       	rjmp	.+40     	; 0xb44 <__fixunssfsi+0x4c>
     b1c:	b1 30       	cpi	r27, 0x01	; 1
     b1e:	91 f0       	breq	.+36     	; 0xb44 <__fixunssfsi+0x4c>
     b20:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_zero>
     b24:	b1 e0       	ldi	r27, 0x01	; 1
     b26:	08 95       	ret
     b28:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_zero>
     b2c:	67 2f       	mov	r22, r23
     b2e:	78 2f       	mov	r23, r24
     b30:	88 27       	eor	r24, r24
     b32:	b8 5f       	subi	r27, 0xF8	; 248
     b34:	39 f0       	breq	.+14     	; 0xb44 <__fixunssfsi+0x4c>
     b36:	b9 3f       	cpi	r27, 0xF9	; 249
     b38:	cc f3       	brlt	.-14     	; 0xb2c <__fixunssfsi+0x34>
     b3a:	86 95       	lsr	r24
     b3c:	77 95       	ror	r23
     b3e:	67 95       	ror	r22
     b40:	b3 95       	inc	r27
     b42:	d9 f7       	brne	.-10     	; 0xb3a <__fixunssfsi+0x42>
     b44:	3e f4       	brtc	.+14     	; 0xb54 <__fixunssfsi+0x5c>
     b46:	90 95       	com	r25
     b48:	80 95       	com	r24
     b4a:	70 95       	com	r23
     b4c:	61 95       	neg	r22
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	8f 4f       	sbci	r24, 0xFF	; 255
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	08 95       	ret

00000b56 <__floatunsisf>:
     b56:	e8 94       	clt
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <__floatsisf+0x12>

00000b5a <__floatsisf>:
     b5a:	97 fb       	bst	r25, 7
     b5c:	3e f4       	brtc	.+14     	; 0xb6c <__floatsisf+0x12>
     b5e:	90 95       	com	r25
     b60:	80 95       	com	r24
     b62:	70 95       	com	r23
     b64:	61 95       	neg	r22
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
     b68:	8f 4f       	sbci	r24, 0xFF	; 255
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	99 23       	and	r25, r25
     b6e:	a9 f0       	breq	.+42     	; 0xb9a <__floatsisf+0x40>
     b70:	f9 2f       	mov	r31, r25
     b72:	96 e9       	ldi	r25, 0x96	; 150
     b74:	bb 27       	eor	r27, r27
     b76:	93 95       	inc	r25
     b78:	f6 95       	lsr	r31
     b7a:	87 95       	ror	r24
     b7c:	77 95       	ror	r23
     b7e:	67 95       	ror	r22
     b80:	b7 95       	ror	r27
     b82:	f1 11       	cpse	r31, r1
     b84:	f8 cf       	rjmp	.-16     	; 0xb76 <__floatsisf+0x1c>
     b86:	fa f4       	brpl	.+62     	; 0xbc6 <__floatsisf+0x6c>
     b88:	bb 0f       	add	r27, r27
     b8a:	11 f4       	brne	.+4      	; 0xb90 <__floatsisf+0x36>
     b8c:	60 ff       	sbrs	r22, 0
     b8e:	1b c0       	rjmp	.+54     	; 0xbc6 <__floatsisf+0x6c>
     b90:	6f 5f       	subi	r22, 0xFF	; 255
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	8f 4f       	sbci	r24, 0xFF	; 255
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	16 c0       	rjmp	.+44     	; 0xbc6 <__floatsisf+0x6c>
     b9a:	88 23       	and	r24, r24
     b9c:	11 f0       	breq	.+4      	; 0xba2 <__floatsisf+0x48>
     b9e:	96 e9       	ldi	r25, 0x96	; 150
     ba0:	11 c0       	rjmp	.+34     	; 0xbc4 <__floatsisf+0x6a>
     ba2:	77 23       	and	r23, r23
     ba4:	21 f0       	breq	.+8      	; 0xbae <__floatsisf+0x54>
     ba6:	9e e8       	ldi	r25, 0x8E	; 142
     ba8:	87 2f       	mov	r24, r23
     baa:	76 2f       	mov	r23, r22
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <__floatsisf+0x5e>
     bae:	66 23       	and	r22, r22
     bb0:	71 f0       	breq	.+28     	; 0xbce <__floatsisf+0x74>
     bb2:	96 e8       	ldi	r25, 0x86	; 134
     bb4:	86 2f       	mov	r24, r22
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	2a f0       	brmi	.+10     	; 0xbc6 <__floatsisf+0x6c>
     bbc:	9a 95       	dec	r25
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	88 1f       	adc	r24, r24
     bc4:	da f7       	brpl	.-10     	; 0xbbc <__floatsisf+0x62>
     bc6:	88 0f       	add	r24, r24
     bc8:	96 95       	lsr	r25
     bca:	87 95       	ror	r24
     bcc:	97 f9       	bld	r25, 7
     bce:	08 95       	ret

00000bd0 <__fp_inf>:
     bd0:	97 f9       	bld	r25, 7
     bd2:	9f 67       	ori	r25, 0x7F	; 127
     bd4:	80 e8       	ldi	r24, 0x80	; 128
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	08 95       	ret

00000bdc <__fp_nan>:
     bdc:	9f ef       	ldi	r25, 0xFF	; 255
     bde:	80 ec       	ldi	r24, 0xC0	; 192
     be0:	08 95       	ret

00000be2 <__fp_pscA>:
     be2:	00 24       	eor	r0, r0
     be4:	0a 94       	dec	r0
     be6:	16 16       	cp	r1, r22
     be8:	17 06       	cpc	r1, r23
     bea:	18 06       	cpc	r1, r24
     bec:	09 06       	cpc	r0, r25
     bee:	08 95       	ret

00000bf0 <__fp_pscB>:
     bf0:	00 24       	eor	r0, r0
     bf2:	0a 94       	dec	r0
     bf4:	12 16       	cp	r1, r18
     bf6:	13 06       	cpc	r1, r19
     bf8:	14 06       	cpc	r1, r20
     bfa:	05 06       	cpc	r0, r21
     bfc:	08 95       	ret

00000bfe <__fp_round>:
     bfe:	09 2e       	mov	r0, r25
     c00:	03 94       	inc	r0
     c02:	00 0c       	add	r0, r0
     c04:	11 f4       	brne	.+4      	; 0xc0a <__fp_round+0xc>
     c06:	88 23       	and	r24, r24
     c08:	52 f0       	brmi	.+20     	; 0xc1e <__fp_round+0x20>
     c0a:	bb 0f       	add	r27, r27
     c0c:	40 f4       	brcc	.+16     	; 0xc1e <__fp_round+0x20>
     c0e:	bf 2b       	or	r27, r31
     c10:	11 f4       	brne	.+4      	; 0xc16 <__fp_round+0x18>
     c12:	60 ff       	sbrs	r22, 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__fp_round+0x20>
     c16:	6f 5f       	subi	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	8f 4f       	sbci	r24, 0xFF	; 255
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	08 95       	ret

00000c20 <__fp_split3>:
     c20:	57 fd       	sbrc	r21, 7
     c22:	90 58       	subi	r25, 0x80	; 128
     c24:	44 0f       	add	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	59 f0       	breq	.+22     	; 0xc40 <__fp_splitA+0x10>
     c2a:	5f 3f       	cpi	r21, 0xFF	; 255
     c2c:	71 f0       	breq	.+28     	; 0xc4a <__fp_splitA+0x1a>
     c2e:	47 95       	ror	r20

00000c30 <__fp_splitA>:
     c30:	88 0f       	add	r24, r24
     c32:	97 fb       	bst	r25, 7
     c34:	99 1f       	adc	r25, r25
     c36:	61 f0       	breq	.+24     	; 0xc50 <__fp_splitA+0x20>
     c38:	9f 3f       	cpi	r25, 0xFF	; 255
     c3a:	79 f0       	breq	.+30     	; 0xc5a <__fp_splitA+0x2a>
     c3c:	87 95       	ror	r24
     c3e:	08 95       	ret
     c40:	12 16       	cp	r1, r18
     c42:	13 06       	cpc	r1, r19
     c44:	14 06       	cpc	r1, r20
     c46:	55 1f       	adc	r21, r21
     c48:	f2 cf       	rjmp	.-28     	; 0xc2e <__fp_split3+0xe>
     c4a:	46 95       	lsr	r20
     c4c:	f1 df       	rcall	.-30     	; 0xc30 <__fp_splitA>
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <__fp_splitA+0x30>
     c50:	16 16       	cp	r1, r22
     c52:	17 06       	cpc	r1, r23
     c54:	18 06       	cpc	r1, r24
     c56:	99 1f       	adc	r25, r25
     c58:	f1 cf       	rjmp	.-30     	; 0xc3c <__fp_splitA+0xc>
     c5a:	86 95       	lsr	r24
     c5c:	71 05       	cpc	r23, r1
     c5e:	61 05       	cpc	r22, r1
     c60:	08 94       	sec
     c62:	08 95       	ret

00000c64 <__fp_zero>:
     c64:	e8 94       	clt

00000c66 <__fp_szero>:
     c66:	bb 27       	eor	r27, r27
     c68:	66 27       	eor	r22, r22
     c6a:	77 27       	eor	r23, r23
     c6c:	cb 01       	movw	r24, r22
     c6e:	97 f9       	bld	r25, 7
     c70:	08 95       	ret

00000c72 <initVariant>:
     c72:	08 95       	ret

00000c74 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c74:	0e 94 cf 08 	call	0x119e	; 0x119e <init>

	initVariant();
     c78:	0e 94 39 06 	call	0xc72	; 0xc72 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c7c:	0e 94 ed 01 	call	0x3da	; 0x3da <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c80:	c0 e0       	ldi	r28, 0x00	; 0
     c82:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     c84:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <loop>
		if (serialEventRun) serialEventRun();
     c88:	20 97       	sbiw	r28, 0x00	; 0
     c8a:	e1 f3       	breq	.-8      	; 0xc84 <main+0x10>
     c8c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c90:	f9 cf       	rjmp	.-14     	; 0xc84 <main+0x10>

00000c92 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	6c 01       	movw	r12, r24
     ca4:	7a 01       	movw	r14, r20
     ca6:	8b 01       	movw	r16, r22
     ca8:	c0 e0       	ldi	r28, 0x00	; 0
     caa:	d0 e0       	ldi	r29, 0x00	; 0
     cac:	ce 15       	cp	r28, r14
     cae:	df 05       	cpc	r29, r15
     cb0:	81 f0       	breq	.+32     	; 0xcd2 <_ZN5Print5writeEPKhj+0x40>
     cb2:	d8 01       	movw	r26, r16
     cb4:	6d 91       	ld	r22, X+
     cb6:	8d 01       	movw	r16, r26
     cb8:	d6 01       	movw	r26, r12
     cba:	ed 91       	ld	r30, X+
     cbc:	fc 91       	ld	r31, X
     cbe:	01 90       	ld	r0, Z+
     cc0:	f0 81       	ld	r31, Z
     cc2:	e0 2d       	mov	r30, r0
     cc4:	c6 01       	movw	r24, r12
     cc6:	09 95       	icall
     cc8:	89 2b       	or	r24, r25
     cca:	11 f0       	breq	.+4      	; 0xcd0 <_ZN5Print5writeEPKhj+0x3e>
     ccc:	21 96       	adiw	r28, 0x01	; 1
     cce:	ee cf       	rjmp	.-36     	; 0xcac <_ZN5Print5writeEPKhj+0x1a>
     cd0:	7e 01       	movw	r14, r28
     cd2:	c7 01       	movw	r24, r14
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	08 95       	ret

00000ce6 <_ZN5Print5writeEPKc>:
     ce6:	61 15       	cp	r22, r1
     ce8:	71 05       	cpc	r23, r1
     cea:	79 f0       	breq	.+30     	; 0xd0a <_ZN5Print5writeEPKc+0x24>
     cec:	fb 01       	movw	r30, r22
     cee:	01 90       	ld	r0, Z+
     cf0:	00 20       	and	r0, r0
     cf2:	e9 f7       	brne	.-6      	; 0xcee <_ZN5Print5writeEPKc+0x8>
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	af 01       	movw	r20, r30
     cf8:	46 1b       	sub	r20, r22
     cfa:	57 0b       	sbc	r21, r23
     cfc:	dc 01       	movw	r26, r24
     cfe:	ed 91       	ld	r30, X+
     d00:	fc 91       	ld	r31, X
     d02:	02 80       	ldd	r0, Z+2	; 0x02
     d04:	f3 81       	ldd	r31, Z+3	; 0x03
     d06:	e0 2d       	mov	r30, r0
     d08:	09 94       	ijmp
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	08 95       	ret

00000d10 <_ZN5Print5printEPKc>:
     d10:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_ZN5Print5writeEPKc>

00000d14 <_ZN5Print5printEc>:
     d14:	dc 01       	movw	r26, r24
     d16:	ed 91       	ld	r30, X+
     d18:	fc 91       	ld	r31, X
     d1a:	01 90       	ld	r0, Z+
     d1c:	f0 81       	ld	r31, Z
     d1e:	e0 2d       	mov	r30, r0
     d20:	09 94       	ijmp

00000d22 <_ZN5Print11printNumberEmh>:
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	a1 97       	sbiw	r28, 0x21	; 33
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	7c 01       	movw	r14, r24
     d48:	fa 01       	movw	r30, r20
     d4a:	cb 01       	movw	r24, r22
     d4c:	19 a2       	std	Y+33, r1	; 0x21
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <_ZN5Print11printNumberEmh+0x32>
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	8e 01       	movw	r16, r28
     d56:	0f 5d       	subi	r16, 0xDF	; 223
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
     d5a:	82 2e       	mov	r8, r18
     d5c:	91 2c       	mov	r9, r1
     d5e:	a1 2c       	mov	r10, r1
     d60:	b1 2c       	mov	r11, r1
     d62:	bf 01       	movw	r22, r30
     d64:	a5 01       	movw	r20, r10
     d66:	94 01       	movw	r18, r8
     d68:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__udivmodsi4>
     d6c:	f9 01       	movw	r30, r18
     d6e:	ca 01       	movw	r24, r20
     d70:	01 50       	subi	r16, 0x01	; 1
     d72:	11 09       	sbc	r17, r1
     d74:	6a 30       	cpi	r22, 0x0A	; 10
     d76:	10 f4       	brcc	.+4      	; 0xd7c <_ZN5Print11printNumberEmh+0x5a>
     d78:	60 5d       	subi	r22, 0xD0	; 208
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <_ZN5Print11printNumberEmh+0x5c>
     d7c:	69 5c       	subi	r22, 0xC9	; 201
     d7e:	d8 01       	movw	r26, r16
     d80:	6c 93       	st	X, r22
     d82:	23 2b       	or	r18, r19
     d84:	24 2b       	or	r18, r20
     d86:	25 2b       	or	r18, r21
     d88:	61 f7       	brne	.-40     	; 0xd62 <_ZN5Print11printNumberEmh+0x40>
     d8a:	b8 01       	movw	r22, r16
     d8c:	c7 01       	movw	r24, r14
     d8e:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN5Print5writeEPKc>
     d92:	a1 96       	adiw	r28, 0x21	; 33
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	9f 90       	pop	r9
     db0:	8f 90       	pop	r8
     db2:	08 95       	ret

00000db4 <_ZN5Print5printEmi>:
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	41 f4       	brne	.+16     	; 0xdca <_ZN5Print5printEmi+0x16>
     dba:	dc 01       	movw	r26, r24
     dbc:	ed 91       	ld	r30, X+
     dbe:	fc 91       	ld	r31, X
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	64 2f       	mov	r22, r20
     dc8:	09 94       	ijmp
     dca:	0c 94 91 06 	jmp	0xd22	; 0xd22 <_ZN5Print11printNumberEmh>

00000dce <_ZN5Print5printEji>:
     dce:	9a 01       	movw	r18, r20
     dd0:	ab 01       	movw	r20, r22
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <_ZN5Print5printEmi>

00000dda <_ZN5Print5printEli>:
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	21 15       	cp	r18, r1
     dec:	31 05       	cpc	r19, r1
     dee:	81 f4       	brne	.+32     	; 0xe10 <_ZN5Print5printEli+0x36>
     df0:	dc 01       	movw	r26, r24
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	01 90       	ld	r0, Z+
     df8:	f0 81       	ld	r31, Z
     dfa:	e0 2d       	mov	r30, r0
     dfc:	64 2f       	mov	r22, r20
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	09 94       	ijmp
     e10:	2a 30       	cpi	r18, 0x0A	; 10
     e12:	31 05       	cpc	r19, r1
     e14:	01 f5       	brne	.+64     	; 0xe56 <_ZN5Print5printEli+0x7c>
     e16:	77 ff       	sbrs	r23, 7
     e18:	1d c0       	rjmp	.+58     	; 0xe54 <_ZN5Print5printEli+0x7a>
     e1a:	6a 01       	movw	r12, r20
     e1c:	7b 01       	movw	r14, r22
     e1e:	ec 01       	movw	r28, r24
     e20:	6d e2       	ldi	r22, 0x2D	; 45
     e22:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEc>
     e26:	8c 01       	movw	r16, r24
     e28:	44 27       	eor	r20, r20
     e2a:	55 27       	eor	r21, r21
     e2c:	ba 01       	movw	r22, r20
     e2e:	4c 19       	sub	r20, r12
     e30:	5d 09       	sbc	r21, r13
     e32:	6e 09       	sbc	r22, r14
     e34:	7f 09       	sbc	r23, r15
     e36:	2a e0       	ldi	r18, 0x0A	; 10
     e38:	ce 01       	movw	r24, r28
     e3a:	0e 94 91 06 	call	0xd22	; 0xd22 <_ZN5Print11printNumberEmh>
     e3e:	80 0f       	add	r24, r16
     e40:	91 1f       	adc	r25, r17
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	08 95       	ret
     e54:	2a e0       	ldi	r18, 0x0A	; 10
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	0c 94 91 06 	jmp	0xd22	; 0xd22 <_ZN5Print11printNumberEmh>

00000e6a <_ZN5Print5printEii>:
     e6a:	9a 01       	movw	r18, r20
     e6c:	ab 01       	movw	r20, r22
     e6e:	77 0f       	add	r23, r23
     e70:	66 0b       	sbc	r22, r22
     e72:	77 0b       	sbc	r23, r23
     e74:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_ZN5Print5printEli>

00000e78 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     e78:	7f 92       	push	r7
     e7a:	8f 92       	push	r8
     e7c:	9f 92       	push	r9
     e7e:	af 92       	push	r10
     e80:	bf 92       	push	r11
     e82:	cf 92       	push	r12
     e84:	df 92       	push	r13
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	8c 01       	movw	r16, r24
     e94:	6a 01       	movw	r12, r20
     e96:	7b 01       	movw	r14, r22
     e98:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     e9a:	9a 01       	movw	r18, r20
     e9c:	ab 01       	movw	r20, r22
     e9e:	c7 01       	movw	r24, r14
     ea0:	b6 01       	movw	r22, r12
     ea2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__unordsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     eaa:	60 e4       	ldi	r22, 0x40	; 64
     eac:	71 e0       	ldi	r23, 0x01	; 1
     eae:	27 c0       	rjmp	.+78     	; 0xefe <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     eb0:	46 01       	movw	r8, r12
     eb2:	57 01       	movw	r10, r14
     eb4:	e8 94       	clt
     eb6:	b7 f8       	bld	r11, 7
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	4f e7       	ldi	r20, 0x7F	; 127
     ebe:	5f e7       	ldi	r21, 0x7F	; 127
     ec0:	c5 01       	movw	r24, r10
     ec2:	b4 01       	movw	r22, r8
     ec4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__unordsf2>
     ec8:	81 11       	cpse	r24, r1
     eca:	0d c0       	rjmp	.+26     	; 0xee6 <_ZN5Print10printFloatEdh+0x6e>
     ecc:	2f ef       	ldi	r18, 0xFF	; 255
     ece:	3f ef       	ldi	r19, 0xFF	; 255
     ed0:	4f e7       	ldi	r20, 0x7F	; 127
     ed2:	5f e7       	ldi	r21, 0x7F	; 127
     ed4:	c5 01       	movw	r24, r10
     ed6:	b4 01       	movw	r22, r8
     ed8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     edc:	18 16       	cp	r1, r24
     ede:	1c f4       	brge	.+6      	; 0xee6 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ee0:	64 e4       	ldi	r22, 0x44	; 68
     ee2:	71 e0       	ldi	r23, 0x01	; 1
     ee4:	0c c0       	rjmp	.+24     	; 0xefe <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     ee6:	2f ef       	ldi	r18, 0xFF	; 255
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	5f e4       	ldi	r21, 0x4F	; 79
     eee:	c7 01       	movw	r24, r14
     ef0:	b6 01       	movw	r22, r12
     ef2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__gesf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	94 f4       	brge	.+36     	; 0xf1e <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     efa:	68 e4       	ldi	r22, 0x48	; 72
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	9f 90       	pop	r9
     f16:	8f 90       	pop	r8
     f18:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     f1a:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     f1e:	2f ef       	ldi	r18, 0xFF	; 255
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	5f ec       	ldi	r21, 0xCF	; 207
     f26:	c7 01       	movw	r24, r14
     f28:	b6 01       	movw	r22, r12
     f2a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     f2e:	87 fd       	sbrc	r24, 7
     f30:	e4 cf       	rjmp	.-56     	; 0xefa <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	a9 01       	movw	r20, r18
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     f40:	87 ff       	sbrs	r24, 7
     f42:	0a c0       	rjmp	.+20     	; 0xf58 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     f44:	6d e2       	ldi	r22, 0x2D	; 45
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEc>
     f4c:	ec 01       	movw	r28, r24
     number = -number;
     f4e:	f7 fa       	bst	r15, 7
     f50:	f0 94       	com	r15
     f52:	f7 f8       	bld	r15, 7
     f54:	f0 94       	com	r15
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     f5c:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     f66:	7b 14       	cp	r7, r11
     f68:	41 f0       	breq	.+16     	; 0xf7a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e2       	ldi	r20, 0x20	; 32
     f70:	51 e4       	ldi	r21, 0x41	; 65
     f72:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     f76:	b3 94       	inc	r11
     f78:	f6 cf       	rjmp	.-20     	; 0xf66 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     f7a:	a7 01       	movw	r20, r14
     f7c:	96 01       	movw	r18, r12
     f7e:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     f82:	6b 01       	movw	r12, r22
     f84:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     f86:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixunssfsi>
     f8a:	4b 01       	movw	r8, r22
     f8c:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     f8e:	2a e0       	ldi	r18, 0x0A	; 10
     f90:	ab 01       	movw	r20, r22
     f92:	bc 01       	movw	r22, r24
     f94:	c8 01       	movw	r24, r16
     f96:	0e 94 91 06 	call	0xd22	; 0xd22 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     f9a:	c8 0f       	add	r28, r24
     f9c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     f9e:	77 20       	and	r7, r7
     fa0:	b9 f1       	breq	.+110    	; 0x1010 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     fa2:	c5 01       	movw	r24, r10
     fa4:	b4 01       	movw	r22, r8
     fa6:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatunsisf>
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	c7 01       	movw	r24, r14
     fb0:	b6 01       	movw	r22, r12
     fb2:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
     fb6:	6b 01       	movw	r12, r22
     fb8:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     fba:	6e e2       	ldi	r22, 0x2E	; 46
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEc>
     fc2:	c8 0f       	add	r28, r24
     fc4:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	0e 94 ce 0a 	call	0x159c	; 0x159c <__mulsf3>
     fd6:	4b 01       	movw	r8, r22
     fd8:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     fda:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixunssfsi>
     fde:	6b 01       	movw	r12, r22
     fe0:	7c 01       	movw	r14, r24
    n += print(toPrint);
     fe2:	4a e0       	ldi	r20, 0x0A	; 10
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	c8 01       	movw	r24, r16
     fe8:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Print5printEji>
     fec:	c8 0f       	add	r28, r24
     fee:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     ff0:	b6 01       	movw	r22, r12
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatunsisf>
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	c5 01       	movw	r24, r10
    1000:	b4 01       	movw	r22, r8
    1002:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
    1006:	6b 01       	movw	r12, r22
    1008:	7c 01       	movw	r14, r24
    100a:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    100c:	71 10       	cpse	r7, r1
    100e:	db cf       	rjmp	.-74     	; 0xfc6 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1010:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	7f 90       	pop	r7
    102c:	08 95       	ret

0000102e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    102e:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <_ZN5Print10printFloatEdh>

00001032 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <timer0_millis>
    104c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <timer0_millis+0x1>
    1050:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <timer0_millis+0x2>
    1054:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <timer0_millis+0x3>
    1058:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <timer0_fract>
    105c:	23 e0       	ldi	r18, 0x03	; 3
    105e:	23 0f       	add	r18, r19
    1060:	2d 37       	cpi	r18, 0x7D	; 125
    1062:	20 f4       	brcc	.+8      	; 0x106c <__vector_16+0x3a>
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	a1 1d       	adc	r26, r1
    1068:	b1 1d       	adc	r27, r1
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <__vector_16+0x44>
    106c:	26 e8       	ldi	r18, 0x86	; 134
    106e:	23 0f       	add	r18, r19
    1070:	02 96       	adiw	r24, 0x02	; 2
    1072:	a1 1d       	adc	r26, r1
    1074:	b1 1d       	adc	r27, r1
    1076:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <timer0_fract>
    107a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <timer0_millis>
    107e:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <timer0_millis+0x1>
    1082:	a0 93 88 01 	sts	0x0188, r26	; 0x800188 <timer0_millis+0x2>
    1086:	b0 93 89 01 	sts	0x0189, r27	; 0x800189 <timer0_millis+0x3>
    108a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timer0_overflow_count>
    108e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timer0_overflow_count+0x1>
    1092:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <timer0_overflow_count+0x2>
    1096:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <timer0_overflow_count+0x3>
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	a1 1d       	adc	r26, r1
    109e:	b1 1d       	adc	r27, r1
    10a0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <timer0_overflow_count>
    10a4:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <timer0_overflow_count+0x1>
    10a8:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <timer0_overflow_count+0x2>
    10ac:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <timer0_overflow_count+0x3>
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	3f 91       	pop	r19
    10ba:	2f 91       	pop	r18
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10c6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    10c8:	f8 94       	cli
	m = timer0_overflow_count;
    10ca:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timer0_overflow_count>
    10ce:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timer0_overflow_count+0x1>
    10d2:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <timer0_overflow_count+0x2>
    10d6:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    10da:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    10dc:	a8 9b       	sbis	0x15, 0	; 21
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <micros+0x24>
    10e0:	2f 3f       	cpi	r18, 0xFF	; 255
    10e2:	19 f0       	breq	.+6      	; 0x10ea <micros+0x24>
		m++;
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	a1 1d       	adc	r26, r1
    10e8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    10ea:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    10ec:	ba 2f       	mov	r27, r26
    10ee:	a9 2f       	mov	r26, r25
    10f0:	98 2f       	mov	r25, r24
    10f2:	88 27       	eor	r24, r24
    10f4:	82 0f       	add	r24, r18
    10f6:	91 1d       	adc	r25, r1
    10f8:	a1 1d       	adc	r26, r1
    10fa:	b1 1d       	adc	r27, r1
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	4a 95       	dec	r20
    110c:	d1 f7       	brne	.-12     	; 0x1102 <micros+0x3c>
}
    110e:	08 95       	ret

00001110 <delay>:

void delay(unsigned long ms)
{
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	6b 01       	movw	r12, r22
    1122:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1124:	0e 94 63 08 	call	0x10c6	; 0x10c6 <micros>
    1128:	4b 01       	movw	r8, r22
    112a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    112c:	c1 14       	cp	r12, r1
    112e:	d1 04       	cpc	r13, r1
    1130:	e1 04       	cpc	r14, r1
    1132:	f1 04       	cpc	r15, r1
    1134:	01 f1       	breq	.+64     	; 0x1176 <delay+0x66>
		yield();
    1136:	0e 94 9f 0a 	call	0x153e	; 0x153e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    113a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <micros>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	88 19       	sub	r24, r8
    1144:	99 09       	sbc	r25, r9
    1146:	aa 09       	sbc	r26, r10
    1148:	bb 09       	sbc	r27, r11
    114a:	88 3e       	cpi	r24, 0xE8	; 232
    114c:	93 40       	sbci	r25, 0x03	; 3
    114e:	a1 05       	cpc	r26, r1
    1150:	b1 05       	cpc	r27, r1
    1152:	60 f3       	brcs	.-40     	; 0x112c <delay+0x1c>
			ms--;
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	c2 1a       	sub	r12, r18
    1158:	d1 08       	sbc	r13, r1
    115a:	e1 08       	sbc	r14, r1
    115c:	f1 08       	sbc	r15, r1
			start += 1000;
    115e:	88 ee       	ldi	r24, 0xE8	; 232
    1160:	88 0e       	add	r8, r24
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	98 1e       	adc	r9, r24
    1166:	a1 1c       	adc	r10, r1
    1168:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    116a:	c1 14       	cp	r12, r1
    116c:	d1 04       	cpc	r13, r1
    116e:	e1 04       	cpc	r14, r1
    1170:	f1 04       	cpc	r15, r1
    1172:	19 f7       	brne	.-58     	; 0x113a <delay+0x2a>
    1174:	db cf       	rjmp	.-74     	; 0x112c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	cf 90       	pop	r12
    117e:	bf 90       	pop	r11
    1180:	af 90       	pop	r10
    1182:	9f 90       	pop	r9
    1184:	8f 90       	pop	r8
    1186:	08 95       	ret

00001188 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1188:	82 30       	cpi	r24, 0x02	; 2
    118a:	91 05       	cpc	r25, r1
    118c:	38 f0       	brcs	.+14     	; 0x119c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1196:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <delayMicroseconds+0x10>
    119c:	08 95       	ret

0000119e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    119e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11a0:	84 b5       	in	r24, 0x24	; 36
    11a2:	82 60       	ori	r24, 0x02	; 2
    11a4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11a6:	84 b5       	in	r24, 0x24	; 36
    11a8:	81 60       	ori	r24, 0x01	; 1
    11aa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11ac:	85 b5       	in	r24, 0x25	; 37
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11b2:	85 b5       	in	r24, 0x25	; 37
    11b4:	81 60       	ori	r24, 0x01	; 1
    11b6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11b8:	ee e6       	ldi	r30, 0x6E	; 110
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11c2:	e1 e8       	ldi	r30, 0x81	; 129
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11c8:	80 81       	ld	r24, Z
    11ca:	82 60       	ori	r24, 0x02	; 2
    11cc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11ce:	80 81       	ld	r24, Z
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11d4:	e0 e8       	ldi	r30, 0x80	; 128
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11de:	e1 eb       	ldi	r30, 0xB1	; 177
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	84 60       	ori	r24, 0x04	; 4
    11e6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11e8:	e0 eb       	ldi	r30, 0xB0	; 176
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    11f2:	ea e7       	ldi	r30, 0x7A	; 122
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	84 60       	ori	r24, 0x04	; 4
    11fa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    11fc:	80 81       	ld	r24, Z
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1202:	80 81       	ld	r24, Z
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    120e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1212:	08 95       	ret

00001214 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1214:	8e 30       	cpi	r24, 0x0E	; 14
    1216:	08 f0       	brcs	.+2      	; 0x121a <analogRead+0x6>
    1218:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    121a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <analog_reference>
    121e:	90 e4       	ldi	r25, 0x40	; 64
    1220:	29 9f       	mul	r18, r25
    1222:	90 01       	movw	r18, r0
    1224:	11 24       	eor	r1, r1
    1226:	87 70       	andi	r24, 0x07	; 7
    1228:	82 2b       	or	r24, r18
    122a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    122e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1238:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    123c:	86 fd       	sbrc	r24, 6
    123e:	fc cf       	rjmp	.-8      	; 0x1238 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1240:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    1244:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1248:	90 e0       	ldi	r25, 0x00	; 0
}
    124a:	92 2b       	or	r25, r18
    124c:	08 95       	ret

0000124e <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	18 2f       	mov	r17, r24
    1256:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	0e 94 af 09 	call	0x135e	; 0x135e <pinMode>
	if (val == 0)
    125e:	20 97       	sbiw	r28, 0x00	; 0
    1260:	11 f4       	brne	.+4      	; 0x1266 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	04 c0       	rjmp	.+8      	; 0x126e <analogWrite+0x20>
	}
	else if (val == 255)
    1266:	cf 3f       	cpi	r28, 0xFF	; 255
    1268:	d1 05       	cpc	r29, r1
    126a:	39 f4       	brne	.+14     	; 0x127a <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1276:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    127a:	e1 2f       	mov	r30, r17
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	e8 59       	subi	r30, 0x98	; 152
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	e4 91       	lpm	r30, Z
    1284:	e3 30       	cpi	r30, 0x03	; 3
    1286:	f9 f0       	breq	.+62     	; 0x12c6 <analogWrite+0x78>
    1288:	48 f4       	brcc	.+18     	; 0x129c <analogWrite+0x4e>
    128a:	e1 30       	cpi	r30, 0x01	; 1
    128c:	b9 f0       	breq	.+46     	; 0x12bc <analogWrite+0x6e>
    128e:	e2 30       	cpi	r30, 0x02	; 2
    1290:	a1 f5       	brne	.+104    	; 0x12fa <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1292:	84 b5       	in	r24, 0x24	; 36
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1298:	c8 bd       	out	0x28, r28	; 40
				break;
    129a:	34 c0       	rjmp	.+104    	; 0x1304 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    129c:	e7 30       	cpi	r30, 0x07	; 7
    129e:	e9 f0       	breq	.+58     	; 0x12da <analogWrite+0x8c>
    12a0:	e8 30       	cpi	r30, 0x08	; 8
    12a2:	19 f1       	breq	.+70     	; 0x12ea <analogWrite+0x9c>
    12a4:	e4 30       	cpi	r30, 0x04	; 4
    12a6:	49 f5       	brne	.+82     	; 0x12fa <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    12a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    12ac:	80 62       	ori	r24, 0x20	; 32
    12ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1B = val; // set pwm duty
    12b2:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    12b6:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				break;
    12ba:	24 c0       	rjmp	.+72     	; 0x1304 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    12bc:	84 b5       	in	r24, 0x24	; 36
    12be:	80 68       	ori	r24, 0x80	; 128
    12c0:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    12c2:	c7 bd       	out	0x27, r28	; 39
				break;
    12c4:	1f c0       	rjmp	.+62     	; 0x1304 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    12c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1A = val; // set pwm duty
    12d0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    12d4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
    12d8:	15 c0       	rjmp	.+42     	; 0x1304 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    12da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    12de:	80 68       	ori	r24, 0x80	; 128
    12e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2A = val; // set pwm duty
    12e4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				break;
    12e8:	0d c0       	rjmp	.+26     	; 0x1304 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    12ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    12ee:	80 62       	ori	r24, 0x20	; 32
    12f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2B = val; // set pwm duty
    12f4:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				break;
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    12fa:	c0 38       	cpi	r28, 0x80	; 128
    12fc:	d1 05       	cpc	r29, r1
    12fe:	0c f0       	brlt	.+2      	; 0x1302 <analogWrite+0xb4>
    1300:	b5 cf       	rjmp	.-150    	; 0x126c <analogWrite+0x1e>
    1302:	af cf       	rjmp	.-162    	; 0x1262 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	08 95       	ret

0000130c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	81 f0       	breq	.+32     	; 0x1330 <turnOffPWM+0x24>
    1310:	28 f4       	brcc	.+10     	; 0x131c <turnOffPWM+0x10>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	99 f0       	breq	.+38     	; 0x133c <turnOffPWM+0x30>
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	a1 f0       	breq	.+40     	; 0x1342 <turnOffPWM+0x36>
    131a:	08 95       	ret
    131c:	87 30       	cpi	r24, 0x07	; 7
    131e:	a9 f0       	breq	.+42     	; 0x134a <turnOffPWM+0x3e>
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	b9 f0       	breq	.+46     	; 0x1352 <turnOffPWM+0x46>
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	d1 f4       	brne	.+52     	; 0x135c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1328:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    132c:	8f 7d       	andi	r24, 0xDF	; 223
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1330:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1334:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1336:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    133a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    133c:	84 b5       	in	r24, 0x24	; 36
    133e:	8f 77       	andi	r24, 0x7F	; 127
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1342:	84 b5       	in	r24, 0x24	; 36
    1344:	8f 7d       	andi	r24, 0xDF	; 223
    1346:	84 bd       	out	0x24, r24	; 36
    1348:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    134a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    134e:	8f 77       	andi	r24, 0x7F	; 127
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1352:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1356:	8f 7d       	andi	r24, 0xDF	; 223
    1358:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    135c:	08 95       	ret

0000135e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	fc 01       	movw	r30, r24
    1366:	e4 58       	subi	r30, 0x84	; 132
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    136c:	fc 01       	movw	r30, r24
    136e:	e0 57       	subi	r30, 0x70	; 112
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1374:	88 23       	and	r24, r24
    1376:	61 f1       	breq	.+88     	; 0x13d0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	fc 01       	movw	r30, r24
    1380:	e2 55       	subi	r30, 0x52	; 82
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	c5 91       	lpm	r28, Z+
    1386:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1388:	fc 01       	movw	r30, r24
    138a:	ec 55       	subi	r30, 0x5C	; 92
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	a5 91       	lpm	r26, Z+
    1390:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1392:	61 11       	cpse	r22, r1
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1396:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1398:	f8 94       	cli
		*reg &= ~bit;
    139a:	88 81       	ld	r24, Y
    139c:	20 95       	com	r18
    139e:	82 23       	and	r24, r18
    13a0:	88 83       	st	Y, r24
		*out &= ~bit;
    13a2:	ec 91       	ld	r30, X
    13a4:	2e 23       	and	r18, r30
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    13a8:	62 30       	cpi	r22, 0x02	; 2
    13aa:	61 f4       	brne	.+24     	; 0x13c4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    13ac:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13ae:	f8 94       	cli
		*reg &= ~bit;
    13b0:	88 81       	ld	r24, Y
    13b2:	32 2f       	mov	r19, r18
    13b4:	30 95       	com	r19
    13b6:	83 23       	and	r24, r19
    13b8:	88 83       	st	Y, r24
		*out |= bit;
    13ba:	ec 91       	ld	r30, X
    13bc:	2e 2b       	or	r18, r30
    13be:	2c 93       	st	X, r18
		SREG = oldSREG;
    13c0:	9f bf       	out	0x3f, r25	; 63
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    13c4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    13c6:	f8 94       	cli
		*reg |= bit;
    13c8:	e8 81       	ld	r30, Y
    13ca:	2e 2b       	or	r18, r30
    13cc:	28 83       	st	Y, r18
		SREG = oldSREG;
    13ce:	8f bf       	out	0x3f, r24	; 63
	}
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	e8 59       	subi	r30, 0x98	; 152
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    13e8:	f9 01       	movw	r30, r18
    13ea:	e4 58       	subi	r30, 0x84	; 132
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    13f0:	f9 01       	movw	r30, r18
    13f2:	e0 57       	subi	r30, 0x70	; 112
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13f8:	cc 23       	and	r28, r28
    13fa:	c1 f0       	breq	.+48     	; 0x142c <digitalWrite+0x56>
    13fc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13fe:	81 11       	cpse	r24, r1
    1400:	0e 94 86 09 	call	0x130c	; 0x130c <turnOffPWM>

	out = portOutputRegister(port);
    1404:	ec 2f       	mov	r30, r28
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	ec 55       	subi	r30, 0x5C	; 92
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	a5 91       	lpm	r26, Z+
    1412:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1414:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1416:	f8 94       	cli

	if (val == LOW) {
    1418:	11 11       	cpse	r17, r1
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <digitalWrite+0x4e>
		*out &= ~bit;
    141c:	8c 91       	ld	r24, X
    141e:	d0 95       	com	r29
    1420:	d8 23       	and	r29, r24
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1424:	ec 91       	ld	r30, X
    1426:	de 2b       	or	r29, r30
    1428:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    142a:	9f bf       	out	0x3f, r25	; 63
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	08 95       	ret

00001434 <_Z10randomSeedm>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    1434:	61 15       	cp	r22, r1
    1436:	71 05       	cpc	r23, r1
    1438:	81 05       	cpc	r24, r1
    143a:	91 05       	cpc	r25, r1
    143c:	11 f0       	breq	.+4      	; 0x1442 <_Z10randomSeedm+0xe>
    srandom(seed);
    143e:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <srandom>
    1442:	08 95       	ret

00001444 <_Z6randoml>:
  }
}

long random(long howbig)
{
    1444:	cf 92       	push	r12
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
  if (howbig == 0) {
    144c:	61 15       	cp	r22, r1
    144e:	71 05       	cpc	r23, r1
    1450:	81 05       	cpc	r24, r1
    1452:	91 05       	cpc	r25, r1
    1454:	49 f0       	breq	.+18     	; 0x1468 <_Z6randoml+0x24>
    1456:	6b 01       	movw	r12, r22
    1458:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    145a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <random>
    145e:	a7 01       	movw	r20, r14
    1460:	96 01       	movw	r18, r12
    1462:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__divmodsi4>
    1466:	03 c0       	rjmp	.+6      	; 0x146e <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	08 95       	ret

00001478 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
  if (howsmall >= howbig) {
    1484:	62 17       	cp	r22, r18
    1486:	73 07       	cpc	r23, r19
    1488:	84 07       	cpc	r24, r20
    148a:	95 07       	cpc	r25, r21
    148c:	84 f4       	brge	.+32     	; 0x14ae <_Z6randomll+0x36>
    148e:	89 01       	movw	r16, r18
    1490:	9a 01       	movw	r18, r20
    1492:	6b 01       	movw	r12, r22
    1494:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1496:	c9 01       	movw	r24, r18
    1498:	b8 01       	movw	r22, r16
    149a:	6c 19       	sub	r22, r12
    149c:	7d 09       	sbc	r23, r13
    149e:	8e 09       	sbc	r24, r14
    14a0:	9f 09       	sbc	r25, r15
    14a2:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z6randoml>
    14a6:	6c 0d       	add	r22, r12
    14a8:	7d 1d       	adc	r23, r13
    14aa:	8e 1d       	adc	r24, r14
    14ac:	9f 1d       	adc	r25, r15
}
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	08 95       	ret

000014bc <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    14bc:	4f 92       	push	r4
    14be:	5f 92       	push	r5
    14c0:	6f 92       	push	r6
    14c2:	7f 92       	push	r7
    14c4:	af 92       	push	r10
    14c6:	bf 92       	push	r11
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	29 01       	movw	r4, r18
    14de:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	24 19       	sub	r18, r4
    14e6:	35 09       	sbc	r19, r5
    14e8:	46 09       	sbc	r20, r6
    14ea:	57 09       	sbc	r21, r7
    14ec:	89 89       	ldd	r24, Y+17	; 0x11
    14ee:	9a 89       	ldd	r25, Y+18	; 0x12
    14f0:	ab 89       	ldd	r26, Y+19	; 0x13
    14f2:	bc 89       	ldd	r27, Y+20	; 0x14
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	6a 19       	sub	r22, r10
    14fa:	7b 09       	sbc	r23, r11
    14fc:	8c 09       	sbc	r24, r12
    14fe:	9d 09       	sbc	r25, r13
    1500:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsi3>
    1504:	a8 01       	movw	r20, r16
    1506:	97 01       	movw	r18, r14
    1508:	24 19       	sub	r18, r4
    150a:	35 09       	sbc	r19, r5
    150c:	46 09       	sbc	r20, r6
    150e:	57 09       	sbc	r21, r7
    1510:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__divmodsi4>
    1514:	ca 01       	movw	r24, r20
    1516:	b9 01       	movw	r22, r18
    1518:	6a 0d       	add	r22, r10
    151a:	7b 1d       	adc	r23, r11
    151c:	8c 1d       	adc	r24, r12
    151e:	9d 1d       	adc	r25, r13
}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	af 90       	pop	r10
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	08 95       	ret

0000153e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    153e:	08 95       	ret

00001540 <__cmpsf2>:
    1540:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_cmp>
    1544:	08 f4       	brcc	.+2      	; 0x1548 <__cmpsf2+0x8>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	08 95       	ret

0000154a <__fp_cmp>:
    154a:	99 0f       	add	r25, r25
    154c:	00 08       	sbc	r0, r0
    154e:	55 0f       	add	r21, r21
    1550:	aa 0b       	sbc	r26, r26
    1552:	e0 e8       	ldi	r30, 0x80	; 128
    1554:	fe ef       	ldi	r31, 0xFE	; 254
    1556:	16 16       	cp	r1, r22
    1558:	17 06       	cpc	r1, r23
    155a:	e8 07       	cpc	r30, r24
    155c:	f9 07       	cpc	r31, r25
    155e:	c0 f0       	brcs	.+48     	; 0x1590 <__fp_cmp+0x46>
    1560:	12 16       	cp	r1, r18
    1562:	13 06       	cpc	r1, r19
    1564:	e4 07       	cpc	r30, r20
    1566:	f5 07       	cpc	r31, r21
    1568:	98 f0       	brcs	.+38     	; 0x1590 <__fp_cmp+0x46>
    156a:	62 1b       	sub	r22, r18
    156c:	73 0b       	sbc	r23, r19
    156e:	84 0b       	sbc	r24, r20
    1570:	95 0b       	sbc	r25, r21
    1572:	39 f4       	brne	.+14     	; 0x1582 <__fp_cmp+0x38>
    1574:	0a 26       	eor	r0, r26
    1576:	61 f0       	breq	.+24     	; 0x1590 <__fp_cmp+0x46>
    1578:	23 2b       	or	r18, r19
    157a:	24 2b       	or	r18, r20
    157c:	25 2b       	or	r18, r21
    157e:	21 f4       	brne	.+8      	; 0x1588 <__fp_cmp+0x3e>
    1580:	08 95       	ret
    1582:	0a 26       	eor	r0, r26
    1584:	09 f4       	brne	.+2      	; 0x1588 <__fp_cmp+0x3e>
    1586:	a1 40       	sbci	r26, 0x01	; 1
    1588:	a6 95       	lsr	r26
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	81 1d       	adc	r24, r1
    158e:	81 1d       	adc	r24, r1
    1590:	08 95       	ret

00001592 <__gesf2>:
    1592:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_cmp>
    1596:	08 f4       	brcc	.+2      	; 0x159a <__gesf2+0x8>
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	08 95       	ret

0000159c <__mulsf3>:
    159c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__mulsf3x>
    15a0:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
    15a4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
    15a8:	38 f0       	brcs	.+14     	; 0x15b8 <__mulsf3+0x1c>
    15aa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
    15ae:	20 f0       	brcs	.+8      	; 0x15b8 <__mulsf3+0x1c>
    15b0:	95 23       	and	r25, r21
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <__mulsf3+0x1c>
    15b4:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
    15b8:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>
    15bc:	11 24       	eor	r1, r1
    15be:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>

000015c2 <__mulsf3x>:
    15c2:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
    15c6:	70 f3       	brcs	.-36     	; 0x15a4 <__mulsf3+0x8>

000015c8 <__mulsf3_pse>:
    15c8:	95 9f       	mul	r25, r21
    15ca:	c1 f3       	breq	.-16     	; 0x15bc <__mulsf3+0x20>
    15cc:	95 0f       	add	r25, r21
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	55 1f       	adc	r21, r21
    15d2:	62 9f       	mul	r22, r18
    15d4:	f0 01       	movw	r30, r0
    15d6:	72 9f       	mul	r23, r18
    15d8:	bb 27       	eor	r27, r27
    15da:	f0 0d       	add	r31, r0
    15dc:	b1 1d       	adc	r27, r1
    15de:	63 9f       	mul	r22, r19
    15e0:	aa 27       	eor	r26, r26
    15e2:	f0 0d       	add	r31, r0
    15e4:	b1 1d       	adc	r27, r1
    15e6:	aa 1f       	adc	r26, r26
    15e8:	64 9f       	mul	r22, r20
    15ea:	66 27       	eor	r22, r22
    15ec:	b0 0d       	add	r27, r0
    15ee:	a1 1d       	adc	r26, r1
    15f0:	66 1f       	adc	r22, r22
    15f2:	82 9f       	mul	r24, r18
    15f4:	22 27       	eor	r18, r18
    15f6:	b0 0d       	add	r27, r0
    15f8:	a1 1d       	adc	r26, r1
    15fa:	62 1f       	adc	r22, r18
    15fc:	73 9f       	mul	r23, r19
    15fe:	b0 0d       	add	r27, r0
    1600:	a1 1d       	adc	r26, r1
    1602:	62 1f       	adc	r22, r18
    1604:	83 9f       	mul	r24, r19
    1606:	a0 0d       	add	r26, r0
    1608:	61 1d       	adc	r22, r1
    160a:	22 1f       	adc	r18, r18
    160c:	74 9f       	mul	r23, r20
    160e:	33 27       	eor	r19, r19
    1610:	a0 0d       	add	r26, r0
    1612:	61 1d       	adc	r22, r1
    1614:	23 1f       	adc	r18, r19
    1616:	84 9f       	mul	r24, r20
    1618:	60 0d       	add	r22, r0
    161a:	21 1d       	adc	r18, r1
    161c:	82 2f       	mov	r24, r18
    161e:	76 2f       	mov	r23, r22
    1620:	6a 2f       	mov	r22, r26
    1622:	11 24       	eor	r1, r1
    1624:	9f 57       	subi	r25, 0x7F	; 127
    1626:	50 40       	sbci	r21, 0x00	; 0
    1628:	9a f0       	brmi	.+38     	; 0x1650 <__mulsf3_pse+0x88>
    162a:	f1 f0       	breq	.+60     	; 0x1668 <__mulsf3_pse+0xa0>
    162c:	88 23       	and	r24, r24
    162e:	4a f0       	brmi	.+18     	; 0x1642 <__mulsf3_pse+0x7a>
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	bb 1f       	adc	r27, r27
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	91 50       	subi	r25, 0x01	; 1
    163e:	50 40       	sbci	r21, 0x00	; 0
    1640:	a9 f7       	brne	.-22     	; 0x162c <__mulsf3_pse+0x64>
    1642:	9e 3f       	cpi	r25, 0xFE	; 254
    1644:	51 05       	cpc	r21, r1
    1646:	80 f0       	brcs	.+32     	; 0x1668 <__mulsf3_pse+0xa0>
    1648:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
    164c:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
    1650:	5f 3f       	cpi	r21, 0xFF	; 255
    1652:	e4 f3       	brlt	.-8      	; 0x164c <__mulsf3_pse+0x84>
    1654:	98 3e       	cpi	r25, 0xE8	; 232
    1656:	d4 f3       	brlt	.-12     	; 0x164c <__mulsf3_pse+0x84>
    1658:	86 95       	lsr	r24
    165a:	77 95       	ror	r23
    165c:	67 95       	ror	r22
    165e:	b7 95       	ror	r27
    1660:	f7 95       	ror	r31
    1662:	e7 95       	ror	r30
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	c1 f7       	brne	.-16     	; 0x1658 <__mulsf3_pse+0x90>
    1668:	fe 2b       	or	r31, r30
    166a:	88 0f       	add	r24, r24
    166c:	91 1d       	adc	r25, r1
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret

00001676 <__unordsf2>:
    1676:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_cmp>
    167a:	88 0b       	sbc	r24, r24
    167c:	99 0b       	sbc	r25, r25
    167e:	08 95       	ret

00001680 <__mulsi3>:
    1680:	db 01       	movw	r26, r22
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	0e 94 91 0b 	call	0x1722	; 0x1722 <__muluhisi3>
    168a:	bf 91       	pop	r27
    168c:	af 91       	pop	r26
    168e:	a2 9f       	mul	r26, r18
    1690:	80 0d       	add	r24, r0
    1692:	91 1d       	adc	r25, r1
    1694:	a3 9f       	mul	r26, r19
    1696:	90 0d       	add	r25, r0
    1698:	b2 9f       	mul	r27, r18
    169a:	90 0d       	add	r25, r0
    169c:	11 24       	eor	r1, r1
    169e:	08 95       	ret

000016a0 <__udivmodsi4>:
    16a0:	a1 e2       	ldi	r26, 0x21	; 33
    16a2:	1a 2e       	mov	r1, r26
    16a4:	aa 1b       	sub	r26, r26
    16a6:	bb 1b       	sub	r27, r27
    16a8:	fd 01       	movw	r30, r26
    16aa:	0d c0       	rjmp	.+26     	; 0x16c6 <__udivmodsi4_ep>

000016ac <__udivmodsi4_loop>:
    16ac:	aa 1f       	adc	r26, r26
    16ae:	bb 1f       	adc	r27, r27
    16b0:	ee 1f       	adc	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	a2 17       	cp	r26, r18
    16b6:	b3 07       	cpc	r27, r19
    16b8:	e4 07       	cpc	r30, r20
    16ba:	f5 07       	cpc	r31, r21
    16bc:	20 f0       	brcs	.+8      	; 0x16c6 <__udivmodsi4_ep>
    16be:	a2 1b       	sub	r26, r18
    16c0:	b3 0b       	sbc	r27, r19
    16c2:	e4 0b       	sbc	r30, r20
    16c4:	f5 0b       	sbc	r31, r21

000016c6 <__udivmodsi4_ep>:
    16c6:	66 1f       	adc	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	88 1f       	adc	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	1a 94       	dec	r1
    16d0:	69 f7       	brne	.-38     	; 0x16ac <__udivmodsi4_loop>
    16d2:	60 95       	com	r22
    16d4:	70 95       	com	r23
    16d6:	80 95       	com	r24
    16d8:	90 95       	com	r25
    16da:	9b 01       	movw	r18, r22
    16dc:	ac 01       	movw	r20, r24
    16de:	bd 01       	movw	r22, r26
    16e0:	cf 01       	movw	r24, r30
    16e2:	08 95       	ret

000016e4 <__divmodsi4>:
    16e4:	05 2e       	mov	r0, r21
    16e6:	97 fb       	bst	r25, 7
    16e8:	1e f4       	brtc	.+6      	; 0x16f0 <__divmodsi4+0xc>
    16ea:	00 94       	com	r0
    16ec:	0e 94 89 0b 	call	0x1712	; 0x1712 <__negsi2>
    16f0:	57 fd       	sbrc	r21, 7
    16f2:	07 d0       	rcall	.+14     	; 0x1702 <__divmodsi4_neg2>
    16f4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__udivmodsi4>
    16f8:	07 fc       	sbrc	r0, 7
    16fa:	03 d0       	rcall	.+6      	; 0x1702 <__divmodsi4_neg2>
    16fc:	4e f4       	brtc	.+18     	; 0x1710 <__divmodsi4_exit>
    16fe:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__negsi2>

00001702 <__divmodsi4_neg2>:
    1702:	50 95       	com	r21
    1704:	40 95       	com	r20
    1706:	30 95       	com	r19
    1708:	21 95       	neg	r18
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	4f 4f       	sbci	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255

00001710 <__divmodsi4_exit>:
    1710:	08 95       	ret

00001712 <__negsi2>:
    1712:	90 95       	com	r25
    1714:	80 95       	com	r24
    1716:	70 95       	com	r23
    1718:	61 95       	neg	r22
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8f 4f       	sbci	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	08 95       	ret

00001722 <__muluhisi3>:
    1722:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__umulhisi3>
    1726:	a5 9f       	mul	r26, r21
    1728:	90 0d       	add	r25, r0
    172a:	b4 9f       	mul	r27, r20
    172c:	90 0d       	add	r25, r0
    172e:	a4 9f       	mul	r26, r20
    1730:	80 0d       	add	r24, r0
    1732:	91 1d       	adc	r25, r1
    1734:	11 24       	eor	r1, r1
    1736:	08 95       	ret

00001738 <__tablejump2__>:
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	05 90       	lpm	r0, Z+
    173e:	f4 91       	lpm	r31, Z
    1740:	e0 2d       	mov	r30, r0
    1742:	09 94       	ijmp

00001744 <__umulhisi3>:
    1744:	a2 9f       	mul	r26, r18
    1746:	b0 01       	movw	r22, r0
    1748:	b3 9f       	mul	r27, r19
    174a:	c0 01       	movw	r24, r0
    174c:	a3 9f       	mul	r26, r19
    174e:	70 0d       	add	r23, r0
    1750:	81 1d       	adc	r24, r1
    1752:	11 24       	eor	r1, r1
    1754:	91 1d       	adc	r25, r1
    1756:	b2 9f       	mul	r27, r18
    1758:	70 0d       	add	r23, r0
    175a:	81 1d       	adc	r24, r1
    175c:	11 24       	eor	r1, r1
    175e:	91 1d       	adc	r25, r1
    1760:	08 95       	ret

00001762 <malloc>:
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	91 05       	cpc	r25, r1
    176e:	10 f4       	brcc	.+4      	; 0x1774 <malloc+0x12>
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <__flp>
    1778:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <__flp+0x1>
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	19 f1       	breq	.+70     	; 0x17ce <malloc+0x6c>
    1788:	40 81       	ld	r20, Z
    178a:	51 81       	ldd	r21, Z+1	; 0x01
    178c:	02 81       	ldd	r16, Z+2	; 0x02
    178e:	13 81       	ldd	r17, Z+3	; 0x03
    1790:	48 17       	cp	r20, r24
    1792:	59 07       	cpc	r21, r25
    1794:	c8 f0       	brcs	.+50     	; 0x17c8 <malloc+0x66>
    1796:	84 17       	cp	r24, r20
    1798:	95 07       	cpc	r25, r21
    179a:	69 f4       	brne	.+26     	; 0x17b6 <malloc+0x54>
    179c:	10 97       	sbiw	r26, 0x00	; 0
    179e:	31 f0       	breq	.+12     	; 0x17ac <malloc+0x4a>
    17a0:	12 96       	adiw	r26, 0x02	; 2
    17a2:	0c 93       	st	X, r16
    17a4:	12 97       	sbiw	r26, 0x02	; 2
    17a6:	13 96       	adiw	r26, 0x03	; 3
    17a8:	1c 93       	st	X, r17
    17aa:	27 c0       	rjmp	.+78     	; 0x17fa <malloc+0x98>
    17ac:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <__flp>
    17b0:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <__flp+0x1>
    17b4:	22 c0       	rjmp	.+68     	; 0x17fa <malloc+0x98>
    17b6:	21 15       	cp	r18, r1
    17b8:	31 05       	cpc	r19, r1
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <malloc+0x60>
    17bc:	42 17       	cp	r20, r18
    17be:	53 07       	cpc	r21, r19
    17c0:	18 f4       	brcc	.+6      	; 0x17c8 <malloc+0x66>
    17c2:	9a 01       	movw	r18, r20
    17c4:	bd 01       	movw	r22, r26
    17c6:	ef 01       	movw	r28, r30
    17c8:	df 01       	movw	r26, r30
    17ca:	f8 01       	movw	r30, r16
    17cc:	db cf       	rjmp	.-74     	; 0x1784 <malloc+0x22>
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	f9 f0       	breq	.+62     	; 0x1812 <malloc+0xb0>
    17d4:	28 1b       	sub	r18, r24
    17d6:	39 0b       	sbc	r19, r25
    17d8:	24 30       	cpi	r18, 0x04	; 4
    17da:	31 05       	cpc	r19, r1
    17dc:	80 f4       	brcc	.+32     	; 0x17fe <malloc+0x9c>
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	61 15       	cp	r22, r1
    17e4:	71 05       	cpc	r23, r1
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <malloc+0x8e>
    17e8:	fb 01       	movw	r30, r22
    17ea:	93 83       	std	Z+3, r25	; 0x03
    17ec:	82 83       	std	Z+2, r24	; 0x02
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <malloc+0x96>
    17f0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__flp+0x1>
    17f4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__flp>
    17f8:	fe 01       	movw	r30, r28
    17fa:	32 96       	adiw	r30, 0x02	; 2
    17fc:	44 c0       	rjmp	.+136    	; 0x1886 <malloc+0x124>
    17fe:	fe 01       	movw	r30, r28
    1800:	e2 0f       	add	r30, r18
    1802:	f3 1f       	adc	r31, r19
    1804:	81 93       	st	Z+, r24
    1806:	91 93       	st	Z+, r25
    1808:	22 50       	subi	r18, 0x02	; 2
    180a:	31 09       	sbc	r19, r1
    180c:	39 83       	std	Y+1, r19	; 0x01
    180e:	28 83       	st	Y, r18
    1810:	3a c0       	rjmp	.+116    	; 0x1886 <malloc+0x124>
    1812:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__brkval>
    1816:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__brkval+0x1>
    181a:	23 2b       	or	r18, r19
    181c:	41 f4       	brne	.+16     	; 0x182e <malloc+0xcc>
    181e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1822:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1826:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__brkval+0x1>
    182a:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__brkval>
    182e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1832:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1836:	21 15       	cp	r18, r1
    1838:	31 05       	cpc	r19, r1
    183a:	41 f4       	brne	.+16     	; 0x184c <malloc+0xea>
    183c:	2d b7       	in	r18, 0x3d	; 61
    183e:	3e b7       	in	r19, 0x3e	; 62
    1840:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1844:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1848:	24 1b       	sub	r18, r20
    184a:	35 0b       	sbc	r19, r21
    184c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <__brkval>
    1850:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <__brkval+0x1>
    1854:	e2 17       	cp	r30, r18
    1856:	f3 07       	cpc	r31, r19
    1858:	a0 f4       	brcc	.+40     	; 0x1882 <malloc+0x120>
    185a:	2e 1b       	sub	r18, r30
    185c:	3f 0b       	sbc	r19, r31
    185e:	28 17       	cp	r18, r24
    1860:	39 07       	cpc	r19, r25
    1862:	78 f0       	brcs	.+30     	; 0x1882 <malloc+0x120>
    1864:	ac 01       	movw	r20, r24
    1866:	4e 5f       	subi	r20, 0xFE	; 254
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	24 17       	cp	r18, r20
    186c:	35 07       	cpc	r19, r21
    186e:	48 f0       	brcs	.+18     	; 0x1882 <malloc+0x120>
    1870:	4e 0f       	add	r20, r30
    1872:	5f 1f       	adc	r21, r31
    1874:	50 93 8f 01 	sts	0x018F, r21	; 0x80018f <__brkval+0x1>
    1878:	40 93 8e 01 	sts	0x018E, r20	; 0x80018e <__brkval>
    187c:	81 93       	st	Z+, r24
    187e:	91 93       	st	Z+, r25
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <malloc+0x124>
    1882:	e0 e0       	ldi	r30, 0x00	; 0
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	cf 01       	movw	r24, r30
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	08 95       	ret

00001892 <free>:
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	09 f4       	brne	.+2      	; 0x189c <free+0xa>
    189a:	81 c0       	rjmp	.+258    	; 0x199e <free+0x10c>
    189c:	fc 01       	movw	r30, r24
    189e:	32 97       	sbiw	r30, 0x02	; 2
    18a0:	13 82       	std	Z+3, r1	; 0x03
    18a2:	12 82       	std	Z+2, r1	; 0x02
    18a4:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <__flp>
    18a8:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <__flp+0x1>
    18ac:	10 97       	sbiw	r26, 0x00	; 0
    18ae:	81 f4       	brne	.+32     	; 0x18d0 <free+0x3e>
    18b0:	20 81       	ld	r18, Z
    18b2:	31 81       	ldd	r19, Z+1	; 0x01
    18b4:	82 0f       	add	r24, r18
    18b6:	93 1f       	adc	r25, r19
    18b8:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__brkval>
    18bc:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__brkval+0x1>
    18c0:	28 17       	cp	r18, r24
    18c2:	39 07       	cpc	r19, r25
    18c4:	51 f5       	brne	.+84     	; 0x191a <free+0x88>
    18c6:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <__brkval+0x1>
    18ca:	e0 93 8e 01 	sts	0x018E, r30	; 0x80018e <__brkval>
    18ce:	67 c0       	rjmp	.+206    	; 0x199e <free+0x10c>
    18d0:	ed 01       	movw	r28, r26
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	ce 17       	cp	r28, r30
    18d8:	df 07       	cpc	r29, r31
    18da:	40 f4       	brcc	.+16     	; 0x18ec <free+0x5a>
    18dc:	4a 81       	ldd	r20, Y+2	; 0x02
    18de:	5b 81       	ldd	r21, Y+3	; 0x03
    18e0:	9e 01       	movw	r18, r28
    18e2:	41 15       	cp	r20, r1
    18e4:	51 05       	cpc	r21, r1
    18e6:	f1 f0       	breq	.+60     	; 0x1924 <free+0x92>
    18e8:	ea 01       	movw	r28, r20
    18ea:	f5 cf       	rjmp	.-22     	; 0x18d6 <free+0x44>
    18ec:	d3 83       	std	Z+3, r29	; 0x03
    18ee:	c2 83       	std	Z+2, r28	; 0x02
    18f0:	40 81       	ld	r20, Z
    18f2:	51 81       	ldd	r21, Z+1	; 0x01
    18f4:	84 0f       	add	r24, r20
    18f6:	95 1f       	adc	r25, r21
    18f8:	c8 17       	cp	r28, r24
    18fa:	d9 07       	cpc	r29, r25
    18fc:	59 f4       	brne	.+22     	; 0x1914 <free+0x82>
    18fe:	88 81       	ld	r24, Y
    1900:	99 81       	ldd	r25, Y+1	; 0x01
    1902:	84 0f       	add	r24, r20
    1904:	95 1f       	adc	r25, r21
    1906:	02 96       	adiw	r24, 0x02	; 2
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	9b 81       	ldd	r25, Y+3	; 0x03
    1910:	93 83       	std	Z+3, r25	; 0x03
    1912:	82 83       	std	Z+2, r24	; 0x02
    1914:	21 15       	cp	r18, r1
    1916:	31 05       	cpc	r19, r1
    1918:	29 f4       	brne	.+10     	; 0x1924 <free+0x92>
    191a:	f0 93 91 01 	sts	0x0191, r31	; 0x800191 <__flp+0x1>
    191e:	e0 93 90 01 	sts	0x0190, r30	; 0x800190 <__flp>
    1922:	3d c0       	rjmp	.+122    	; 0x199e <free+0x10c>
    1924:	e9 01       	movw	r28, r18
    1926:	fb 83       	std	Y+3, r31	; 0x03
    1928:	ea 83       	std	Y+2, r30	; 0x02
    192a:	49 91       	ld	r20, Y+
    192c:	59 91       	ld	r21, Y+
    192e:	c4 0f       	add	r28, r20
    1930:	d5 1f       	adc	r29, r21
    1932:	ec 17       	cp	r30, r28
    1934:	fd 07       	cpc	r31, r29
    1936:	61 f4       	brne	.+24     	; 0x1950 <free+0xbe>
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	84 0f       	add	r24, r20
    193e:	95 1f       	adc	r25, r21
    1940:	02 96       	adiw	r24, 0x02	; 2
    1942:	e9 01       	movw	r28, r18
    1944:	99 83       	std	Y+1, r25	; 0x01
    1946:	88 83       	st	Y, r24
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	9b 83       	std	Y+3, r25	; 0x03
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	e0 e0       	ldi	r30, 0x00	; 0
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	8d 91       	ld	r24, X+
    1958:	9c 91       	ld	r25, X
    195a:	13 97       	sbiw	r26, 0x03	; 3
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	19 f0       	breq	.+6      	; 0x1966 <free+0xd4>
    1960:	fd 01       	movw	r30, r26
    1962:	dc 01       	movw	r26, r24
    1964:	f7 cf       	rjmp	.-18     	; 0x1954 <free+0xc2>
    1966:	8d 91       	ld	r24, X+
    1968:	9c 91       	ld	r25, X
    196a:	11 97       	sbiw	r26, 0x01	; 1
    196c:	9d 01       	movw	r18, r26
    196e:	2e 5f       	subi	r18, 0xFE	; 254
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	82 0f       	add	r24, r18
    1974:	93 1f       	adc	r25, r19
    1976:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__brkval>
    197a:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__brkval+0x1>
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	69 f4       	brne	.+26     	; 0x199e <free+0x10c>
    1984:	30 97       	sbiw	r30, 0x00	; 0
    1986:	29 f4       	brne	.+10     	; 0x1992 <free+0x100>
    1988:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <__flp+0x1>
    198c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__flp>
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <free+0x104>
    1992:	13 82       	std	Z+3, r1	; 0x03
    1994:	12 82       	std	Z+2, r1	; 0x02
    1996:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <__brkval+0x1>
    199a:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <__brkval>
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <random_r>:
    19a4:	8f 92       	push	r8
    19a6:	9f 92       	push	r9
    19a8:	af 92       	push	r10
    19aa:	bf 92       	push	r11
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	ec 01       	movw	r28, r24
    19ba:	68 81       	ld	r22, Y
    19bc:	79 81       	ldd	r23, Y+1	; 0x01
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	61 15       	cp	r22, r1
    19c4:	71 05       	cpc	r23, r1
    19c6:	81 05       	cpc	r24, r1
    19c8:	91 05       	cpc	r25, r1
    19ca:	21 f4       	brne	.+8      	; 0x19d4 <random_r+0x30>
    19cc:	64 e2       	ldi	r22, 0x24	; 36
    19ce:	79 ed       	ldi	r23, 0xD9	; 217
    19d0:	8b e5       	ldi	r24, 0x5B	; 91
    19d2:	97 e0       	ldi	r25, 0x07	; 7
    19d4:	2d e1       	ldi	r18, 0x1D	; 29
    19d6:	33 ef       	ldi	r19, 0xF3	; 243
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__divmodsi4>
    19e0:	49 01       	movw	r8, r18
    19e2:	5a 01       	movw	r10, r20
    19e4:	9b 01       	movw	r18, r22
    19e6:	ac 01       	movw	r20, r24
    19e8:	a7 ea       	ldi	r26, 0xA7	; 167
    19ea:	b1 e4       	ldi	r27, 0x41	; 65
    19ec:	0e 94 91 0b 	call	0x1722	; 0x1722 <__muluhisi3>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
    19f4:	ac ee       	ldi	r26, 0xEC	; 236
    19f6:	b4 ef       	ldi	r27, 0xF4	; 244
    19f8:	a5 01       	movw	r20, r10
    19fa:	94 01       	movw	r18, r8
    19fc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulohisi3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8c 0d       	add	r24, r12
    1a06:	9d 1d       	adc	r25, r13
    1a08:	ae 1d       	adc	r26, r14
    1a0a:	bf 1d       	adc	r27, r15
    1a0c:	b7 ff       	sbrs	r27, 7
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <random_r+0x72>
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	a1 09       	sbc	r26, r1
    1a14:	b0 48       	sbci	r27, 0x80	; 128
    1a16:	88 83       	st	Y, r24
    1a18:	99 83       	std	Y+1, r25	; 0x01
    1a1a:	aa 83       	std	Y+2, r26	; 0x02
    1a1c:	bb 83       	std	Y+3, r27	; 0x03
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	9f 77       	andi	r25, 0x7F	; 127
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	08 95       	ret

00001a3a <random>:
    1a3a:	8f 92       	push	r8
    1a3c:	9f 92       	push	r9
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    1a4e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    1a52:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    1a56:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    1a5a:	61 15       	cp	r22, r1
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	81 05       	cpc	r24, r1
    1a60:	91 05       	cpc	r25, r1
    1a62:	21 f4       	brne	.+8      	; 0x1a6c <random+0x32>
    1a64:	64 e2       	ldi	r22, 0x24	; 36
    1a66:	79 ed       	ldi	r23, 0xD9	; 217
    1a68:	8b e5       	ldi	r24, 0x5B	; 91
    1a6a:	97 e0       	ldi	r25, 0x07	; 7
    1a6c:	2d e1       	ldi	r18, 0x1D	; 29
    1a6e:	33 ef       	ldi	r19, 0xF3	; 243
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__divmodsi4>
    1a78:	49 01       	movw	r8, r18
    1a7a:	5a 01       	movw	r10, r20
    1a7c:	9b 01       	movw	r18, r22
    1a7e:	ac 01       	movw	r20, r24
    1a80:	a7 ea       	ldi	r26, 0xA7	; 167
    1a82:	b1 e4       	ldi	r27, 0x41	; 65
    1a84:	0e 94 91 0b 	call	0x1722	; 0x1722 <__muluhisi3>
    1a88:	6b 01       	movw	r12, r22
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	ac ee       	ldi	r26, 0xEC	; 236
    1a8e:	b4 ef       	ldi	r27, 0xF4	; 244
    1a90:	a5 01       	movw	r20, r10
    1a92:	94 01       	movw	r18, r8
    1a94:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulohisi3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8c 0d       	add	r24, r12
    1a9e:	9d 1d       	adc	r25, r13
    1aa0:	ae 1d       	adc	r26, r14
    1aa2:	bf 1d       	adc	r27, r15
    1aa4:	b7 ff       	sbrs	r27, 7
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <random+0x74>
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	a1 09       	sbc	r26, r1
    1aac:	b0 48       	sbci	r27, 0x80	; 128
    1aae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1ab2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1ab6:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1aba:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	9f 77       	andi	r25, 0x7F	; 127
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	08 95       	ret

00001ad6 <srandom>:
    1ad6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    1ada:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    1ade:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    1ae2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    1ae6:	08 95       	ret

00001ae8 <__mulshisi3>:
    1ae8:	b7 ff       	sbrs	r27, 7
    1aea:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__muluhisi3>

00001aee <__mulohisi3>:
    1aee:	0e 94 91 0b 	call	0x1722	; 0x1722 <__muluhisi3>
    1af2:	82 1b       	sub	r24, r18
    1af4:	93 0b       	sbc	r25, r19
    1af6:	08 95       	ret

00001af8 <_exit>:
    1af8:	f8 94       	cli

00001afa <__stop_program>:
    1afa:	ff cf       	rjmp	.-2      	; 0x1afa <__stop_program>
