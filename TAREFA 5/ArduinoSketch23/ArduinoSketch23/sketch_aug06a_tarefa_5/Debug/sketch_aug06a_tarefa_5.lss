
sketch_aug06a_tarefa_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000500  00800100  00003296  0000332a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c9  00800600  00800600  0000382a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000382a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000385c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f8  00000000  00000000  0000389c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002fb82  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e7f  00000000  00000000  00033c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000066b8  00000000  00000000  00038a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ffc  00000000  00000000  0003f150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000413b  00000000  00000000  0004114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c58f  00000000  00000000  00045287  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000878  00000000  00000000  00051816  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__ctors_end>
       4:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
       8:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
       c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      10:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      14:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      18:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      1c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      20:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_8>
      24:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      28:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      2c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      30:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      34:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      38:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      3c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      40:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__vector_16>
      44:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      48:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__vector_18>
      4c:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <__vector_19>
      50:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      54:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      58:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      5c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      60:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      64:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	20 6f       	ori	r18, 0xF0	; 240
      6a:	72 20       	and	r7, r2
	...

0000006d <_ZZN6IRrecv17decodeBiPhaseDataEhhhjE3__c_0>:
      6d:	20 69 73 20 6e 6f 74 20 00                           is not .

00000076 <_ZZN6IRrecv17decodeBiPhaseDataEhhhjE3__c>:
      76:	53 70 61 63 65 3d 00                                Space=.

0000007d <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_8>:
      7d:	20 6f 72 20 00                                       or .

00000082 <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_7>:
      82:	20 69 73 20 6e 6f 74 20 00                           is not .

0000008b <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_6>:
      8b:	53 70 61 63 65 3d 00                                Space=.

00000092 <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_5>:
      92:	20 69 73 20 6e 6f 74 20 00                           is not .

0000009b <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_4>:
      9b:	4d 61 72 6b 3d 00                                   Mark=.

000000a1 <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_3>:
      a1:	20 6f 72 20 00                                       or .

000000a6 <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_2>:
      a6:	20 69 73 20 6e 6f 74 20 00                           is not .

000000af <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_1>:
      af:	53 70 61 63 65 3d 00                                Space=.

000000b6 <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c_0>:
      b6:	20 69 73 20 6e 6f 74 20 00                           is not .

000000bf <_ZZN6IRrecv23decodePulseDistanceDataEhhjjjbE3__c>:
      bf:	4d 61 72 6b 3d 00                                   Mark=.

000000c5 <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_8>:
      c5:	20 69 73 20 6e 6f 74 20 00                           is not .

000000ce <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_7>:
      ce:	53 70 61 63 65 3d 00                                Space=.

000000d5 <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_6>:
      d5:	20 6f 72 20 00                                       or .

000000da <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_5>:
      da:	20 69 73 20 6e 6f 74 20 00                           is not .

000000e3 <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_4>:
      e3:	4d 61 72 6b 3d 00                                   Mark=.

000000e9 <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_3>:
      e9:	20 69 73 20 6e 6f 74 20 00                           is not .

000000f2 <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_2>:
      f2:	53 70 61 63 65 3d 00                                Space=.

000000f9 <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_1>:
      f9:	20 6f 72 20 00                                       or .

000000fe <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c_0>:
      fe:	20 69 73 20 6e 6f 74 20 00                           is not .

00000107 <_ZZN6IRrecv20decodePulseWidthDataEhhjjjbE3__c>:
     107:	4d 61 72 6b 3d 00                                   Mark=.

0000010d <_ZZN6IRrecv14decodeBoseWaveEvE3__c>:
     10d:	53 74 6f 70 20 62 69 74 20 6d 61 72 6b 20 6c 65     Stop bit mark le
     11d:	6e 67 74 68 20 69 73 20 77 72 6f 6e 67 00           ngth is wrong.

0000012b <_ZZN6IRrecv11decodeDenonEvE3__c>:
     12b:	53 74 6f 70 20 62 69 74 20 6d 61 72 6b 20 6c 65     Stop bit mark le
     13b:	6e 67 74 68 20 69 73 20 77 72 6f 6e 67 00           ngth is wrong.

00000149 <_ZZN6IRrecv9decodeJVCEvE3__c_0>:
     149:	44 65 63 6f 64 65 20 66 61 69 6c 65 64 00           Decode failed.

00000157 <_ZZN6IRrecv9decodeJVCEvE3__c>:
     157:	4a 56 43 3a 20 00                                   JVC: .

0000015d <_ZZN6IRrecv24decodeLegoPowerFunctionsEvE3__c>:
     15d:	53 74 6f 70 20 62 69 74 20 6d 61 72 6b 20 6c 65     Stop bit mark le
     16d:	6e 67 74 68 20 69 73 20 77 72 6f 6e 67 00           ngth is wrong.

0000017b <_ZZN6IRrecv8decodeLGEvE3__c_5>:
     17b:	4c 47 3a 20 00                                      LG: .

00000180 <_ZZN6IRrecv8decodeLGEvE3__c_4>:
     180:	53 74 6f 70 20 62 69 74 20 6d 61 72 6b 20 6c 65     Stop bit mark le
     190:	6e 67 74 68 20 69 73 20 77 72 6f 6e 67 00           ngth is wrong.

0000019e <_ZZN6IRrecv8decodeLGEvE3__c_3>:
     19e:	4c 47 3a 20 00                                      LG: .

000001a3 <_ZZN6IRrecv8decodeLGEvE3__c_2>:
     1a3:	44 65 63 6f 64 65 20 66 61 69 6c 65 64 00           Decode failed.

000001b1 <_ZZN6IRrecv8decodeLGEvE3__c_1>:
     1b1:	4c 47 3a 20 00                                      LG: .

000001b6 <_ZZN6IRrecv8decodeLGEvE3__c_0>:
     1b6:	48 65 61 64 65 72 20 73 70 61 63 65 20 6c 65 6e     Header space len
     1c6:	67 74 68 20 69 73 20 77 72 6f 6e 67 00              gth is wrong.

000001d3 <_ZZN6IRrecv8decodeLGEvE3__c>:
     1d3:	4c 47 3a 20 00                                      LG: .

000001d8 <_ZZN6IRrecv9decodeNECEvE3__c_7>:
     1d8:	20 69 73 20 6e 6f 74 20 69 6e 76 65 72 74 65 64      is not inverted
     1e8:	20 76 61 6c 75 65 20 6f 66 20 30 78 00               value of 0x.

000001f5 <_ZZN6IRrecv9decodeNECEvE3__c_6>:
     1f5:	43 6f 6d 6d 61 6e 64 3d 30 78 00                    Command=0x.

00000200 <_ZZN6IRrecv9decodeNECEvE3__c_5>:
     200:	4e 45 43 3a 20 00                                   NEC: .

00000206 <_ZZN6IRrecv9decodeNECEvE3__c_4>:
     206:	53 74 6f 70 20 62 69 74 20 6d 61 72 6b 20 6c 65     Stop bit mark le
     216:	6e 67 74 68 20 69 73 20 77 72 6f 6e 67 00           ngth is wrong.

00000224 <_ZZN6IRrecv9decodeNECEvE3__c_3>:
     224:	4e 45 43 3a 20 00                                   NEC: .

0000022a <_ZZN6IRrecv9decodeNECEvE3__c_2>:
     22a:	44 65 63 6f 64 65 20 66 61 69 6c 65 64 00           Decode failed.

00000238 <_ZZN6IRrecv9decodeNECEvE3__c_1>:
     238:	4e 45 43 3a 20 00                                   NEC: .

0000023e <_ZZN6IRrecv9decodeNECEvE3__c_0>:
     23e:	48 65 61 64 65 72 20 73 70 61 63 65 20 6c 65 6e     Header space len
     24e:	67 74 68 20 69 73 20 77 72 6f 6e 67 00              gth is wrong.

0000025b <_ZZN6IRrecv9decodeNECEvE3__c>:
     25b:	4e 45 43 3a 20 00                                   NEC: .

00000261 <_ZZN6IRrecv9decodeRC6EvE3__c_11>:
     261:	44 65 63 6f 64 65 20 66 61 69 6c 65 64 00           Decode failed.

0000026f <_ZZN6IRrecv9decodeRC6EvE3__c_10>:
     26f:	52 43 36 3a 20 00                                   RC6: .

00000275 <_ZZN6IRrecv9decodeRC6EvE3__c_9>:
     275:	54 6f 67 67 6c 65 20 6d 61 72 6b 20 6f 72 20 73     Toggle mark or s
     285:	70 61 63 65 20 6c 65 6e 67 74 68 20 69 73 20 77     pace length is w
     295:	72 6f 6e 67 00                                      rong.

0000029a <_ZZN6IRrecv9decodeRC6EvE3__c_8>:
     29a:	52 43 36 3a 20 00                                   RC6: .

000002a0 <_ZZN6IRrecv9decodeRC6EvE3__c_7>:
     2a0:	54 6f 67 67 6c 65 20 6d 61 72 6b 20 6f 72 20 73     Toggle mark or s
     2b0:	70 61 63 65 20 6c 65 6e 67 74 68 20 69 73 20 77     pace length is w
     2c0:	72 6f 6e 67 00                                      rong.

000002c5 <_ZZN6IRrecv9decodeRC6EvE3__c_6>:
     2c5:	52 43 36 3a 20 00                                   RC6: .

000002cb <_ZZN6IRrecv9decodeRC6EvE3__c_5>:
     2cb:	54 6f 67 67 6c 65 20 6d 61 72 6b 20 6f 72 20 73     Toggle mark or s
     2db:	70 61 63 65 20 6c 65 6e 67 74 68 20 69 73 20 77     pace length is w
     2eb:	72 6f 6e 67 00                                      rong.

000002f0 <_ZZN6IRrecv9decodeRC6EvE3__c_4>:
     2f0:	52 43 36 3a 20 00                                   RC6: .

000002f6 <_ZZN6IRrecv9decodeRC6EvE3__c_3>:
     2f6:	20 69 73 20 6e 6f 74 20 34 00                        is not 4.

00000300 <_ZZN6IRrecv9decodeRC6EvE3__c_2>:
     300:	50 72 65 61 6d 62 6c 65 20 63 6f 6e 74 65 6e 74     Preamble content
     310:	20 00                                                .

00000312 <_ZZN6IRrecv9decodeRC6EvE3__c_1>:
     312:	52 43 36 3a 20 00                                   RC6: .

00000318 <_ZZN6IRrecv9decodeRC6EvE3__c_0>:
     318:	50 72 65 61 6d 62 6c 65 20 6d 61 72 6b 20 6f 72     Preamble mark or
     328:	20 73 70 61 63 65 20 6c 65 6e 67 74 68 20 69 73      space length is
     338:	20 77 72 6f 6e 67 00                                 wrong.

0000033f <_ZZN6IRrecv9decodeRC6EvE3__c>:
     33f:	52 43 36 3a 20 00                                   RC6: .

00000345 <_ZZN6IRrecv13decodeWhynterEvE3__c_1>:
     345:	53 74 6f 70 20 62 69 74 20 6d 61 72 6b 20 6c 65     Stop bit mark le
     355:	6e 67 74 68 20 69 73 20 77 72 6f 6e 67 00           ngth is wrong.

00000363 <_ZZN6IRrecv13decodeWhynterEvE3__c_0>:
     363:	48 65 61 64 65 72 20 6d 61 72 6b 20 6f 72 20 73     Header mark or s
     373:	70 61 63 65 20 6c 65 6e 67 74 68 20 69 73 20 77     pace length is w
     383:	72 6f 6e 67 00                                      rong.

00000388 <_ZZN6IRrecv13decodeWhynterEvE3__c>:
     388:	57 68 79 6e 74 65 72 3a 20 00                       Whynter: .

00000392 <digital_pin_to_timer_PGM>:
     392:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3a2:	00 00 00 00                                         ....

000003a6 <digital_pin_to_bit_mask_PGM>:
     3a6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3b6:	04 08 10 20                                         ... 

000003ba <digital_pin_to_port_PGM>:
     3ba:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3ca:	03 03 03 03                                         ....

000003ce <port_to_input_PGM>:
     3ce:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003d8 <port_to_output_PGM>:
     3d8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003e2 <port_to_mode_PGM>:
     3e2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003ec <__ctors_start>:
     3ec:	a1 08       	sbc	r10, r1
     3ee:	49 15       	cp	r20, r9

000003f0 <__ctors_end>:
     3f0:	11 24       	eor	r1, r1
     3f2:	1f be       	out	0x3f, r1	; 63
     3f4:	cf ef       	ldi	r28, 0xFF	; 255
     3f6:	d8 e0       	ldi	r29, 0x08	; 8
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	cd bf       	out	0x3d, r28	; 61

000003fc <__do_copy_data>:
     3fc:	16 e0       	ldi	r17, 0x06	; 6
     3fe:	a0 e0       	ldi	r26, 0x00	; 0
     400:	b1 e0       	ldi	r27, 0x01	; 1
     402:	e6 e9       	ldi	r30, 0x96	; 150
     404:	f2 e3       	ldi	r31, 0x32	; 50
     406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     408:	05 90       	lpm	r0, Z+
     40a:	0d 92       	st	X+, r0
     40c:	a0 30       	cpi	r26, 0x00	; 0
     40e:	b1 07       	cpc	r27, r17
     410:	d9 f7       	brne	.-10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>

00000412 <__do_clear_bss>:
     412:	27 e0       	ldi	r18, 0x07	; 7
     414:	a0 e0       	ldi	r26, 0x00	; 0
     416:	b6 e0       	ldi	r27, 0x06	; 6
     418:	01 c0       	rjmp	.+2      	; 0x41c <.do_clear_bss_start>

0000041a <.do_clear_bss_loop>:
     41a:	1d 92       	st	X+, r1

0000041c <.do_clear_bss_start>:
     41c:	a9 3c       	cpi	r26, 0xC9	; 201
     41e:	b2 07       	cpc	r27, r18
     420:	e1 f7       	brne	.-8      	; 0x41a <.do_clear_bss_loop>

00000422 <__do_global_ctors>:
     422:	11 e0       	ldi	r17, 0x01	; 1
     424:	c8 ef       	ldi	r28, 0xF8	; 248
     426:	d1 e0       	ldi	r29, 0x01	; 1
     428:	04 c0       	rjmp	.+8      	; 0x432 <__do_global_ctors+0x10>
     42a:	21 97       	sbiw	r28, 0x01	; 1
     42c:	fe 01       	movw	r30, r28
     42e:	0e 94 43 19 	call	0x3286	; 0x3286 <__tablejump2__>
     432:	c6 3f       	cpi	r28, 0xF6	; 246
     434:	d1 07       	cpc	r29, r17
     436:	c9 f7       	brne	.-14     	; 0x42a <__do_global_ctors+0x8>
     438:	0e 94 77 15 	call	0x2aee	; 0x2aee <main>
     43c:	0c 94 49 19 	jmp	0x3292	; 0x3292 <_exit>

00000440 <__bad_interrupt>:
     440:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000444 <_ZN6IRrecv6resumeEv>:
#endif
            space(aBiphaseTimeUnit);
            tLastBitValue = 0;
        }
    }
    ledOff();  // Always end with the LED off
     444:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <irparams>
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	11 f4       	brne	.+4      	; 0x450 <_ZN6IRrecv6resumeEv+0xc>
     44c:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <irparams>
     450:	08 95       	ret

00000452 <_ZN6IRrecv10enableIRInEv>:
     452:	9c 01       	movw	r18, r24
     454:	f8 94       	cli
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     45c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     460:	94 e6       	ldi	r25, 0x64	; 100
     462:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     466:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     46a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     474:	78 94       	sei
     476:	c9 01       	movw	r24, r18
     478:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6IRrecv6resumeEv>
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <irparams+0x1>
     482:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <pinMode>

00000486 <_ZN6IRrecv17initDecodedIRDataEv>:
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ec 01       	movw	r28, r24
     48c:	80 e5       	ldi	r24, 0x50	; 80
     48e:	96 e0       	ldi	r25, 0x06	; 6
     490:	9c 8f       	std	Y+28, r25	; 0x1c
     492:	8b 8f       	std	Y+27, r24	; 0x1b
     494:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <irparams+0x7>
     498:	88 23       	and	r24, r24
     49a:	69 f0       	breq	.+26     	; 0x4b6 <_ZN6IRrecv17initDecodedIRDataEv+0x30>
     49c:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <irparams+0x7>
     4a0:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <irparams+0x4>
     4a4:	80 e4       	ldi	r24, 0x40	; 64
     4a6:	8e 8b       	std	Y+22, r24	; 0x16
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	83 e2       	ldi	r24, 0x23	; 35
     4ae:	97 e0       	ldi	r25, 0x07	; 7
     4b0:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <_ZN6IRrecv17initDecodedIRDataEv+0x52>
     4b6:	1e 8a       	std	Y+22, r1	; 0x16
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	9a 89       	ldd	r25, Y+18	; 0x12
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	89 a3       	std	Y+33, r24	; 0x21
     4c2:	9a a3       	std	Y+34, r25	; 0x22
     4c4:	ab a3       	std	Y+35, r26	; 0x23
     4c6:	bc a3       	std	Y+36, r27	; 0x24
     4c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     4ca:	98 89       	ldd	r25, Y+16	; 0x10
     4cc:	a0 e0       	ldi	r26, 0x00	; 0
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	8d 8f       	std	Y+29, r24	; 0x1d
     4d2:	9e 8f       	std	Y+30, r25	; 0x1e
     4d4:	af 8f       	std	Y+31, r26	; 0x1f
     4d6:	b8 a3       	std	Y+32, r27	; 0x20
     4d8:	1a 8a       	std	Y+18, r1	; 0x12
     4da:	19 8a       	std	Y+17, r1	; 0x11
     4dc:	18 8a       	std	Y+16, r1	; 0x10
     4de:	1f 86       	std	Y+15, r1	; 0x0f
     4e0:	1f 8a       	std	Y+23, r1	; 0x17
     4e2:	18 8e       	std	Y+24, r1	; 0x18
     4e4:	19 8e       	std	Y+25, r1	; 0x19
     4e6:	1a 8e       	std	Y+26, r1	; 0x1a
     4e8:	1d 8a       	std	Y+21, r1	; 0x15
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <_ZN6IRrecv7compareEjj>:
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	84 9f       	mul	r24, r20
     4f4:	f0 01       	movw	r30, r0
     4f6:	85 9f       	mul	r24, r21
     4f8:	f0 0d       	add	r31, r0
     4fa:	11 24       	eor	r1, r1
     4fc:	9b 01       	movw	r18, r22
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	22 0f       	add	r18, r18
     502:	33 1f       	adc	r19, r19
     504:	9a 95       	dec	r25
     506:	e1 f7       	brne	.-8      	; 0x500 <_ZN6IRrecv7compareEjj+0x10>
     508:	e2 17       	cp	r30, r18
     50a:	f3 07       	cpc	r31, r19
     50c:	78 f0       	brcs	.+30     	; 0x52c <_ZN6IRrecv7compareEjj+0x3c>
     50e:	86 9f       	mul	r24, r22
     510:	90 01       	movw	r18, r0
     512:	87 9f       	mul	r24, r23
     514:	30 0d       	add	r19, r0
     516:	11 24       	eor	r1, r1
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	44 0f       	add	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	8a 95       	dec	r24
     520:	e1 f7       	brne	.-8      	; 0x51a <_ZN6IRrecv7compareEjj+0x2a>
     522:	24 17       	cp	r18, r20
     524:	35 07       	cpc	r19, r21
     526:	20 f0       	brcs	.+8      	; 0x530 <_ZN6IRrecv7compareEjj+0x40>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	08 95       	ret

00000534 <_ZN6IRrecv10decodeHashEv>:
     534:	8f 92       	push	r8
     536:	9f 92       	push	r9
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
     54e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     550:	fc 8d       	ldd	r31, Y+28	; 0x1c
     552:	94 81       	ldd	r25, Z+4	; 0x04
     554:	96 30       	cpi	r25, 0x06	; 6
     556:	b0 f1       	brcs	.+108    	; 0x5c4 <_ZN6IRrecv10decodeHashEv+0x90>
     558:	8f 01       	movw	r16, r30
     55a:	06 5f       	subi	r16, 0xF6	; 246
     55c:	1f 4f       	sbci	r17, 0xFF	; 255
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	c8 2e       	mov	r12, r24
     562:	d1 2c       	mov	r13, r1
     564:	25 ec       	ldi	r18, 0xC5	; 197
     566:	82 2e       	mov	r8, r18
     568:	2d e9       	ldi	r18, 0x9D	; 157
     56a:	92 2e       	mov	r9, r18
     56c:	2c e1       	ldi	r18, 0x1C	; 28
     56e:	a2 2e       	mov	r10, r18
     570:	21 e8       	ldi	r18, 0x81	; 129
     572:	b2 2e       	mov	r11, r18
     574:	e9 2e       	mov	r14, r25
     576:	f1 2c       	mov	r15, r1
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	c8 1a       	sub	r12, r24
     57c:	d8 0a       	sbc	r13, r24
     57e:	ce 14       	cp	r12, r14
     580:	df 04       	cpc	r13, r15
     582:	b8 f4       	brcc	.+46     	; 0x5b2 <_ZN6IRrecv10decodeHashEv+0x7e>
     584:	f8 01       	movw	r30, r16
     586:	44 81       	ldd	r20, Z+4	; 0x04
     588:	55 81       	ldd	r21, Z+5	; 0x05
     58a:	0e 5f       	subi	r16, 0xFE	; 254
     58c:	1f 4f       	sbci	r17, 0xFF	; 255
     58e:	60 81       	ld	r22, Z
     590:	71 81       	ldd	r23, Z+1	; 0x01
     592:	ce 01       	movw	r24, r28
     594:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_ZN6IRrecv7compareEjj>
     598:	e8 2f       	mov	r30, r24
     59a:	a5 01       	movw	r20, r10
     59c:	94 01       	movw	r18, r8
     59e:	63 e9       	ldi	r22, 0x93	; 147
     5a0:	71 e0       	ldi	r23, 0x01	; 1
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 ca 18 	call	0x3194	; 0x3194 <__mulsi3>
     5aa:	4b 01       	movw	r8, r22
     5ac:	5c 01       	movw	r10, r24
     5ae:	8e 26       	eor	r8, r30
     5b0:	e3 cf       	rjmp	.-58     	; 0x578 <_ZN6IRrecv10decodeHashEv+0x44>
     5b2:	8f 8a       	std	Y+23, r8	; 0x17
     5b4:	98 8e       	std	Y+24, r9	; 0x18
     5b6:	a9 8e       	std	Y+25, r10	; 0x19
     5b8:	ba 8e       	std	Y+26, r11	; 0x1a
     5ba:	80 e2       	ldi	r24, 0x20	; 32
     5bc:	8d 8b       	std	Y+21, r24	; 0x15
     5be:	1e 86       	std	Y+14, r1	; 0x0e
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <_ZN6IRrecv10decodeHashEv+0x92>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	bf 90       	pop	r11
     5d8:	af 90       	pop	r10
     5da:	9f 90       	pop	r9
     5dc:	8f 90       	pop	r8
     5de:	08 95       	ret

000005e0 <_ZN6IRrecv6decodeEv>:
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
     5e8:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <irparams>
     5ec:	83 30       	cpi	r24, 0x03	; 3
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <_ZN6IRrecv6decodeEv+0x12>
     5f0:	65 c0       	rjmp	.+202    	; 0x6bc <_ZN6IRrecv6decodeEv+0xdc>
     5f2:	88 e5       	ldi	r24, 0x58	; 88
     5f4:	96 e0       	ldi	r25, 0x06	; 6
     5f6:	9a 87       	std	Y+10, r25	; 0x0a
     5f8:	89 87       	std	Y+9, r24	; 0x09
     5fa:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <irparams+0x4>
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	9c 87       	std	Y+12, r25	; 0x0c
     602:	8b 87       	std	Y+11, r24	; 0x0b
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 91 57 06 	lds	r25, 0x0657	; 0x800657 <irparams+0x7>
     60a:	91 11       	cpse	r25, r1
     60c:	01 c0       	rjmp	.+2      	; 0x610 <_ZN6IRrecv6decodeEv+0x30>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	8d 87       	std	Y+13, r24	; 0x0d
     612:	ce 01       	movw	r24, r28
     614:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6IRrecv17initDecodedIRDataEv>
     618:	8e 89       	ldd	r24, Y+22	; 0x16
     61a:	86 ff       	sbrs	r24, 6
     61c:	02 c0       	rjmp	.+4      	; 0x622 <_ZN6IRrecv6decodeEv+0x42>
     61e:	1e 86       	std	Y+14, r1	; 0x0e
     620:	05 c0       	rjmp	.+10     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     622:	ce 01       	movw	r24, r28
     624:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN6IRrecv9decodeNECEv>
     628:	88 23       	and	r24, r24
     62a:	11 f0       	breq	.+4      	; 0x630 <_ZN6IRrecv6decodeEv+0x50>
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	47 c0       	rjmp	.+142    	; 0x6be <_ZN6IRrecv6decodeEv+0xde>
     630:	ce 01       	movw	r24, r28
     632:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN6IRrecv14decodeKaseikyoEv>
     636:	81 11       	cpse	r24, r1
     638:	f9 cf       	rjmp	.-14     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     63a:	ce 01       	movw	r24, r28
     63c:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN6IRrecv11decodeDenonEv>
     640:	81 11       	cpse	r24, r1
     642:	f4 cf       	rjmp	.-24     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     644:	ce 01       	movw	r24, r28
     646:	0e 94 28 12 	call	0x2450	; 0x2450 <_ZN6IRrecv10decodeSonyEv>
     64a:	81 11       	cpse	r24, r1
     64c:	ef cf       	rjmp	.-34     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN6IRrecv9decodeRC5Ev>
     654:	81 11       	cpse	r24, r1
     656:	ea cf       	rjmp	.-44     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN6IRrecv9decodeRC6Ev>
     65e:	81 11       	cpse	r24, r1
     660:	e5 cf       	rjmp	.-54     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     662:	ce 01       	movw	r24, r28
     664:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN6IRrecv8decodeLGEv>
     668:	81 11       	cpse	r24, r1
     66a:	e0 cf       	rjmp	.-64     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     66c:	ce 01       	movw	r24, r28
     66e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN6IRrecv9decodeJVCEv>
     672:	81 11       	cpse	r24, r1
     674:	db cf       	rjmp	.-74     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     676:	ce 01       	movw	r24, r28
     678:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_ZN6IRrecv13decodeSamsungEv>
     67c:	81 11       	cpse	r24, r1
     67e:	d6 cf       	rjmp	.-84     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     680:	ce 01       	movw	r24, r28
     682:	0e 94 b2 12 	call	0x2564	; 0x2564 <_ZN6IRrecv13decodeWhynterEv>
     686:	81 11       	cpse	r24, r1
     688:	d1 cf       	rjmp	.-94     	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN6IRrecv24decodeLegoPowerFunctionsEv>
     690:	81 11       	cpse	r24, r1
     692:	cc cf       	rjmp	.-104    	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     694:	ce 01       	movw	r24, r28
     696:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN6IRrecv14decodeBoseWaveEv>
     69a:	81 11       	cpse	r24, r1
     69c:	c7 cf       	rjmp	.-114    	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN6IRrecv15decodeMagiQuestEv>
     6a4:	81 11       	cpse	r24, r1
     6a6:	c2 cf       	rjmp	.-124    	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     6a8:	ce 01       	movw	r24, r28
     6aa:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN6IRrecv10decodeHashEv>
     6ae:	18 2f       	mov	r17, r24
     6b0:	81 11       	cpse	r24, r1
     6b2:	bc cf       	rjmp	.-136    	; 0x62c <_ZN6IRrecv6decodeEv+0x4c>
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6IRrecv6resumeEv>
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <_ZN6IRrecv6decodeEv+0xde>
     6bc:	10 e0       	ldi	r17, 0x00	; 0
     6be:	81 2f       	mov	r24, r17
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	08 95       	ret

000006c8 <_ZN6IRrecv6decodeEP14decode_results>:
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	ec 01       	movw	r28, r24
     6ce:	62 e1       	ldi	r22, 0x12	; 18
     6d0:	71 e0       	ldi	r23, 0x01	; 1
     6d2:	83 e2       	ldi	r24, 0x23	; 35
     6d4:	97 e0       	ldi	r25, 0x07	; 7
     6d6:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
     6da:	ce 01       	movw	r24, r28
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <_ZN6IRrecv6decodeEv>

000006e4 <_Z10MATCH_MARKjj>:
     6e4:	fc 01       	movw	r30, r24
     6e6:	9b 01       	movw	r18, r22
     6e8:	2c 5e       	subi	r18, 0xEC	; 236
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
     6ec:	c9 01       	movw	r24, r18
     6ee:	63 e4       	ldi	r22, 0x43	; 67
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodhi4>
     6f6:	e6 17       	cp	r30, r22
     6f8:	f7 07       	cpc	r31, r23
     6fa:	58 f0       	brcs	.+22     	; 0x712 <_Z10MATCH_MARKjj+0x2e>
     6fc:	c9 01       	movw	r24, r18
     6fe:	68 e2       	ldi	r22, 0x28	; 40
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodhi4>
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	6e 17       	cp	r22, r30
     70e:	7f 07       	cpc	r23, r31
     710:	08 f4       	brcc	.+2      	; 0x714 <_Z10MATCH_MARKjj+0x30>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret

00000716 <_Z11MATCH_SPACEjj>:
     716:	fc 01       	movw	r30, r24
     718:	9b 01       	movw	r18, r22
     71a:	24 51       	subi	r18, 0x14	; 20
     71c:	31 09       	sbc	r19, r1
     71e:	c9 01       	movw	r24, r18
     720:	63 e4       	ldi	r22, 0x43	; 67
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodhi4>
     728:	e6 17       	cp	r30, r22
     72a:	f7 07       	cpc	r31, r23
     72c:	58 f0       	brcs	.+22     	; 0x744 <_Z11MATCH_SPACEjj+0x2e>
     72e:	c9 01       	movw	r24, r18
     730:	68 e2       	ldi	r22, 0x28	; 40
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodhi4>
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	6e 17       	cp	r22, r30
     740:	7f 07       	cpc	r23, r31
     742:	08 f4       	brcc	.+2      	; 0x746 <_Z11MATCH_SPACEjj+0x30>
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret

00000748 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb>:
     748:	2f 92       	push	r2
     74a:	3f 92       	push	r3
     74c:	4f 92       	push	r4
     74e:	5f 92       	push	r5
     750:	6f 92       	push	r6
     752:	7f 92       	push	r7
     754:	8f 92       	push	r8
     756:	9f 92       	push	r9
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	28 97       	sbiw	r28, 0x08	; 8
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	9e 83       	std	Y+6, r25	; 0x06
     77e:	8d 83       	std	Y+5, r24	; 0x05
     780:	36 2e       	mov	r3, r22
     782:	59 01       	movw	r10, r18
     784:	dc 01       	movw	r26, r24
     786:	5b 96       	adiw	r26, 0x1b	; 27
     788:	8d 90       	ld	r8, X+
     78a:	9c 90       	ld	r9, X
     78c:	5c 97       	sbiw	r26, 0x1c	; 28
     78e:	f4 01       	movw	r30, r8
     790:	e4 0f       	add	r30, r20
     792:	f1 1d       	adc	r31, r1
     794:	e4 0f       	add	r30, r20
     796:	f1 1d       	adc	r31, r1
     798:	38 96       	adiw	r30, 0x08	; 8
     79a:	f8 87       	std	Y+8, r31	; 0x08
     79c:	ef 83       	std	Y+7, r30	; 0x07
     79e:	c1 10       	cpse	r12, r1
     7a0:	0c c0       	rjmp	.+24     	; 0x7ba <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x72>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	a0 e0       	ldi	r26, 0x00	; 0
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	9a 83       	std	Y+2, r25	; 0x02
     7ae:	ab 83       	std	Y+3, r26	; 0x03
     7b0:	bc 83       	std	Y+4, r27	; 0x04
     7b2:	41 2c       	mov	r4, r1
     7b4:	51 2c       	mov	r5, r1
     7b6:	32 01       	movw	r6, r4
     7b8:	c8 c0       	rjmp	.+400    	; 0x94a <__stack+0x4b>
     7ba:	21 2c       	mov	r2, r1
     7bc:	41 2c       	mov	r4, r1
     7be:	51 2c       	mov	r5, r1
     7c0:	32 01       	movw	r6, r4
     7c2:	23 14       	cp	r2, r3
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x80>
     7c6:	22 c1       	rjmp	.+580    	; 0xa0c <__stack+0x10d>
     7c8:	af 81       	ldd	r26, Y+7	; 0x07
     7ca:	b8 85       	ldd	r27, Y+8	; 0x08
     7cc:	cd 90       	ld	r12, X+
     7ce:	dc 90       	ld	r13, X
     7d0:	b5 01       	movw	r22, r10
     7d2:	c6 01       	movw	r24, r12
     7d4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     7d8:	88 23       	and	r24, r24
     7da:	39 f0       	breq	.+14     	; 0x7ea <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0xa2>
     7dc:	44 0c       	add	r4, r4
     7de:	55 1c       	adc	r5, r5
     7e0:	66 1c       	adc	r6, r6
     7e2:	77 1c       	adc	r7, r7
     7e4:	68 94       	set
     7e6:	40 f8       	bld	r4, 0
     7e8:	32 c0       	rjmp	.+100    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     7ea:	b8 01       	movw	r22, r16
     7ec:	c6 01       	movw	r24, r12
     7ee:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     7f2:	d8 2e       	mov	r13, r24
     7f4:	88 23       	and	r24, r24
     7f6:	29 f0       	breq	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7f8:	44 0c       	add	r4, r4
     7fa:	55 1c       	adc	r5, r5
     7fc:	66 1c       	adc	r6, r6
     7fe:	77 1c       	adc	r7, r7
     800:	26 c0       	rjmp	.+76     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     802:	67 e0       	ldi	r22, 0x07	; 7
     804:	71 e0       	ldi	r23, 0x01	; 1
     806:	83 e2       	ldi	r24, 0x23	; 35
     808:	97 e0       	ldi	r25, 0x07	; 7
     80a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     80e:	ef 81       	ldd	r30, Y+7	; 0x07
     810:	f8 85       	ldd	r31, Y+8	; 0x08
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	22 e3       	ldi	r18, 0x32	; 50
     818:	28 9f       	mul	r18, r24
     81a:	b0 01       	movw	r22, r0
     81c:	29 9f       	mul	r18, r25
     81e:	70 0d       	add	r23, r0
     820:	11 24       	eor	r1, r1
     822:	4a e0       	ldi	r20, 0x0A	; 10
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	83 e2       	ldi	r24, 0x23	; 35
     828:	97 e0       	ldi	r25, 0x07	; 7
     82a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     82e:	6e ef       	ldi	r22, 0xFE	; 254
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	83 e2       	ldi	r24, 0x23	; 35
     834:	97 e0       	ldi	r25, 0x07	; 7
     836:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     83a:	4a e0       	ldi	r20, 0x0A	; 10
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	b5 01       	movw	r22, r10
     840:	83 e2       	ldi	r24, 0x23	; 35
     842:	97 e0       	ldi	r25, 0x07	; 7
     844:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     848:	69 ef       	ldi	r22, 0xF9	; 249
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	ad c0       	rjmp	.+346    	; 0x9a8 <__stack+0xa9>
     84e:	2f 81       	ldd	r18, Y+7	; 0x07
     850:	38 85       	ldd	r19, Y+8	; 0x08
     852:	2e 5f       	subi	r18, 0xFE	; 254
     854:	3f 4f       	sbci	r19, 0xFF	; 255
     856:	d4 01       	movw	r26, r8
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	4c 91       	ld	r20, X
     85c:	c4 01       	movw	r24, r8
     85e:	84 0f       	add	r24, r20
     860:	91 1d       	adc	r25, r1
     862:	84 0f       	add	r24, r20
     864:	91 1d       	adc	r25, r1
     866:	08 96       	adiw	r24, 0x08	; 8
     868:	28 17       	cp	r18, r24
     86a:	39 07       	cpc	r19, r25
     86c:	c8 f5       	brcc	.+114    	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
     86e:	b7 01       	movw	r22, r14
     870:	ef 81       	ldd	r30, Y+7	; 0x07
     872:	f8 85       	ldd	r31, Y+8	; 0x08
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	93 81       	ldd	r25, Z+3	; 0x03
     878:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     87c:	d8 2e       	mov	r13, r24
     87e:	81 11       	cpse	r24, r1
     880:	2b c0       	rjmp	.+86     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     882:	62 ef       	ldi	r22, 0xF2	; 242
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	83 e2       	ldi	r24, 0x23	; 35
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     88e:	af 81       	ldd	r26, Y+7	; 0x07
     890:	b8 85       	ldd	r27, Y+8	; 0x08
     892:	12 96       	adiw	r26, 0x02	; 2
     894:	8d 91       	ld	r24, X+
     896:	9c 91       	ld	r25, X
     898:	13 97       	sbiw	r26, 0x03	; 3
     89a:	22 e3       	ldi	r18, 0x32	; 50
     89c:	28 9f       	mul	r18, r24
     89e:	b0 01       	movw	r22, r0
     8a0:	29 9f       	mul	r18, r25
     8a2:	70 0d       	add	r23, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	4a e0       	ldi	r20, 0x0A	; 10
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	83 e2       	ldi	r24, 0x23	; 35
     8ac:	97 e0       	ldi	r25, 0x07	; 7
     8ae:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     8b2:	69 ee       	ldi	r22, 0xE9	; 233
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	83 e2       	ldi	r24, 0x23	; 35
     8b8:	97 e0       	ldi	r25, 0x07	; 7
     8ba:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     8be:	4a e0       	ldi	r20, 0x0A	; 10
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	b7 01       	movw	r22, r14
     8c4:	83 e2       	ldi	r24, 0x23	; 35
     8c6:	97 e0       	ldi	r25, 0x07	; 7
     8c8:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     8cc:	60 e2       	ldi	r22, 0x20	; 32
     8ce:	83 e2       	ldi	r24, 0x23	; 35
     8d0:	97 e0       	ldi	r25, 0x07	; 7
     8d2:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN5Print5printEc>
     8d6:	a4 c0       	rjmp	.+328    	; 0xa20 <__stack+0x121>
     8d8:	2f 81       	ldd	r18, Y+7	; 0x07
     8da:	38 85       	ldd	r19, Y+8	; 0x08
     8dc:	2c 5f       	subi	r18, 0xFC	; 252
     8de:	3f 4f       	sbci	r19, 0xFF	; 255
     8e0:	23 94       	inc	r2
     8e2:	38 87       	std	Y+8, r19	; 0x08
     8e4:	2f 83       	std	Y+7, r18	; 0x07
     8e6:	6d cf       	rjmp	.-294    	; 0x7c2 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x7a>
     8e8:	ef 81       	ldd	r30, Y+7	; 0x07
     8ea:	f8 85       	ldd	r31, Y+8	; 0x08
     8ec:	c0 80       	ld	r12, Z
     8ee:	d1 80       	ldd	r13, Z+1	; 0x01
     8f0:	b5 01       	movw	r22, r10
     8f2:	c6 01       	movw	r24, r12
     8f4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     8f8:	88 23       	and	r24, r24
     8fa:	51 f1       	breq	.+84     	; 0x950 <__stack+0x51>
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	ab 81       	ldd	r26, Y+3	; 0x03
     902:	bc 81       	ldd	r27, Y+4	; 0x04
     904:	48 2a       	or	r4, r24
     906:	59 2a       	or	r5, r25
     908:	6a 2a       	or	r6, r26
     90a:	7b 2a       	or	r7, r27
     90c:	2f 81       	ldd	r18, Y+7	; 0x07
     90e:	38 85       	ldd	r19, Y+8	; 0x08
     910:	2e 5f       	subi	r18, 0xFE	; 254
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	f4 01       	movw	r30, r8
     916:	44 81       	ldd	r20, Z+4	; 0x04
     918:	c4 01       	movw	r24, r8
     91a:	84 0f       	add	r24, r20
     91c:	91 1d       	adc	r25, r1
     91e:	84 0f       	add	r24, r20
     920:	91 1d       	adc	r25, r1
     922:	08 96       	adiw	r24, 0x08	; 8
     924:	28 17       	cp	r18, r24
     926:	39 07       	cpc	r19, r25
     928:	08 f4       	brcc	.+2      	; 0x92c <__stack+0x2d>
     92a:	46 c0       	rjmp	.+140    	; 0x9b8 <__stack+0xb9>
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	ab 81       	ldd	r26, Y+3	; 0x03
     932:	bc 81       	ldd	r27, Y+4	; 0x04
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	aa 1f       	adc	r26, r26
     93a:	bb 1f       	adc	r27, r27
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	9a 83       	std	Y+2, r25	; 0x02
     940:	ab 83       	std	Y+3, r26	; 0x03
     942:	bc 83       	std	Y+4, r27	; 0x04
     944:	3a 94       	dec	r3
     946:	38 87       	std	Y+8, r19	; 0x08
     948:	2f 83       	std	Y+7, r18	; 0x07
     94a:	31 10       	cpse	r3, r1
     94c:	cd cf       	rjmp	.-102    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     94e:	5e c0       	rjmp	.+188    	; 0xa0c <__stack+0x10d>
     950:	b8 01       	movw	r22, r16
     952:	c6 01       	movw	r24, r12
     954:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     958:	d8 2e       	mov	r13, r24
     95a:	81 11       	cpse	r24, r1
     95c:	d7 cf       	rjmp	.-82     	; 0x90c <__stack+0xd>
     95e:	63 ee       	ldi	r22, 0xE3	; 227
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	83 e2       	ldi	r24, 0x23	; 35
     964:	97 e0       	ldi	r25, 0x07	; 7
     966:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     96a:	af 81       	ldd	r26, Y+7	; 0x07
     96c:	b8 85       	ldd	r27, Y+8	; 0x08
     96e:	8d 91       	ld	r24, X+
     970:	9c 91       	ld	r25, X
     972:	22 e3       	ldi	r18, 0x32	; 50
     974:	28 9f       	mul	r18, r24
     976:	b0 01       	movw	r22, r0
     978:	29 9f       	mul	r18, r25
     97a:	70 0d       	add	r23, r0
     97c:	11 24       	eor	r1, r1
     97e:	4a e0       	ldi	r20, 0x0A	; 10
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	83 e2       	ldi	r24, 0x23	; 35
     984:	97 e0       	ldi	r25, 0x07	; 7
     986:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     98a:	6a ed       	ldi	r22, 0xDA	; 218
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	83 e2       	ldi	r24, 0x23	; 35
     990:	97 e0       	ldi	r25, 0x07	; 7
     992:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     996:	4a e0       	ldi	r20, 0x0A	; 10
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	b5 01       	movw	r22, r10
     99c:	83 e2       	ldi	r24, 0x23	; 35
     99e:	97 e0       	ldi	r25, 0x07	; 7
     9a0:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     9a4:	65 ed       	ldi	r22, 0xD5	; 213
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	83 e2       	ldi	r24, 0x23	; 35
     9aa:	97 e0       	ldi	r25, 0x07	; 7
     9ac:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     9b0:	4a e0       	ldi	r20, 0x0A	; 10
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	b8 01       	movw	r22, r16
     9b6:	86 cf       	rjmp	.-244    	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     9b8:	b7 01       	movw	r22, r14
     9ba:	af 81       	ldd	r26, Y+7	; 0x07
     9bc:	b8 85       	ldd	r27, Y+8	; 0x08
     9be:	12 96       	adiw	r26, 0x02	; 2
     9c0:	8d 91       	ld	r24, X+
     9c2:	9c 91       	ld	r25, X
     9c4:	13 97       	sbiw	r26, 0x03	; 3
     9c6:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     9ca:	d8 2e       	mov	r13, r24
     9cc:	81 11       	cpse	r24, r1
     9ce:	19 c0       	rjmp	.+50     	; 0xa02 <__stack+0x103>
     9d0:	6e ec       	ldi	r22, 0xCE	; 206
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	83 e2       	ldi	r24, 0x23	; 35
     9d6:	97 e0       	ldi	r25, 0x07	; 7
     9d8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     9dc:	ef 81       	ldd	r30, Y+7	; 0x07
     9de:	f8 85       	ldd	r31, Y+8	; 0x08
     9e0:	82 81       	ldd	r24, Z+2	; 0x02
     9e2:	93 81       	ldd	r25, Z+3	; 0x03
     9e4:	22 e3       	ldi	r18, 0x32	; 50
     9e6:	28 9f       	mul	r18, r24
     9e8:	b0 01       	movw	r22, r0
     9ea:	29 9f       	mul	r18, r25
     9ec:	70 0d       	add	r23, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	4a e0       	ldi	r20, 0x0A	; 10
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	83 e2       	ldi	r24, 0x23	; 35
     9f6:	97 e0       	ldi	r25, 0x07	; 7
     9f8:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     9fc:	65 ec       	ldi	r22, 0xC5	; 197
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	5a cf       	rjmp	.-332    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     a02:	2f 81       	ldd	r18, Y+7	; 0x07
     a04:	38 85       	ldd	r19, Y+8	; 0x08
     a06:	2c 5f       	subi	r18, 0xFC	; 252
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	90 cf       	rjmp	.-224    	; 0x92c <__stack+0x2d>
     a0c:	ad 81       	ldd	r26, Y+5	; 0x05
     a0e:	be 81       	ldd	r27, Y+6	; 0x06
     a10:	57 96       	adiw	r26, 0x17	; 23
     a12:	4d 92       	st	X+, r4
     a14:	5d 92       	st	X+, r5
     a16:	6d 92       	st	X+, r6
     a18:	7c 92       	st	X, r7
     a1a:	5a 97       	sbiw	r26, 0x1a	; 26
     a1c:	dd 24       	eor	r13, r13
     a1e:	d3 94       	inc	r13
     a20:	8d 2d       	mov	r24, r13
     a22:	28 96       	adiw	r28, 0x08	; 8
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	cf 90       	pop	r12
     a3e:	bf 90       	pop	r11
     a40:	af 90       	pop	r10
     a42:	9f 90       	pop	r9
     a44:	8f 90       	pop	r8
     a46:	7f 90       	pop	r7
     a48:	6f 90       	pop	r6
     a4a:	5f 90       	pop	r5
     a4c:	4f 90       	pop	r4
     a4e:	3f 90       	pop	r3
     a50:	2f 90       	pop	r2
     a52:	08 95       	ret

00000a54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>:
     a54:	2f 92       	push	r2
     a56:	3f 92       	push	r3
     a58:	4f 92       	push	r4
     a5a:	5f 92       	push	r5
     a5c:	6f 92       	push	r6
     a5e:	7f 92       	push	r7
     a60:	8f 92       	push	r8
     a62:	9f 92       	push	r9
     a64:	af 92       	push	r10
     a66:	bf 92       	push	r11
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x26>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x28>
     a7c:	1f 92       	push	r1
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	9b 83       	std	Y+3, r25	; 0x03
     a84:	8a 83       	std	Y+2, r24	; 0x02
     a86:	69 83       	std	Y+1, r22	; 0x01
     a88:	19 01       	movw	r2, r18
     a8a:	84 2f       	mov	r24, r20
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	04 96       	adiw	r24, 0x04	; 4
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	ea 81       	ldd	r30, Y+2	; 0x02
     a96:	fb 81       	ldd	r31, Y+3	; 0x03
     a98:	43 8d       	ldd	r20, Z+27	; 0x1b
     a9a:	54 8d       	ldd	r21, Z+28	; 0x1c
     a9c:	84 0f       	add	r24, r20
     a9e:	95 1f       	adc	r25, r21
     aa0:	9d 83       	std	Y+5, r25	; 0x05
     aa2:	8c 83       	std	Y+4, r24	; 0x04
     aa4:	c1 10       	cpse	r12, r1
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x64>
     aa8:	81 2c       	mov	r8, r1
     aaa:	91 2c       	mov	r9, r1
     aac:	54 01       	movw	r10, r8
     aae:	83 94       	inc	r8
     ab0:	41 2c       	mov	r4, r1
     ab2:	51 2c       	mov	r5, r1
     ab4:	32 01       	movw	r6, r4
     ab6:	9f c0       	rjmp	.+318    	; 0xbf6 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x1a2>
     ab8:	81 2c       	mov	r8, r1
     aba:	41 2c       	mov	r4, r1
     abc:	51 2c       	mov	r5, r1
     abe:	32 01       	movw	r6, r4
     ac0:	f9 81       	ldd	r31, Y+1	; 0x01
     ac2:	8f 16       	cp	r8, r31
     ac4:	09 f4       	brne	.+2      	; 0xac8 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x74>
     ac6:	f2 c0       	rjmp	.+484    	; 0xcac <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x258>
     ac8:	b1 01       	movw	r22, r2
     aca:	ec 81       	ldd	r30, Y+4	; 0x04
     acc:	fd 81       	ldd	r31, Y+5	; 0x05
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     ad6:	d8 2e       	mov	r13, r24
     ad8:	81 11       	cpse	r24, r1
     ada:	19 c0       	rjmp	.+50     	; 0xb0e <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0xba>
     adc:	6f eb       	ldi	r22, 0xBF	; 191
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	83 e2       	ldi	r24, 0x23	; 35
     ae2:	97 e0       	ldi	r25, 0x07	; 7
     ae4:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     ae8:	ec 81       	ldd	r30, Y+4	; 0x04
     aea:	fd 81       	ldd	r31, Y+5	; 0x05
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	22 e3       	ldi	r18, 0x32	; 50
     af2:	28 9f       	mul	r18, r24
     af4:	b0 01       	movw	r22, r0
     af6:	29 9f       	mul	r18, r25
     af8:	70 0d       	add	r23, r0
     afa:	11 24       	eor	r1, r1
     afc:	4a e0       	ldi	r20, 0x0A	; 10
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	83 e2       	ldi	r24, 0x23	; 35
     b02:	97 e0       	ldi	r25, 0x07	; 7
     b04:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     b08:	66 eb       	ldi	r22, 0xB6	; 182
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	9a c0       	rjmp	.+308    	; 0xc42 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x1ee>
     b0e:	ec 81       	ldd	r30, Y+4	; 0x04
     b10:	fd 81       	ldd	r31, Y+5	; 0x05
     b12:	c2 80       	ldd	r12, Z+2	; 0x02
     b14:	d3 80       	ldd	r13, Z+3	; 0x03
     b16:	b8 01       	movw	r22, r16
     b18:	c6 01       	movw	r24, r12
     b1a:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     b1e:	88 23       	and	r24, r24
     b20:	39 f0       	breq	.+14     	; 0xb30 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0xdc>
     b22:	44 0c       	add	r4, r4
     b24:	55 1c       	adc	r5, r5
     b26:	66 1c       	adc	r6, r6
     b28:	77 1c       	adc	r7, r7
     b2a:	68 94       	set
     b2c:	40 f8       	bld	r4, 0
     b2e:	42 c0       	rjmp	.+132    	; 0xbb4 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x160>
     b30:	b7 01       	movw	r22, r14
     b32:	c6 01       	movw	r24, r12
     b34:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     b38:	d8 2e       	mov	r13, r24
     b3a:	88 23       	and	r24, r24
     b3c:	29 f0       	breq	.+10     	; 0xb48 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0xf4>
     b3e:	44 0c       	add	r4, r4
     b40:	55 1c       	adc	r5, r5
     b42:	66 1c       	adc	r6, r6
     b44:	77 1c       	adc	r7, r7
     b46:	36 c0       	rjmp	.+108    	; 0xbb4 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x160>
     b48:	6f ea       	ldi	r22, 0xAF	; 175
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	83 e2       	ldi	r24, 0x23	; 35
     b4e:	97 e0       	ldi	r25, 0x07	; 7
     b50:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     b54:	ec 81       	ldd	r30, Y+4	; 0x04
     b56:	fd 81       	ldd	r31, Y+5	; 0x05
     b58:	82 81       	ldd	r24, Z+2	; 0x02
     b5a:	93 81       	ldd	r25, Z+3	; 0x03
     b5c:	22 e3       	ldi	r18, 0x32	; 50
     b5e:	28 9f       	mul	r18, r24
     b60:	b0 01       	movw	r22, r0
     b62:	29 9f       	mul	r18, r25
     b64:	70 0d       	add	r23, r0
     b66:	11 24       	eor	r1, r1
     b68:	4a e0       	ldi	r20, 0x0A	; 10
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	83 e2       	ldi	r24, 0x23	; 35
     b6e:	97 e0       	ldi	r25, 0x07	; 7
     b70:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     b74:	66 ea       	ldi	r22, 0xA6	; 166
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	83 e2       	ldi	r24, 0x23	; 35
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     b80:	4a e0       	ldi	r20, 0x0A	; 10
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	b8 01       	movw	r22, r16
     b86:	83 e2       	ldi	r24, 0x23	; 35
     b88:	97 e0       	ldi	r25, 0x07	; 7
     b8a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     b8e:	61 ea       	ldi	r22, 0xA1	; 161
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	83 e2       	ldi	r24, 0x23	; 35
     b94:	97 e0       	ldi	r25, 0x07	; 7
     b96:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     b9a:	4a e0       	ldi	r20, 0x0A	; 10
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	b7 01       	movw	r22, r14
     ba0:	83 e2       	ldi	r24, 0x23	; 35
     ba2:	97 e0       	ldi	r25, 0x07	; 7
     ba4:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     ba8:	60 e2       	ldi	r22, 0x20	; 32
     baa:	83 e2       	ldi	r24, 0x23	; 35
     bac:	97 e0       	ldi	r25, 0x07	; 7
     bae:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN5Print5printEc>
     bb2:	84 c0       	rjmp	.+264    	; 0xcbc <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x268>
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	04 96       	adiw	r24, 0x04	; 4
     bba:	9d 83       	std	Y+5, r25	; 0x05
     bbc:	8c 83       	std	Y+4, r24	; 0x04
     bbe:	83 94       	inc	r8
     bc0:	7f cf       	rjmp	.-258    	; 0xac0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x6c>
     bc2:	ec 81       	ldd	r30, Y+4	; 0x04
     bc4:	fd 81       	ldd	r31, Y+5	; 0x05
     bc6:	c2 80       	ldd	r12, Z+2	; 0x02
     bc8:	d3 80       	ldd	r13, Z+3	; 0x03
     bca:	b8 01       	movw	r22, r16
     bcc:	c6 01       	movw	r24, r12
     bce:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     bd2:	88 23       	and	r24, r24
     bd4:	f1 f1       	breq	.+124    	; 0xc52 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x1fe>
     bd6:	48 28       	or	r4, r8
     bd8:	59 28       	or	r5, r9
     bda:	6a 28       	or	r6, r10
     bdc:	7b 28       	or	r7, r11
     bde:	8c 81       	ldd	r24, Y+4	; 0x04
     be0:	9d 81       	ldd	r25, Y+5	; 0x05
     be2:	04 96       	adiw	r24, 0x04	; 4
     be4:	9d 83       	std	Y+5, r25	; 0x05
     be6:	8c 83       	std	Y+4, r24	; 0x04
     be8:	88 0c       	add	r8, r8
     bea:	99 1c       	adc	r9, r9
     bec:	aa 1c       	adc	r10, r10
     bee:	bb 1c       	adc	r11, r11
     bf0:	99 81       	ldd	r25, Y+1	; 0x01
     bf2:	91 50       	subi	r25, 0x01	; 1
     bf4:	99 83       	std	Y+1, r25	; 0x01
     bf6:	99 81       	ldd	r25, Y+1	; 0x01
     bf8:	99 23       	and	r25, r25
     bfa:	09 f4       	brne	.+2      	; 0xbfe <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x1aa>
     bfc:	57 c0       	rjmp	.+174    	; 0xcac <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x258>
     bfe:	b1 01       	movw	r22, r2
     c00:	ec 81       	ldd	r30, Y+4	; 0x04
     c02:	fd 81       	ldd	r31, Y+5	; 0x05
     c04:	80 81       	ld	r24, Z
     c06:	91 81       	ldd	r25, Z+1	; 0x01
     c08:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     c0c:	d8 2e       	mov	r13, r24
     c0e:	81 11       	cpse	r24, r1
     c10:	d8 cf       	rjmp	.-80     	; 0xbc2 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x16e>
     c12:	6b e9       	ldi	r22, 0x9B	; 155
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	83 e2       	ldi	r24, 0x23	; 35
     c18:	97 e0       	ldi	r25, 0x07	; 7
     c1a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     c1e:	ec 81       	ldd	r30, Y+4	; 0x04
     c20:	fd 81       	ldd	r31, Y+5	; 0x05
     c22:	80 81       	ld	r24, Z
     c24:	91 81       	ldd	r25, Z+1	; 0x01
     c26:	22 e3       	ldi	r18, 0x32	; 50
     c28:	28 9f       	mul	r18, r24
     c2a:	b0 01       	movw	r22, r0
     c2c:	29 9f       	mul	r18, r25
     c2e:	70 0d       	add	r23, r0
     c30:	11 24       	eor	r1, r1
     c32:	4a e0       	ldi	r20, 0x0A	; 10
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	83 e2       	ldi	r24, 0x23	; 35
     c38:	97 e0       	ldi	r25, 0x07	; 7
     c3a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     c3e:	62 e9       	ldi	r22, 0x92	; 146
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	83 e2       	ldi	r24, 0x23	; 35
     c44:	97 e0       	ldi	r25, 0x07	; 7
     c46:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     c4a:	4a e0       	ldi	r20, 0x0A	; 10
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	b1 01       	movw	r22, r2
     c50:	a7 cf       	rjmp	.-178    	; 0xba0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x14c>
     c52:	b7 01       	movw	r22, r14
     c54:	c6 01       	movw	r24, r12
     c56:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     c5a:	d8 2e       	mov	r13, r24
     c5c:	81 11       	cpse	r24, r1
     c5e:	bf cf       	rjmp	.-130    	; 0xbde <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x18a>
     c60:	6b e8       	ldi	r22, 0x8B	; 139
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	83 e2       	ldi	r24, 0x23	; 35
     c66:	97 e0       	ldi	r25, 0x07	; 7
     c68:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     c6c:	ec 81       	ldd	r30, Y+4	; 0x04
     c6e:	fd 81       	ldd	r31, Y+5	; 0x05
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	22 e3       	ldi	r18, 0x32	; 50
     c76:	28 9f       	mul	r18, r24
     c78:	b0 01       	movw	r22, r0
     c7a:	29 9f       	mul	r18, r25
     c7c:	70 0d       	add	r23, r0
     c7e:	11 24       	eor	r1, r1
     c80:	4a e0       	ldi	r20, 0x0A	; 10
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	83 e2       	ldi	r24, 0x23	; 35
     c86:	97 e0       	ldi	r25, 0x07	; 7
     c88:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     c8c:	62 e8       	ldi	r22, 0x82	; 130
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	83 e2       	ldi	r24, 0x23	; 35
     c92:	97 e0       	ldi	r25, 0x07	; 7
     c94:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     c98:	4a e0       	ldi	r20, 0x0A	; 10
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	b8 01       	movw	r22, r16
     c9e:	83 e2       	ldi	r24, 0x23	; 35
     ca0:	97 e0       	ldi	r25, 0x07	; 7
     ca2:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     ca6:	6d e7       	ldi	r22, 0x7D	; 125
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	73 cf       	rjmp	.-282    	; 0xb92 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x13e>
     cac:	ea 81       	ldd	r30, Y+2	; 0x02
     cae:	fb 81       	ldd	r31, Y+3	; 0x03
     cb0:	47 8a       	std	Z+23, r4	; 0x17
     cb2:	50 8e       	std	Z+24, r5	; 0x18
     cb4:	61 8e       	std	Z+25, r6	; 0x19
     cb6:	72 8e       	std	Z+26, r7	; 0x1a
     cb8:	dd 24       	eor	r13, r13
     cba:	d3 94       	inc	r13
     cbc:	8d 2d       	mov	r24, r13
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	7f 90       	pop	r7
     ce2:	6f 90       	pop	r6
     ce4:	5f 90       	pop	r5
     ce6:	4f 90       	pop	r4
     ce8:	3f 90       	pop	r3
     cea:	2f 90       	pop	r2
     cec:	08 95       	ret

00000cee <_ZN6IRrecv17decodeBiPhaseDataEhhhj>:
     cee:	2f 92       	push	r2
     cf0:	3f 92       	push	r3
     cf2:	4f 92       	push	r4
     cf4:	5f 92       	push	r5
     cf6:	6f 92       	push	r6
     cf8:	7f 92       	push	r7
     cfa:	8f 92       	push	r8
     cfc:	9f 92       	push	r9
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	2c 97       	sbiw	r28, 0x0c	; 12
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	9d 83       	std	Y+5, r25	; 0x05
     d24:	8c 83       	std	Y+4, r24	; 0x04
     d26:	6a 87       	std	Y+10, r22	; 0x0a
     d28:	58 01       	movw	r10, r16
     d2a:	dc 01       	movw	r26, r24
     d2c:	5b 96       	adiw	r26, 0x1b	; 27
     d2e:	0d 90       	ld	r0, X+
     d30:	bc 91       	ld	r27, X
     d32:	a0 2d       	mov	r26, r0
     d34:	bb 83       	std	Y+3, r27	; 0x03
     d36:	aa 83       	std	Y+2, r26	; 0x02
     d38:	a4 0f       	add	r26, r20
     d3a:	b1 1d       	adc	r27, r1
     d3c:	a4 0f       	add	r26, r20
     d3e:	b1 1d       	adc	r27, r1
     d40:	18 96       	adiw	r26, 0x08	; 8
     d42:	bc 87       	std	Y+12, r27	; 0x0c
     d44:	ab 87       	std	Y+11, r26	; 0x0b
     d46:	41 70       	andi	r20, 0x01	; 1
     d48:	49 83       	std	Y+1, r20	; 0x01
     d4a:	92 2f       	mov	r25, r18
     d4c:	91 70       	andi	r25, 0x01	; 1
     d4e:	38 01       	movw	r6, r16
     d50:	66 0c       	add	r6, r6
     d52:	77 1c       	adc	r7, r7
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	c1 2c       	mov	r12, r1
     d58:	d1 2c       	mov	r13, r1
     d5a:	76 01       	movw	r14, r12
     d5c:	00 e0       	ldi	r16, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 27       	eor	r24, r25
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	2e 83       	std	Y+6, r18	; 0x06
     d6c:	3f 83       	std	Y+7, r19	; 0x07
     d6e:	48 87       	std	Y+8, r20	; 0x08
     d70:	59 87       	std	Y+9, r21	; 0x09
     d72:	29 2e       	mov	r2, r25
     d74:	31 2c       	mov	r3, r1
     d76:	41 2c       	mov	r4, r1
     d78:	51 2c       	mov	r5, r1
     d7a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d7c:	13 17       	cp	r17, r19
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x94>
     d80:	73 c0       	rjmp	.+230    	; 0xe68 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x17a>
     d82:	49 81       	ldd	r20, Y+1	; 0x01
     d84:	44 23       	and	r20, r20
     d86:	39 f1       	breq	.+78     	; 0xdd6 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0xe8>
     d88:	ab 85       	ldd	r26, Y+11	; 0x0b
     d8a:	bc 85       	ldd	r27, Y+12	; 0x0c
     d8c:	8d 90       	ld	r8, X+
     d8e:	9c 90       	ld	r9, X
     d90:	b5 01       	movw	r22, r10
     d92:	c4 01       	movw	r24, r8
     d94:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     d98:	88 23       	and	r24, r24
     d9a:	61 f0       	breq	.+24     	; 0xdb4 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0xc6>
     d9c:	0f 5f       	subi	r16, 0xFF	; 255
     d9e:	00 ff       	sbrs	r16, 0
     da0:	59 c0       	rjmp	.+178    	; 0xe54 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x166>
     da2:	cc 0c       	add	r12, r12
     da4:	dd 1c       	adc	r13, r13
     da6:	ee 1c       	adc	r14, r14
     da8:	ff 1c       	adc	r15, r15
     daa:	c2 28       	or	r12, r2
     dac:	d3 28       	or	r13, r3
     dae:	e4 28       	or	r14, r4
     db0:	f5 28       	or	r15, r5
     db2:	37 c0       	rjmp	.+110    	; 0xe22 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x134>
     db4:	b3 01       	movw	r22, r6
     db6:	c4 01       	movw	r24, r8
     db8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
     dbc:	08 2f       	mov	r16, r24
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0xd6>
     dc2:	91 c0       	rjmp	.+290    	; 0xee6 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x1f8>
     dc4:	cc 0c       	add	r12, r12
     dc6:	dd 1c       	adc	r13, r13
     dc8:	ee 1c       	adc	r14, r14
     dca:	ff 1c       	adc	r15, r15
     dcc:	c2 28       	or	r12, r2
     dce:	d3 28       	or	r13, r3
     dd0:	e4 28       	or	r14, r4
     dd2:	f5 28       	or	r15, r5
     dd4:	3d c0       	rjmp	.+122    	; 0xe50 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x162>
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	24 81       	ldd	r18, Z+4	; 0x04
     ddc:	cf 01       	movw	r24, r30
     dde:	82 0f       	add	r24, r18
     de0:	91 1d       	adc	r25, r1
     de2:	82 0f       	add	r24, r18
     de4:	91 1d       	adc	r25, r1
     de6:	08 96       	adiw	r24, 0x08	; 8
     de8:	2b 85       	ldd	r18, Y+11	; 0x0b
     dea:	3c 85       	ldd	r19, Y+12	; 0x0c
     dec:	28 17       	cp	r18, r24
     dee:	39 07       	cpc	r19, r25
     df0:	49 f0       	breq	.+18     	; 0xe04 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x116>
     df2:	d9 01       	movw	r26, r18
     df4:	8d 90       	ld	r8, X+
     df6:	9c 90       	ld	r9, X
     df8:	b5 01       	movw	r22, r10
     dfa:	c4 01       	movw	r24, r8
     dfc:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     e00:	88 23       	and	r24, r24
     e02:	89 f0       	breq	.+34     	; 0xe26 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x138>
     e04:	0f 5f       	subi	r16, 0xFF	; 255
     e06:	00 ff       	sbrs	r16, 0
     e08:	25 c0       	rjmp	.+74     	; 0xe54 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x166>
     e0a:	cc 0c       	add	r12, r12
     e0c:	dd 1c       	adc	r13, r13
     e0e:	ee 1c       	adc	r14, r14
     e10:	ff 1c       	adc	r15, r15
     e12:	2e 81       	ldd	r18, Y+6	; 0x06
     e14:	3f 81       	ldd	r19, Y+7	; 0x07
     e16:	48 85       	ldd	r20, Y+8	; 0x08
     e18:	59 85       	ldd	r21, Y+9	; 0x09
     e1a:	c2 2a       	or	r12, r18
     e1c:	d3 2a       	or	r13, r19
     e1e:	e4 2a       	or	r14, r20
     e20:	f5 2a       	or	r15, r21
     e22:	1f 5f       	subi	r17, 0xFF	; 255
     e24:	17 c0       	rjmp	.+46     	; 0xe54 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x166>
     e26:	b3 01       	movw	r22, r6
     e28:	c4 01       	movw	r24, r8
     e2a:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
     e2e:	08 2f       	mov	r16, r24
     e30:	88 23       	and	r24, r24
     e32:	21 f1       	breq	.+72     	; 0xe7c <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x18e>
     e34:	11 23       	and	r17, r17
     e36:	61 f0       	breq	.+24     	; 0xe50 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x162>
     e38:	cc 0c       	add	r12, r12
     e3a:	dd 1c       	adc	r13, r13
     e3c:	ee 1c       	adc	r14, r14
     e3e:	ff 1c       	adc	r15, r15
     e40:	8e 81       	ldd	r24, Y+6	; 0x06
     e42:	9f 81       	ldd	r25, Y+7	; 0x07
     e44:	a8 85       	ldd	r26, Y+8	; 0x08
     e46:	b9 85       	ldd	r27, Y+9	; 0x09
     e48:	c8 2a       	or	r12, r24
     e4a:	d9 2a       	or	r13, r25
     e4c:	ea 2a       	or	r14, r26
     e4e:	fb 2a       	or	r15, r27
     e50:	1f 5f       	subi	r17, 0xFF	; 255
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	eb 85       	ldd	r30, Y+11	; 0x0b
     e56:	fc 85       	ldd	r31, Y+12	; 0x0c
     e58:	32 96       	adiw	r30, 0x02	; 2
     e5a:	fc 87       	std	Y+12, r31	; 0x0c
     e5c:	eb 87       	std	Y+11, r30	; 0x0b
     e5e:	f9 81       	ldd	r31, Y+1	; 0x01
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	f2 27       	eor	r31, r18
     e64:	f9 83       	std	Y+1, r31	; 0x01
     e66:	89 cf       	rjmp	.-238    	; 0xd7a <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x8c>
     e68:	ac 81       	ldd	r26, Y+4	; 0x04
     e6a:	bd 81       	ldd	r27, Y+5	; 0x05
     e6c:	57 96       	adiw	r26, 0x17	; 23
     e6e:	cd 92       	st	X+, r12
     e70:	dd 92       	st	X+, r13
     e72:	ed 92       	st	X+, r14
     e74:	fc 92       	st	X, r15
     e76:	5a 97       	sbiw	r26, 0x1a	; 26
     e78:	01 e0       	ldi	r16, 0x01	; 1
     e7a:	35 c0       	rjmp	.+106    	; 0xee6 <_ZN6IRrecv17decodeBiPhaseDataEhhhj+0x1f8>
     e7c:	66 e7       	ldi	r22, 0x76	; 118
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	83 e2       	ldi	r24, 0x23	; 35
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     e88:	ab 85       	ldd	r26, Y+11	; 0x0b
     e8a:	bc 85       	ldd	r27, Y+12	; 0x0c
     e8c:	8d 91       	ld	r24, X+
     e8e:	9c 91       	ld	r25, X
     e90:	22 e3       	ldi	r18, 0x32	; 50
     e92:	28 9f       	mul	r18, r24
     e94:	b0 01       	movw	r22, r0
     e96:	29 9f       	mul	r18, r25
     e98:	70 0d       	add	r23, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	4a e0       	ldi	r20, 0x0A	; 10
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	83 e2       	ldi	r24, 0x23	; 35
     ea2:	97 e0       	ldi	r25, 0x07	; 7
     ea4:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     ea8:	6d e6       	ldi	r22, 0x6D	; 109
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	83 e2       	ldi	r24, 0x23	; 35
     eae:	97 e0       	ldi	r25, 0x07	; 7
     eb0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     eb4:	4a e0       	ldi	r20, 0x0A	; 10
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	b5 01       	movw	r22, r10
     eba:	83 e2       	ldi	r24, 0x23	; 35
     ebc:	97 e0       	ldi	r25, 0x07	; 7
     ebe:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     ec2:	68 e6       	ldi	r22, 0x68	; 104
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	83 e2       	ldi	r24, 0x23	; 35
     ec8:	97 e0       	ldi	r25, 0x07	; 7
     eca:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
     ece:	4a e0       	ldi	r20, 0x0A	; 10
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	b3 01       	movw	r22, r6
     ed4:	83 e2       	ldi	r24, 0x23	; 35
     ed6:	97 e0       	ldi	r25, 0x07	; 7
     ed8:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
     edc:	60 e2       	ldi	r22, 0x20	; 32
     ede:	83 e2       	ldi	r24, 0x23	; 35
     ee0:	97 e0       	ldi	r25, 0x07	; 7
     ee2:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN5Print5printEc>
     ee6:	80 2f       	mov	r24, r16
     ee8:	2c 96       	adiw	r28, 0x0c	; 12
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	bf 90       	pop	r11
     f06:	af 90       	pop	r10
     f08:	9f 90       	pop	r9
     f0a:	8f 90       	pop	r8
     f0c:	7f 90       	pop	r7
     f0e:	6f 90       	pop	r6
     f10:	5f 90       	pop	r5
     f12:	4f 90       	pop	r4
     f14:	3f 90       	pop	r3
     f16:	2f 90       	pop	r2
     f18:	08 95       	ret

00000f1a <_Z14setFeedbackLEDb>:
     f1a:	98 2f       	mov	r25, r24
     f1c:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <irparams+0x3>
     f20:	88 23       	and	r24, r24
     f22:	81 f0       	breq	.+32     	; 0xf44 <_Z14setFeedbackLEDb+0x2a>
     f24:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <irparams+0x2>
     f28:	99 23       	and	r25, r25
     f2a:	31 f0       	breq	.+12     	; 0xf38 <_Z14setFeedbackLEDb+0x1e>
     f2c:	88 23       	and	r24, r24
     f2e:	11 f0       	breq	.+4      	; 0xf34 <_Z14setFeedbackLEDb+0x1a>
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <_Z14setFeedbackLEDb+0x24>
     f34:	2d 9a       	sbi	0x05, 5	; 5
     f36:	08 95       	ret
     f38:	88 23       	and	r24, r24
     f3a:	19 f0       	breq	.+6      	; 0xf42 <_Z14setFeedbackLEDb+0x28>
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <digitalWrite>
     f42:	2d 98       	cbi	0x05, 5	; 5
     f44:	08 95       	ret

00000f46 <__vector_8>:
// As soon as a the first [SPACE] entry gets long:
//   Ready is set; State switches to IDLE; Timing of SPACE continues.
// As soon as first MARK arrives:
//   Gap width is recorded; Ready is cleared; New logging starts
//
ISR (TIMER_INTR_NAME) {
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
    TIMER_RESET_INTR_PENDING; // reset timer interrupt flag if required (currently only for Teensy and ATmega4809)

    // Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
    uint8_t irdata = (uint8_t) digitalRead(irparams.recvpin);
     f68:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <irparams+0x1>
     f6c:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <digitalRead>

    irparams.timer++;  // One more 50uS tick
     f70:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <irparams+0x5>
     f74:	30 91 56 06 	lds	r19, 0x0656	; 0x800656 <irparams+0x6>
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255

    // clip timer at maximum 0xFFFF
    if (irparams.timer == 0) {
     f7c:	21 f0       	breq	.+8      	; 0xf86 <__vector_8+0x40>
    TIMER_RESET_INTR_PENDING; // reset timer interrupt flag if required (currently only for Teensy and ATmega4809)

    // Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
    uint8_t irdata = (uint8_t) digitalRead(irparams.recvpin);

    irparams.timer++;  // One more 50uS tick
     f7e:	30 93 56 06 	sts	0x0656, r19	; 0x800656 <irparams+0x6>
     f82:	20 93 55 06 	sts	0x0655, r18	; 0x800655 <irparams+0x5>
     * Due to a ESP32 compiler bug https://github.com/espressif/esp-idf/issues/1552 no switch statements are possible for ESP32
     * So we change the code to if / else if
     */
//    switch (irparams.rcvstate) {
    //......................................................................
    if (irparams.rcvstate == IR_REC_STATE_IDLE) { // In the middle of a gap
     f86:	90 91 50 06 	lds	r25, 0x0650	; 0x800650 <irparams>
     f8a:	91 11       	cpse	r25, r1
     f8c:	18 c0       	rjmp	.+48     	; 0xfbe <__vector_8+0x78>
        if (irdata == MARK) {
     f8e:	81 11       	cpse	r24, r1
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <__vector_8+0x78>
            // check if we did not start in the middle of an command by checking the minimum length of leading space
            if (irparams.timer > RECORD_GAP_TICKS) {
     f92:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <irparams+0x5>
     f96:	30 91 56 06 	lds	r19, 0x0656	; 0x800656 <irparams+0x6>
     f9a:	25 36       	cpi	r18, 0x65	; 101
     f9c:	31 05       	cpc	r19, r1
     f9e:	58 f0       	brcs	.+22     	; 0xfb6 <__vector_8+0x70>
                // Gap just ended; Record gap duration + start recording transmission
                // Initialize all state machine variables
                irparams.overflow = false;
     fa0:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <irparams+0x7>
                irparams.rawbuf[0] = irparams.timer;
     fa4:	30 93 59 06 	sts	0x0659, r19	; 0x800659 <irparams+0x9>
     fa8:	20 93 58 06 	sts	0x0658, r18	; 0x800658 <irparams+0x8>
                irparams.rawlen = 1;
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <irparams+0x4>
                irparams.rcvstate = IR_REC_STATE_MARK;
     fb2:	90 93 50 06 	sts	0x0650, r25	; 0x800650 <irparams>
            }
            irparams.timer = 0;
     fb6:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <irparams+0x6>
     fba:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <irparams+0x5>
        }
    }

    // First check for buffer overflow
    if (irparams.rawlen >= RAW_BUFFER_LENGTH) {
     fbe:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <irparams+0x4>
     fc2:	e5 36       	cpi	r30, 0x65	; 101
     fc4:	30 f0       	brcs	.+12     	; 0xfd2 <__vector_8+0x8c>
        // Flag up a read overflow; Stop the State Machine
        irparams.overflow = true;
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	90 93 57 06 	sts	0x0657, r25	; 0x800657 <irparams+0x7>
        irparams.rcvstate = IR_REC_STATE_STOP;
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	90 93 50 06 	sts	0x0650, r25	; 0x800650 <irparams>

    /*
     * Here we detected a start mark and record the signal
     */
    // record marks and spaces and detect end of code
    if (irparams.rcvstate == IR_REC_STATE_MARK) {  // Timing Mark
     fd2:	90 91 50 06 	lds	r25, 0x0650	; 0x800650 <irparams>
     fd6:	91 30       	cpi	r25, 0x01	; 1
     fd8:	b9 f4       	brne	.+46     	; 0x1008 <__vector_8+0xc2>
        if (irdata == SPACE) {   // Mark ended; Record time
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <__vector_8+0x9a>
     fde:	40 c0       	rjmp	.+128    	; 0x1060 <__vector_8+0x11a>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     fe0:	9e 0f       	add	r25, r30
     fe2:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <irparams+0x4>
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	e8 5a       	subi	r30, 0xA8	; 168
     fee:	f9 4f       	sbci	r31, 0xF9	; 249
     ff0:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <irparams+0x5>
     ff4:	30 91 56 06 	lds	r19, 0x0656	; 0x800656 <irparams+0x6>
     ff8:	31 83       	std	Z+1, r19	; 0x01
     ffa:	20 83       	st	Z, r18
            irparams.timer = 0;
     ffc:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <irparams+0x6>
    1000:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <irparams+0x5>
            irparams.rcvstate = IR_REC_STATE_SPACE;
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	1a c0       	rjmp	.+52     	; 0x103c <__vector_8+0xf6>
        }
    } else if (irparams.rcvstate == IR_REC_STATE_SPACE) {  // Timing Space
    1008:	90 91 50 06 	lds	r25, 0x0650	; 0x800650 <irparams>
    100c:	92 30       	cpi	r25, 0x02	; 2
    100e:	f1 f4       	brne	.+60     	; 0x104c <__vector_8+0x106>
    1010:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <irparams+0x5>
    1014:	30 91 56 06 	lds	r19, 0x0656	; 0x800656 <irparams+0x6>
        if (irdata == MARK) {  // Space just ended; Record time
    1018:	81 11       	cpse	r24, r1
    101a:	13 c0       	rjmp	.+38     	; 0x1042 <__vector_8+0xfc>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	9e 0f       	add	r25, r30
    1020:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <irparams+0x4>
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	e8 5a       	subi	r30, 0xA8	; 168
    102c:	f9 4f       	sbci	r31, 0xF9	; 249
    102e:	31 83       	std	Z+1, r19	; 0x01
    1030:	20 83       	st	Z, r18
            irparams.timer = 0;
    1032:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <irparams+0x6>
    1036:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <irparams+0x5>
            irparams.rcvstate = IR_REC_STATE_MARK;
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	90 93 50 06 	sts	0x0650, r25	; 0x800650 <irparams>
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <__vector_8+0x11a>

        } else if (irparams.timer > RECORD_GAP_TICKS) {
    1042:	25 36       	cpi	r18, 0x65	; 101
    1044:	31 05       	cpc	r19, r1
    1046:	60 f0       	brcs	.+24     	; 0x1060 <__vector_8+0x11a>
            /*
             * A long Space, indicates gap between codes
             * Switch to IR_REC_STATE_STOP, which means current code is ready for processing
             * Don't reset timer; keep counting width of next leading space
             */
            irparams.rcvstate = IR_REC_STATE_STOP;
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	f8 cf       	rjmp	.-16     	; 0x103c <__vector_8+0xf6>
        }
    } else if (irparams.rcvstate == IR_REC_STATE_STOP) {
    104c:	90 91 50 06 	lds	r25, 0x0650	; 0x800650 <irparams>
    1050:	93 30       	cpi	r25, 0x03	; 3
    1052:	31 f4       	brne	.+12     	; 0x1060 <__vector_8+0x11a>
        /*
         * Complete command received
         * stay here until resume() is called, which switches state to IR_REC_STATE_IDLE
         */
        if (irdata == MARK) {
    1054:	81 11       	cpse	r24, r1
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__vector_8+0x11a>
            irparams.timer = 0;  // Reset gap timer, to prepare for call of resume()
    1058:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <irparams+0x6>
    105c:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <irparams+0x5>
        }
    }
    setFeedbackLED(irdata == MARK);
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	81 11       	cpse	r24, r1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	89 2f       	mov	r24, r25
    1068:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_Z14setFeedbackLEDb>
}
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <setup>:
IRrecv recIR(receptor);
decode_results resultado;
LiquidCrystal lcd(7, 6, 5, 4, 3, 2);

void setup() {
lcd.begin(16,2); // Inicialização do lcd
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	42 e0       	ldi	r20, 0x02	; 2
    1092:	60 e1       	ldi	r22, 0x10	; 16
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	96 e0       	ldi	r25, 0x06	; 6
    1098:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN13LiquidCrystal5beginEhhh>
recIR.enableIRIn(); // Inicialização do receptor
    109c:	86 e2       	ldi	r24, 0x26	; 38
    109e:	96 e0       	ldi	r25, 0x06	; 6
    10a0:	0e 94 29 02 	call	0x452	; 0x452 <_ZN6IRrecv10enableIRInEv>
pinMode(relepin, OUTPUT);
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	8d e0       	ldi	r24, 0x0D	; 13
    10a8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <pinMode>
lcd.setCursor(0,0);
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	96 e0       	ldi	r25, 0x06	; 6
    10b4:	0e 94 c4 13 	call	0x2788	; 0x2788 <_ZN13LiquidCrystal9setCursorEhh>
lcd.print("Codigo Lido no Re");
    10b8:	60 e9       	ldi	r22, 0x90	; 144
    10ba:	71 e0       	ldi	r23, 0x01	; 1
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	96 e0       	ldi	r25, 0x06	; 6
    10c0:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>

000010c4 <_Z10acionaRelev>:

}
// Função Aciona rele para acionar o nosso rele quando um sinal mandado
void acionaRele(){
  int relepin_state = digitalRead(relepin); // ele pega a estatuto  atual no pino do rele
    10c4:	8d e0       	ldi	r24, 0x0D	; 13
    10c6:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <digitalRead>
  digitalWrite(relepin, !relepin_state); // aqui vai mudar o estatutos ou seja se fosse 0 ele vai para 1 
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	89 2b       	or	r24, r25
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <_Z10acionaRelev+0xe>
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	8d e0       	ldi	r24, 0x0D	; 13
    10d4:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <digitalWrite>

000010d8 <loop>:
  }
void loop() {
  if (recIR.decode(&resultado)){
    10d8:	68 e1       	ldi	r22, 0x18	; 24
    10da:	76 e0       	ldi	r23, 0x06	; 6
    10dc:	86 e2       	ldi	r24, 0x26	; 38
    10de:	96 e0       	ldi	r25, 0x06	; 6
    10e0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN6IRrecv6decodeEP14decode_results>
    10e4:	88 23       	and	r24, r24
    10e6:	61 f1       	breq	.+88     	; 0x1140 <loop+0x68>
    codigo = (resultado.value);
    10e8:	60 91 19 06 	lds	r22, 0x0619	; 0x800619 <resultado+0x1>
    10ec:	70 91 1a 06 	lds	r23, 0x061A	; 0x80061a <resultado+0x2>
    10f0:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <resultado+0x3>
    10f4:	90 91 1c 06 	lds	r25, 0x061C	; 0x80061c <resultado+0x4>
    10f8:	0e 94 aa 14 	call	0x2954	; 0x2954 <__floatunsisf>
    10fc:	60 93 4c 06 	sts	0x064C, r22	; 0x80064c <codigo>
    1100:	70 93 4d 06 	sts	0x064D, r23	; 0x80064d <codigo+0x1>
    1104:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <codigo+0x2>
    1108:	90 93 4f 06 	sts	0x064F, r25	; 0x80064f <codigo+0x3>
      /*if (16580863==codigo){
       acionaRele();
    }*/
    acionaRele();
    110c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_Z10acionaRelev>
    lcd.setCursor(5,1);
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	65 e0       	ldi	r22, 0x05	; 5
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	96 e0       	ldi	r25, 0x06	; 6
    1118:	0e 94 c4 13 	call	0x2788	; 0x2788 <_ZN13LiquidCrystal9setCursorEhh>
    lcd.print(resultado.value, HEX);
    111c:	40 91 19 06 	lds	r20, 0x0619	; 0x800619 <resultado+0x1>
    1120:	50 91 1a 06 	lds	r21, 0x061A	; 0x80061a <resultado+0x2>
    1124:	60 91 1b 06 	lds	r22, 0x061B	; 0x80061b <resultado+0x3>
    1128:	70 91 1c 06 	lds	r23, 0x061C	; 0x80061c <resultado+0x4>
    112c:	20 e1       	ldi	r18, 0x10	; 16
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	96 e0       	ldi	r25, 0x06	; 6
    1134:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print5printEmi>
    //lcd.print(codigo, HEX); // codigo transformado em decimal
    recIR.resume();
    1138:	86 e2       	ldi	r24, 0x26	; 38
    113a:	96 e0       	ldi	r25, 0x06	; 6
    113c:	0c 94 22 02 	jmp	0x444	; 0x444 <_ZN6IRrecv6resumeEv>
    1140:	08 95       	ret

00001142 <_GLOBAL__sub_I_IrReceiver>:
    }

}
    1142:	cf 92       	push	r12
    1144:	ef 92       	push	r14
    1146:	0f 93       	push	r16
 * Instantiate the IRrecv class. Multiple instantiation is not supported.
 * @param recvpin Arduino pin to use. No sanity check is made.
 */
IRrecv::IRrecv() {
    irparams.recvpin = 0;
    irparams.blinkflag = false;
    1148:	e0 e5       	ldi	r30, 0x50	; 80
    114a:	f6 e0       	ldi	r31, 0x06	; 6
    114c:	13 82       	std	Z+3, r1	; 0x03
IRsend::IRsend(int pin) {
    sendPin = pin;
}
#else
IRsend::IRsend() {
    sendPin = IR_SEND_PIN;
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <IrSender>
}

IRrecv::IRrecv(uint8_t recvpin) {
    irparams.recvpin = recvpin;
    1154:	8b e0       	ldi	r24, 0x0B	; 11
    1156:	81 83       	std	Z+1, r24	; 0x01
int state = LOW; // o status do rele é baixo 
float codigo;

IRrecv recIR(receptor);
decode_results resultado;
LiquidCrystal lcd(7, 6, 5, 4, 3, 2);
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	c8 2e       	mov	r12, r24
    115c:	93 e0       	ldi	r25, 0x03	; 3
    115e:	e9 2e       	mov	r14, r25
    1160:	04 e0       	ldi	r16, 0x04	; 4
    1162:	25 e0       	ldi	r18, 0x05	; 5
    1164:	46 e0       	ldi	r20, 0x06	; 6
    1166:	67 e0       	ldi	r22, 0x07	; 7
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	96 e0       	ldi	r25, 0x06	; 6
    116c:	0e 94 84 14 	call	0x2908	; 0x2908 <_ZN13LiquidCrystalC1Ehhhhhh>
    lcd.print(resultado.value, HEX);
    //lcd.print(codigo, HEX); // codigo transformado em decimal
    recIR.resume();
    }

}
    1170:	0f 91       	pop	r16
    1172:	ef 90       	pop	r14
    1174:	cf 90       	pop	r12
    1176:	08 95       	ret

00001178 <_ZN6IRrecv14decodeBoseWaveEv>:
        }
    }
}

//+=============================================================================
bool IRrecv::decodeBoseWave() {
    1178:	cf 92       	push	r12
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24

    // Check header "mark"
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], BOSEWAVE_HEADER_MARK)) {
    1188:	eb 8d       	ldd	r30, Y+27	; 0x1b
    118a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    118c:	64 e2       	ldi	r22, 0x24	; 36
    118e:	74 e0       	ldi	r23, 0x04	; 4
    1190:	82 85       	ldd	r24, Z+10	; 0x0a
    1192:	93 85       	ldd	r25, Z+11	; 0x0b
    1194:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1198:	18 2f       	mov	r17, r24
    119a:	88 23       	and	r24, r24
    119c:	09 f4       	brne	.+2      	; 0x11a0 <_ZN6IRrecv14decodeBoseWaveEv+0x28>
    119e:	8e c0       	rjmp	.+284    	; 0x12bc <_ZN6IRrecv14decodeBoseWaveEv+0x144>
        // no debug output, since this check is mainly to determine the received protocol
        return false;
    }

    // Check we have enough data +4 for initial gap, start bit mark and space + stop bit mark
    if (decodedIRData.rawDataPtr->rawlen != (2 * BOSEWAVE_BITS) + 4) {
    11a0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    11a2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	84 32       	cpi	r24, 0x24	; 36
    11a8:	e1 f0       	breq	.+56     	; 0x11e2 <_ZN6IRrecv14decodeBoseWaveEv+0x6a>
        DBG_PRINT("Bose: ");
    11aa:	69 e3       	ldi	r22, 0x39	; 57
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	83 e2       	ldi	r24, 0x23	; 35
    11b0:	97 e0       	ldi	r25, 0x07	; 7
    11b2:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT("Data length=");
    11b6:	60 e4       	ldi	r22, 0x40	; 64
    11b8:	72 e0       	ldi	r23, 0x02	; 2
    11ba:	83 e2       	ldi	r24, 0x23	; 35
    11bc:	97 e0       	ldi	r25, 0x07	; 7
    11be:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(decodedIRData.rawDataPtr->rawlen);
    11c2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    11c4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    11c6:	4a e0       	ldi	r20, 0x0A	; 10
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	64 81       	ldd	r22, Z+4	; 0x04
    11cc:	83 e2       	ldi	r24, 0x23	; 35
    11ce:	97 e0       	ldi	r25, 0x07	; 7
    11d0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINTLN(" is not 36");
    11d4:	6d e4       	ldi	r22, 0x4D	; 77
    11d6:	72 e0       	ldi	r23, 0x02	; 2
    11d8:	83 e2       	ldi	r24, 0x23	; 35
    11da:	97 e0       	ldi	r25, 0x07	; 7
    11dc:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
    11e0:	5b c0       	rjmp	.+182    	; 0x1298 <_ZN6IRrecv14decodeBoseWaveEv+0x120>
        return false;
    }
    // Check header "space"
    if (!MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], BOSEWAVE_HEADER_SPACE)) {
    11e2:	6a ea       	ldi	r22, 0xAA	; 170
    11e4:	75 e0       	ldi	r23, 0x05	; 5
    11e6:	84 85       	ldd	r24, Z+12	; 0x0c
    11e8:	95 85       	ldd	r25, Z+13	; 0x0d
    11ea:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    11ee:	18 2f       	mov	r17, r24
    11f0:	81 11       	cpse	r24, r1
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <_ZN6IRrecv14decodeBoseWaveEv+0x8e>
        DBG_PRINT("Bose: ");
    11f4:	69 e3       	ldi	r22, 0x39	; 57
    11f6:	72 e0       	ldi	r23, 0x02	; 2
    11f8:	83 e2       	ldi	r24, 0x23	; 35
    11fa:	97 e0       	ldi	r25, 0x07	; 7
    11fc:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Header space length is wrong");
    1200:	68 e5       	ldi	r22, 0x58	; 88
    1202:	72 e0       	ldi	r23, 0x02	; 2
    1204:	19 c0       	rjmp	.+50     	; 0x1238 <_ZN6IRrecv14decodeBoseWaveEv+0xc0>
        return false;
    }

    if (!decodePulseDistanceData(BOSEWAVE_BITS, 3, BOSEWAVE_BIT_MARK, BOSEWAVE_ONE_SPACE, BOSEWAVE_ZERO_SPACE, false)) {
    1206:	c1 2c       	mov	r12, r1
    1208:	87 ea       	ldi	r24, 0xA7	; 167
    120a:	e8 2e       	mov	r14, r24
    120c:	85 e0       	ldi	r24, 0x05	; 5
    120e:	f8 2e       	mov	r15, r24
    1210:	04 ed       	ldi	r16, 0xD4	; 212
    1212:	11 e0       	ldi	r17, 0x01	; 1
    1214:	26 e1       	ldi	r18, 0x16	; 22
    1216:	32 e0       	ldi	r19, 0x02	; 2
    1218:	43 e0       	ldi	r20, 0x03	; 3
    121a:	60 e1       	ldi	r22, 0x10	; 16
    121c:	ce 01       	movw	r24, r28
    121e:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    1222:	18 2f       	mov	r17, r24
    1224:	81 11       	cpse	r24, r1
    1226:	0d c0       	rjmp	.+26     	; 0x1242 <_ZN6IRrecv14decodeBoseWaveEv+0xca>
        DBG_PRINT("Bose: ");
    1228:	69 e3       	ldi	r22, 0x39	; 57
    122a:	72 e0       	ldi	r23, 0x02	; 2
    122c:	83 e2       	ldi	r24, 0x23	; 35
    122e:	97 e0       	ldi	r25, 0x07	; 7
    1230:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Decode failed");
    1234:	65 e7       	ldi	r22, 0x75	; 117
    1236:	72 e0       	ldi	r23, 0x02	; 2
    1238:	83 e2       	ldi	r24, 0x23	; 35
    123a:	97 e0       	ldi	r25, 0x07	; 7
    123c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
        return false;
    1240:	3d c0       	rjmp	.+122    	; 0x12bc <_ZN6IRrecv14decodeBoseWaveEv+0x144>
    }

    // Stop bit
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3 + (2 * BOSEWAVE_BITS)], BOSEWAVE_BIT_MARK)) {
    1242:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1244:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1246:	e2 5b       	subi	r30, 0xB2	; 178
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	66 e1       	ldi	r22, 0x16	; 22
    124c:	72 e0       	ldi	r23, 0x02	; 2
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1256:	18 2f       	mov	r17, r24
    1258:	81 11       	cpse	r24, r1
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <_ZN6IRrecv14decodeBoseWaveEv+0xfe>
        DBG_PRINT("Bose: ");
    125c:	69 e3       	ldi	r22, 0x39	; 57
    125e:	72 e0       	ldi	r23, 0x02	; 2
    1260:	83 e2       	ldi	r24, 0x23	; 35
    1262:	97 e0       	ldi	r25, 0x07	; 7
    1264:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(F("Stop bit mark length is wrong"));
    1268:	6d e0       	ldi	r22, 0x0D	; 13
    126a:	71 e0       	ldi	r23, 0x01	; 1
    126c:	83 e2       	ldi	r24, 0x23	; 35
    126e:	97 e0       	ldi	r25, 0x07	; 7
    1270:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    1274:	23 c0       	rjmp	.+70     	; 0x12bc <_ZN6IRrecv14decodeBoseWaveEv+0x144>
    }

    // Success
//    decodedIRData.flags = IRDATA_FLAGS_IS_LSB_FIRST; // Not required, since this is the start value
    uint16_t tDecodedValue = decodedIRData.decodedRawData;
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	98 8d       	ldd	r25, Y+24	; 0x18
    uint8_t tCommandNotInverted = tDecodedValue & 0xFF;
    uint8_t tCommandInverted = tDecodedValue >> 8;
    // parity check for command. Use this variant to avoid compiler warning "comparison of promoted ~unsigned with unsigned [-Wsign-compare]"
    if ((tCommandNotInverted ^ tCommandInverted) != 0xFF) {
    127a:	98 27       	eor	r25, r24
    127c:	9f 3f       	cpi	r25, 0xFF	; 255
    127e:	71 f0       	breq	.+28     	; 0x129c <_ZN6IRrecv14decodeBoseWaveEv+0x124>
        DBG_PRINT("Bose: ");
    1280:	69 e3       	ldi	r22, 0x39	; 57
    1282:	72 e0       	ldi	r23, 0x02	; 2
    1284:	83 e2       	ldi	r24, 0x23	; 35
    1286:	97 e0       	ldi	r25, 0x07	; 7
    1288:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT("Command and inverted command check failed");
    128c:	63 e8       	ldi	r22, 0x83	; 131
    128e:	72 e0       	ldi	r23, 0x02	; 2
    1290:	83 e2       	ldi	r24, 0x23	; 35
    1292:	97 e0       	ldi	r25, 0x07	; 7
    1294:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        return false;
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	10 c0       	rjmp	.+32     	; 0x12bc <_ZN6IRrecv14decodeBoseWaveEv+0x144>
    }

    // check for repeat
    if (decodedIRData.rawDataPtr->rawbuf[0] < ((BOSEWAVE_REPEAT_SPACE + (BOSEWAVE_REPEAT_SPACE / 4)) / MICROS_PER_TICK)) {
    129c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    129e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    12a0:	20 85       	ldd	r18, Z+8	; 0x08
    12a2:	31 85       	ldd	r19, Z+9	; 0x09
    12a4:	24 31       	cpi	r18, 0x14	; 20
    12a6:	35 40       	sbci	r19, 0x05	; 5
    12a8:	10 f4       	brcc	.+4      	; 0x12ae <_ZN6IRrecv14decodeBoseWaveEv+0x136>
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_LSB_FIRST;
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	9e 8b       	std	Y+22, r25	; 0x16
    }

    decodedIRData.command = tCommandNotInverted;
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9a 8b       	std	Y+18, r25	; 0x12
    12b2:	89 8b       	std	Y+17, r24	; 0x11
    decodedIRData.protocol = BOSEWAVE;
    12b4:	82 e1       	ldi	r24, 0x12	; 18
    12b6:	8e 87       	std	Y+14, r24	; 0x0e
    decodedIRData.numberOfBits = BOSEWAVE_BITS;
    12b8:	80 e1       	ldi	r24, 0x10	; 16
    12ba:	8d 8b       	std	Y+21, r24	; 0x15

    return true;
}
    12bc:	81 2f       	mov	r24, r17
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	cf 90       	pop	r12
    12cc:	08 95       	ret

000012ce <_ZN6IRrecv11decodeDenonEv>:
    return decodeDenon();
}

//+=============================================================================
#if !defined(USE_OLD_DECODE)
bool IRrecv::decodeDenon() {
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29

    // we have no start bit, so check for the exact amount of data bits
    // Check we have the right amount of data (32). The + 2 is for initial gap + stop bit mark
    if (irparams.rawlen != (2 * DENON_BITS) + 2) {
    12de:	20 91 54 06 	lds	r18, 0x0654	; 0x800654 <irparams+0x4>
    12e2:	20 32       	cpi	r18, 0x20	; 32
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <_ZN6IRrecv11decodeDenonEv+0x1a>
    12e6:	7a c0       	rjmp	.+244    	; 0x13dc <_ZN6IRrecv11decodeDenonEv+0x10e>
    12e8:	ec 01       	movw	r28, r24
        return false;
    }

    // Read the bits in
    if (!decodePulseDistanceData(DENON_BITS, 1, DENON_BIT_MARK, DENON_ONE_SPACE, DENON_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    12ea:	cc 24       	eor	r12, r12
    12ec:	c3 94       	inc	r12
    12ee:	3c e0       	ldi	r19, 0x0C	; 12
    12f0:	e3 2e       	mov	r14, r19
    12f2:	33 e0       	ldi	r19, 0x03	; 3
    12f4:	f3 2e       	mov	r15, r19
    12f6:	0c e1       	ldi	r16, 0x1C	; 28
    12f8:	17 e0       	ldi	r17, 0x07	; 7
    12fa:	24 e0       	ldi	r18, 0x04	; 4
    12fc:	31 e0       	ldi	r19, 0x01	; 1
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	6f e0       	ldi	r22, 0x0F	; 15
    1302:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    1306:	18 2f       	mov	r17, r24
    1308:	81 11       	cpse	r24, r1
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <_ZN6IRrecv11decodeDenonEv+0x58>
        DBG_PRINT("Denon: ");
    130c:	6d ea       	ldi	r22, 0xAD	; 173
    130e:	72 e0       	ldi	r23, 0x02	; 2
    1310:	83 e2       	ldi	r24, 0x23	; 35
    1312:	97 e0       	ldi	r25, 0x07	; 7
    1314:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Decode failed");
    1318:	65 e7       	ldi	r22, 0x75	; 117
    131a:	72 e0       	ldi	r23, 0x02	; 2
    131c:	83 e2       	ldi	r24, 0x23	; 35
    131e:	97 e0       	ldi	r25, 0x07	; 7
    1320:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
        return false;
    1324:	5c c0       	rjmp	.+184    	; 0x13de <_ZN6IRrecv11decodeDenonEv+0x110>
    }

    // Check for stop mark
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[(2 * DENON_BITS) + 1], DENON_HEADER_MARK)) {
    1326:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1328:	fc 8d       	ldd	r31, Y+28	; 0x1c
    132a:	ea 5b       	subi	r30, 0xBA	; 186
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	64 e0       	ldi	r22, 0x04	; 4
    1330:	71 e0       	ldi	r23, 0x01	; 1
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    133a:	18 2f       	mov	r17, r24
    133c:	81 11       	cpse	r24, r1
    133e:	0d c0       	rjmp	.+26     	; 0x135a <_ZN6IRrecv11decodeDenonEv+0x8c>
        DBG_PRINT("Denon: ");
    1340:	6d ea       	ldi	r22, 0xAD	; 173
    1342:	72 e0       	ldi	r23, 0x02	; 2
    1344:	83 e2       	ldi	r24, 0x23	; 35
    1346:	97 e0       	ldi	r25, 0x07	; 7
    1348:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(F("Stop bit mark length is wrong"));
    134c:	6b e2       	ldi	r22, 0x2B	; 43
    134e:	71 e0       	ldi	r23, 0x01	; 1
    1350:	83 e2       	ldi	r24, 0x23	; 35
    1352:	97 e0       	ldi	r25, 0x07	; 7
    1354:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    1358:	42 c0       	rjmp	.+132    	; 0x13de <_ZN6IRrecv11decodeDenonEv+0x110>
    }

    // Success
    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    135a:	80 e8       	ldi	r24, 0x80	; 128
    135c:	8e 8b       	std	Y+22, r24	; 0x16
    uint8_t tFrameBits = decodedIRData.decodedRawData & 0x03;
    135e:	cf 88       	ldd	r12, Y+23	; 0x17
    1360:	d8 8c       	ldd	r13, Y+24	; 0x18
    1362:	e9 8c       	ldd	r14, Y+25	; 0x19
    1364:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1366:	4c 2d       	mov	r20, r12
    1368:	43 70       	andi	r20, 0x03	; 3
    decodedIRData.command = decodedIRData.decodedRawData >> DENON_FRAME_BITS;
    136a:	d7 01       	movw	r26, r14
    136c:	c6 01       	movw	r24, r12
    136e:	22 e0       	ldi	r18, 0x02	; 2
    1370:	b6 95       	lsr	r27
    1372:	a7 95       	ror	r26
    1374:	97 95       	ror	r25
    1376:	87 95       	ror	r24
    1378:	2a 95       	dec	r18
    137a:	d1 f7       	brne	.-12     	; 0x1370 <_ZN6IRrecv11decodeDenonEv+0xa2>
    decodedIRData.address = decodedIRData.command >> DENON_COMMAND_BITS;
    137c:	9f 87       	std	Y+15, r25	; 0x0f
    137e:	18 8a       	std	Y+16, r1	; 0x10
    uint8_t tCommand = decodedIRData.command & 0xFF;
    decodedIRData.command = tCommand;
    1380:	9c 01       	movw	r18, r24
    1382:	33 27       	eor	r19, r19
    1384:	3a 8b       	std	Y+18, r19	; 0x12
    1386:	29 8b       	std	Y+17, r18	; 0x11

    // check for autorepeated inverted command
    if (decodedIRData.rawDataPtr->rawbuf[0] < ((DENON_AUTO_REPEAT_SPACE + (DENON_AUTO_REPEAT_SPACE / 4)) / MICROS_PER_TICK)) {
    1388:	eb 8d       	ldd	r30, Y+27	; 0x1b
    138a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    138c:	20 85       	ldd	r18, Z+8	; 0x08
    138e:	31 85       	ldd	r19, Z+9	; 0x09
    1390:	25 36       	cpi	r18, 0x65	; 101
    1392:	34 40       	sbci	r19, 0x04	; 4
    1394:	b8 f4       	brcc	.+46     	; 0x13c4 <_ZN6IRrecv11decodeDenonEv+0xf6>
        repeatCount++;
    1396:	2d a1       	ldd	r18, Y+37	; 0x25
    1398:	2f 5f       	subi	r18, 0xFF	; 255
    139a:	2d a3       	std	Y+37, r18	; 0x25
        if (tFrameBits == 0x3 || tFrameBits == 0x1) {
    139c:	c0 fe       	sbrs	r12, 0
    139e:	0c c0       	rjmp	.+24     	; 0x13b8 <_ZN6IRrecv11decodeDenonEv+0xea>
            // We are in the auto repeated frame with the inverted command
            decodedIRData.flags = IRDATA_FLAGS_IS_AUTO_REPEAT | IRDATA_FLAGS_IS_MSB_FIRST;
    13a0:	32 e8       	ldi	r19, 0x82	; 130
    13a2:	3e 8b       	std	Y+22, r19	; 0x16
            // Check parity of consecutive received commands. There is no parity in one data set.
            uint8_t tLastCommand = lastDecodedCommand;
    13a4:	39 a1       	ldd	r19, Y+33	; 0x21
            if (tLastCommand != (uint8_t) (~tCommand)) {
    13a6:	80 95       	com	r24
    13a8:	38 17       	cp	r19, r24
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <_ZN6IRrecv11decodeDenonEv+0xe2>
                decodedIRData.flags |= IRDATA_FLAGS_PARITY_FAILED;
    13ac:	86 e8       	ldi	r24, 0x86	; 134
    13ae:	8e 8b       	std	Y+22, r24	; 0x16
            }
            // always take non inverted command
            decodedIRData.command = tLastCommand;
    13b0:	83 2f       	mov	r24, r19
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9a 8b       	std	Y+18, r25	; 0x12
    13b6:	89 8b       	std	Y+17, r24	; 0x11
        }
        if (repeatCount > 1) {
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	28 f0       	brcs	.+10     	; 0x13c6 <_ZN6IRrecv11decodeDenonEv+0xf8>
            decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    13bc:	8e 89       	ldd	r24, Y+22	; 0x16
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	8e 8b       	std	Y+22, r24	; 0x16
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <_ZN6IRrecv11decodeDenonEv+0xf8>
        }
    } else {
        repeatCount = 0;
    13c4:	1d a2       	std	Y+37, r1	; 0x25
    }

    decodedIRData.numberOfBits = DENON_BITS;
    13c6:	9f e0       	ldi	r25, 0x0F	; 15
    13c8:	9d 8b       	std	Y+21, r25	; 0x15
    if (tFrameBits == 1 || tFrameBits == 2) {
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	84 0f       	add	r24, r20
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	10 f4       	brcc	.+4      	; 0x13d6 <_ZN6IRrecv11decodeDenonEv+0x108>
        decodedIRData.protocol = SHARP;
    13d2:	9e 87       	std	Y+14, r25	; 0x0e
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <_ZN6IRrecv11decodeDenonEv+0x110>
    } else {
        decodedIRData.protocol = DENON;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	8e 87       	std	Y+14, r24	; 0x0e
    13da:	01 c0       	rjmp	.+2      	; 0x13de <_ZN6IRrecv11decodeDenonEv+0x110>
bool IRrecv::decodeDenon() {

    // we have no start bit, so check for the exact amount of data bits
    // Check we have the right amount of data (32). The + 2 is for initial gap + stop bit mark
    if (irparams.rawlen != (2 * DENON_BITS) + 2) {
        return false;
    13dc:	10 e0       	ldi	r17, 0x00	; 0
        decodedIRData.protocol = SHARP;
    } else {
        decodedIRData.protocol = DENON;
    }
    return true;
}
    13de:	81 2f       	mov	r24, r17
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	df 90       	pop	r13
    13ee:	cf 90       	pop	r12
    13f0:	08 95       	ret

000013f2 <_ZN6IRrecv9decodeJVCEv>:
/*
 * First check for right data length
 * Next check start bit
 * Next try the decode
 */
bool IRrecv::decodeJVC() {
    13f2:	cf 92       	push	r12
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	ec 01       	movw	r28, r24

    // Check we have the right amount of data (36 or 34). The +4 is for initial gap, start bit mark and space + stop bit mark.
    if (decodedIRData.rawDataPtr->rawlen != ((2 * JVC_BITS) + 4) && decodedIRData.rawDataPtr->rawlen != ((2 * JVC_BITS) + 2)) {
    1402:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1404:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1406:	84 81       	ldd	r24, Z+4	; 0x04
    1408:	84 32       	cpi	r24, 0x24	; 36
    140a:	01 f1       	breq	.+64     	; 0x144c <_ZN6IRrecv9decodeJVCEv+0x5a>
    140c:	82 32       	cpi	r24, 0x22	; 34
    140e:	09 f0       	breq	.+2      	; 0x1412 <_ZN6IRrecv9decodeJVCEv+0x20>
    1410:	5d c0       	rjmp	.+186    	; 0x14cc <_ZN6IRrecv9decodeJVCEv+0xda>
        /*
         * Check for repeat
         */
        if (decodedIRData.rawDataPtr->rawbuf[0] < ((JVC_REPEAT_SPACE + (JVC_REPEAT_SPACE / 2) / MICROS_PER_TICK))
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], JVC_BIT_MARK)
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[decodedIRData.rawDataPtr->rawlen - 1], JVC_BIT_MARK)) {
    1412:	80 85       	ldd	r24, Z+8	; 0x08
    1414:	91 85       	ldd	r25, Z+9	; 0x09
    1416:	82 36       	cpi	r24, 0x62	; 98
    1418:	9d 45       	sbci	r25, 0x5D	; 93
    141a:	50 f5       	brcc	.+84     	; 0x1470 <_ZN6IRrecv9decodeJVCEv+0x7e>
    if (decodedIRData.rawDataPtr->rawlen == ((2 * JVC_BITS) + 2)) {
        /*
         * Check for repeat
         */
        if (decodedIRData.rawDataPtr->rawbuf[0] < ((JVC_REPEAT_SPACE + (JVC_REPEAT_SPACE / 2) / MICROS_PER_TICK))
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], JVC_BIT_MARK)
    141c:	6e e0       	ldi	r22, 0x0E	; 14
    141e:	72 e0       	ldi	r23, 0x02	; 2
    1420:	82 85       	ldd	r24, Z+10	; 0x0a
    1422:	93 85       	ldd	r25, Z+11	; 0x0b
    1424:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1428:	88 23       	and	r24, r24
    142a:	11 f1       	breq	.+68     	; 0x1470 <_ZN6IRrecv9decodeJVCEv+0x7e>
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[decodedIRData.rawDataPtr->rawlen - 1], JVC_BIT_MARK)) {
    142c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    142e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1430:	84 81       	ldd	r24, Z+4	; 0x04
    1432:	e8 0f       	add	r30, r24
    1434:	f1 1d       	adc	r31, r1
    1436:	e8 0f       	add	r30, r24
    1438:	f1 1d       	adc	r31, r1
    143a:	6e e0       	ldi	r22, 0x0E	; 14
    143c:	72 e0       	ldi	r23, 0x02	; 2
    143e:	86 81       	ldd	r24, Z+6	; 0x06
    1440:	97 81       	ldd	r25, Z+7	; 0x07
    1442:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1446:	81 11       	cpse	r24, r1
    1448:	3e c0       	rjmp	.+124    	; 0x14c6 <_ZN6IRrecv9decodeJVCEv+0xd4>
    144a:	12 c0       	rjmp	.+36     	; 0x1470 <_ZN6IRrecv9decodeJVCEv+0x7e>
            decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_LSB_FIRST;
        }
    } else {

        // Check header "mark" and "space"
        if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], JVC_HEADER_MARK)
    144c:	60 ee       	ldi	r22, 0xE0	; 224
    144e:	70 e2       	ldi	r23, 0x20	; 32
    1450:	82 85       	ldd	r24, Z+10	; 0x0a
    1452:	93 85       	ldd	r25, Z+11	; 0x0b
    1454:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
                || !MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], JVC_HEADER_SPACE)) {
    1458:	88 23       	and	r24, r24
    145a:	c1 f1       	breq	.+112    	; 0x14cc <_ZN6IRrecv9decodeJVCEv+0xda>
    145c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    145e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1460:	60 e7       	ldi	r22, 0x70	; 112
    1462:	70 e1       	ldi	r23, 0x10	; 16
    1464:	84 85       	ldd	r24, Z+12	; 0x0c
    1466:	95 85       	ldd	r25, Z+13	; 0x0d
    1468:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    146c:	88 23       	and	r24, r24
    146e:	71 f1       	breq	.+92     	; 0x14cc <_ZN6IRrecv9decodeJVCEv+0xda>
//            DBG_PRINTLN("Header mark or space length is wrong");
            return false;
        }
    }

    if (!decodePulseDistanceData(JVC_BITS, 3, JVC_BIT_MARK, JVC_ONE_SPACE, JVC_ZERO_SPACE, PROTOCOL_IS_LSB_FIRST)) {
    1470:	c1 2c       	mov	r12, r1
    1472:	8e e0       	ldi	r24, 0x0E	; 14
    1474:	e8 2e       	mov	r14, r24
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	f8 2e       	mov	r15, r24
    147a:	0a e2       	ldi	r16, 0x2A	; 42
    147c:	16 e0       	ldi	r17, 0x06	; 6
    147e:	2e e0       	ldi	r18, 0x0E	; 14
    1480:	32 e0       	ldi	r19, 0x02	; 2
    1482:	43 e0       	ldi	r20, 0x03	; 3
    1484:	60 e1       	ldi	r22, 0x10	; 16
    1486:	ce 01       	movw	r24, r28
    1488:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    148c:	18 2f       	mov	r17, r24
    148e:	81 11       	cpse	r24, r1
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <_ZN6IRrecv9decodeJVCEv+0xba>
        DBG_PRINT(F("JVC: "));
    1492:	67 e5       	ldi	r22, 0x57	; 87
    1494:	71 e0       	ldi	r23, 0x01	; 1
    1496:	83 e2       	ldi	r24, 0x23	; 35
    1498:	97 e0       	ldi	r25, 0x07	; 7
    149a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Decode failed"));
    149e:	69 e4       	ldi	r22, 0x49	; 73
    14a0:	71 e0       	ldi	r23, 0x01	; 1
    14a2:	83 e2       	ldi	r24, 0x23	; 35
    14a4:	97 e0       	ldi	r25, 0x07	; 7
    14a6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    14aa:	11 c0       	rjmp	.+34     	; 0x14ce <_ZN6IRrecv9decodeJVCEv+0xdc>
    }

    // Success
//    decodedIRData.flags = IRDATA_FLAGS_IS_LSB_FIRST; // Not required, since this is the start value
    uint8_t tCommand = decodedIRData.decodedRawData >> JVC_ADDRESS_BITS;  // upper 8 bits of LSB first value
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	28 8d       	ldd	r18, Y+24	; 0x18
    uint8_t tAddress = decodedIRData.decodedRawData & 0xFF;    // lowest 8 bit of LSB first value

    decodedIRData.command = tCommand;
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3a 8b       	std	Y+18, r19	; 0x12
    14b4:	29 8b       	std	Y+17, r18	; 0x11
    decodedIRData.address = tAddress;
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	98 8b       	std	Y+16, r25	; 0x10
    14ba:	8f 87       	std	Y+15, r24	; 0x0f
    decodedIRData.numberOfBits = JVC_BITS;
    14bc:	80 e1       	ldi	r24, 0x10	; 16
    14be:	8d 8b       	std	Y+21, r24	; 0x15
    decodedIRData.protocol = JVC;
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	8e 87       	std	Y+14, r24	; 0x0e

    return true;
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <_ZN6IRrecv9decodeJVCEv+0xdc>
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], JVC_BIT_MARK)
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[decodedIRData.rawDataPtr->rawlen - 1], JVC_BIT_MARK)) {
            /*
             * We have a repeat here, so do not check for start bit
             */
            decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_LSB_FIRST;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	8e 8b       	std	Y+22, r24	; 0x16
    14ca:	d2 cf       	rjmp	.-92     	; 0x1470 <_ZN6IRrecv9decodeJVCEv+0x7e>
        // Check header "mark" and "space"
        if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], JVC_HEADER_MARK)
                || !MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], JVC_HEADER_SPACE)) {
//            DBG_PRINT("JVC: ");
//            DBG_PRINTLN("Header mark or space length is wrong");
            return false;
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    decodedIRData.address = tAddress;
    decodedIRData.numberOfBits = JVC_BITS;
    decodedIRData.protocol = JVC;

    return true;
}
    14ce:	81 2f       	mov	r24, r17
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	cf 90       	pop	r12
    14de:	08 95       	ret

000014e0 <_ZN6IRrecv14decodeKaseikyoEv>:
}

/*
 * Tested with my Panasonic DVD/TV remote
 */
bool IRrecv::decodeKaseikyo() {
    14e0:	4f 92       	push	r4
    14e2:	5f 92       	push	r5
    14e4:	6f 92       	push	r6
    14e6:	7f 92       	push	r7
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29

    decode_type_t tProtocol;
    // Check we have enough data (100)- +4 for initial gap, start bit mark and space + stop bit mark
    if (decodedIRData.rawDataPtr->rawlen != ((2 * KASEIKYO_BITS) + 4)) {
    14fe:	dc 01       	movw	r26, r24
    1500:	5b 96       	adiw	r26, 0x1b	; 27
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	5c 97       	sbiw	r26, 0x1c	; 28
    1508:	24 81       	ldd	r18, Z+4	; 0x04
    150a:	24 36       	cpi	r18, 0x64	; 100
    150c:	09 f0       	breq	.+2      	; 0x1510 <_ZN6IRrecv14decodeKaseikyoEv+0x30>
    150e:	43 c1       	rjmp	.+646    	; 0x1796 <_ZN6IRrecv14decodeKaseikyoEv+0x2b6>
    1510:	ec 01       	movw	r28, r24
        return false;
    }

    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], KASEIKYO_HEADER_MARK)) {
    1512:	60 e8       	ldi	r22, 0x80	; 128
    1514:	7d e0       	ldi	r23, 0x0D	; 13
    1516:	82 85       	ldd	r24, Z+10	; 0x0a
    1518:	93 85       	ldd	r25, Z+11	; 0x0b
    151a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    151e:	18 2f       	mov	r17, r24
    1520:	81 11       	cpse	r24, r1
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <_ZN6IRrecv14decodeKaseikyoEv+0x56>
        DBG_PRINT("Kaseikyo: ");
    1524:	65 e6       	ldi	r22, 0x65	; 101
    1526:	73 e0       	ldi	r23, 0x03	; 3
    1528:	83 e2       	ldi	r24, 0x23	; 35
    152a:	97 e0       	ldi	r25, 0x07	; 7
    152c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Header mark length is wrong");
    1530:	60 e7       	ldi	r22, 0x70	; 112
    1532:	73 e0       	ldi	r23, 0x03	; 3
    1534:	7b c0       	rjmp	.+246    	; 0x162c <_ZN6IRrecv14decodeKaseikyoEv+0x14c>
        return false;
    }

    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[2], KASEIKYO_HEADER_SPACE)) {
    1536:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1538:	fc 8d       	ldd	r31, Y+28	; 0x1c
    153a:	60 ec       	ldi	r22, 0xC0	; 192
    153c:	76 e0       	ldi	r23, 0x06	; 6
    153e:	84 85       	ldd	r24, Z+12	; 0x0c
    1540:	95 85       	ldd	r25, Z+13	; 0x0d
    1542:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1546:	18 2f       	mov	r17, r24
    1548:	81 11       	cpse	r24, r1
    154a:	09 c0       	rjmp	.+18     	; 0x155e <_ZN6IRrecv14decodeKaseikyoEv+0x7e>
        DBG_PRINT("Kaseikyo: ");
    154c:	65 e6       	ldi	r22, 0x65	; 101
    154e:	73 e0       	ldi	r23, 0x03	; 3
    1550:	83 e2       	ldi	r24, 0x23	; 35
    1552:	97 e0       	ldi	r25, 0x07	; 7
    1554:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Header space length is wrong");
    1558:	68 e5       	ldi	r22, 0x58	; 88
    155a:	72 e0       	ldi	r23, 0x02	; 2
    155c:	67 c0       	rjmp	.+206    	; 0x162c <_ZN6IRrecv14decodeKaseikyoEv+0x14c>
        return false;
    }

    // decode Vendor ID
    if (!decodePulseDistanceData(KASEIKYO_VENDOR_ID_BITS, 3, KASEIKYO_BIT_MARK, KASEIKYO_ONE_SPACE, KASEIKYO_ZERO_SPACE, false)) {
    155e:	c1 2c       	mov	r12, r1
    1560:	a0 eb       	ldi	r26, 0xB0	; 176
    1562:	ea 2e       	mov	r14, r26
    1564:	ff 24       	eor	r15, r15
    1566:	f3 94       	inc	r15
    1568:	00 e1       	ldi	r16, 0x10	; 16
    156a:	15 e0       	ldi	r17, 0x05	; 5
    156c:	20 eb       	ldi	r18, 0xB0	; 176
    156e:	31 e0       	ldi	r19, 0x01	; 1
    1570:	43 e0       	ldi	r20, 0x03	; 3
    1572:	60 e1       	ldi	r22, 0x10	; 16
    1574:	ce 01       	movw	r24, r28
    1576:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    157a:	18 2f       	mov	r17, r24
    157c:	81 11       	cpse	r24, r1
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <_ZN6IRrecv14decodeKaseikyoEv+0xb2>
        DBG_PRINT("Kaseikyo: ");
    1580:	65 e6       	ldi	r22, 0x65	; 101
    1582:	73 e0       	ldi	r23, 0x03	; 3
    1584:	83 e2       	ldi	r24, 0x23	; 35
    1586:	97 e0       	ldi	r25, 0x07	; 7
    1588:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Vendor ID decode failed");
    158c:	6c e8       	ldi	r22, 0x8C	; 140
    158e:	73 e0       	ldi	r23, 0x03	; 3
    1590:	4d c0       	rjmp	.+154    	; 0x162c <_ZN6IRrecv14decodeKaseikyoEv+0x14c>
        return false;
    }

    uint16_t tVendorId = decodedIRData.decodedRawData;
    1592:	df 88       	ldd	r13, Y+23	; 0x17
    1594:	ad 2c       	mov	r10, r13
    1596:	b8 8c       	ldd	r11, Y+24	; 0x18
    if (tVendorId == PANASONIC_VENDOR_ID_CODE) {
    1598:	b2 e0       	ldi	r27, 0x02	; 2
    159a:	ab 16       	cp	r10, r27
    159c:	b0 e2       	ldi	r27, 0x20	; 32
    159e:	bb 06       	cpc	r11, r27
    15a0:	b9 f0       	breq	.+46     	; 0x15d0 <_ZN6IRrecv14decodeKaseikyoEv+0xf0>
        tProtocol = PANASONIC;
    } else if (tVendorId == SHARP_VENDOR_ID_CODE) {
    15a2:	2a ea       	ldi	r18, 0xAA	; 170
    15a4:	a2 16       	cp	r10, r18
    15a6:	2a e5       	ldi	r18, 0x5A	; 90
    15a8:	b2 06       	cpc	r11, r18
    15aa:	a9 f0       	breq	.+42     	; 0x15d6 <_ZN6IRrecv14decodeKaseikyoEv+0xf6>
        tProtocol = KASEIKYO_SHARP;
    } else if (tVendorId == DENON_VENDOR_ID_CODE) {
    15ac:	84 e5       	ldi	r24, 0x54	; 84
    15ae:	a8 16       	cp	r10, r24
    15b0:	82 e3       	ldi	r24, 0x32	; 50
    15b2:	b8 06       	cpc	r11, r24
    15b4:	99 f0       	breq	.+38     	; 0x15dc <_ZN6IRrecv14decodeKaseikyoEv+0xfc>
        tProtocol = KASEIKYO_DENON;
    } else if (tVendorId == JVC_VENDOR_ID_CODE) {
    15b6:	a3 e0       	ldi	r26, 0x03	; 3
    15b8:	aa 16       	cp	r10, r26
    15ba:	a1 e0       	ldi	r26, 0x01	; 1
    15bc:	ba 06       	cpc	r11, r26
    15be:	89 f0       	breq	.+34     	; 0x15e2 <_ZN6IRrecv14decodeKaseikyoEv+0x102>
        tProtocol = KASEIKYO_JVC;
    } else if (tVendorId == MITSUBISHI_VENDOR_ID_CODE) {
    15c0:	b3 e2       	ldi	r27, 0x23	; 35
    15c2:	ab 16       	cp	r10, r27
    15c4:	bb ec       	ldi	r27, 0xCB	; 203
    15c6:	bb 06       	cpc	r11, r27
    15c8:	79 f0       	breq	.+30     	; 0x15e8 <_ZN6IRrecv14decodeKaseikyoEv+0x108>
        tProtocol = KASEIKYO_MITSUBISHI;
    } else {
        tProtocol = KASEIKYO;
    15ca:	f7 e0       	ldi	r31, 0x07	; 7
    15cc:	9f 2e       	mov	r9, r31
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <_ZN6IRrecv14decodeKaseikyoEv+0x10c>
        return false;
    }

    uint16_t tVendorId = decodedIRData.decodedRawData;
    if (tVendorId == PANASONIC_VENDOR_ID_CODE) {
        tProtocol = PANASONIC;
    15d0:	e6 e0       	ldi	r30, 0x06	; 6
    15d2:	9e 2e       	mov	r9, r30
    15d4:	0b c0       	rjmp	.+22     	; 0x15ec <_ZN6IRrecv14decodeKaseikyoEv+0x10c>
    } else if (tVendorId == SHARP_VENDOR_ID_CODE) {
        tProtocol = KASEIKYO_SHARP;
    15d6:	7a e0       	ldi	r23, 0x0A	; 10
    15d8:	97 2e       	mov	r9, r23
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <_ZN6IRrecv14decodeKaseikyoEv+0x10c>
    } else if (tVendorId == DENON_VENDOR_ID_CODE) {
        tProtocol = KASEIKYO_DENON;
    15dc:	69 e0       	ldi	r22, 0x09	; 9
    15de:	96 2e       	mov	r9, r22
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <_ZN6IRrecv14decodeKaseikyoEv+0x10c>
    } else if (tVendorId == JVC_VENDOR_ID_CODE) {
        tProtocol = KASEIKYO_JVC;
    15e2:	58 e0       	ldi	r21, 0x08	; 8
    15e4:	95 2e       	mov	r9, r21
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <_ZN6IRrecv14decodeKaseikyoEv+0x10c>
    } else if (tVendorId == MITSUBISHI_VENDOR_ID_CODE) {
        tProtocol = KASEIKYO_MITSUBISHI;
    15e8:	4b e0       	ldi	r20, 0x0B	; 11
    15ea:	94 2e       	mov	r9, r20
    } else {
        tProtocol = KASEIKYO;
    }

    // Vendor Parity
    uint8_t tVendorParity = tVendorId ^ (tVendorId >> 8);
    15ec:	db 24       	eor	r13, r11
    tVendorParity = (tVendorParity ^ (tVendorParity >> 4)) & 0xF;
    15ee:	8d 2d       	mov	r24, r13
    15f0:	82 95       	swap	r24
    15f2:	8f 70       	andi	r24, 0x0F	; 15
    15f4:	8d 25       	eor	r24, r13
    15f6:	8f 70       	andi	r24, 0x0F	; 15
    15f8:	d8 2e       	mov	r13, r24

    // decode address (device and subdevice) + command + parity
    if (!decodePulseDistanceData(
    15fa:	c1 2c       	mov	r12, r1
    15fc:	30 eb       	ldi	r19, 0xB0	; 176
    15fe:	e3 2e       	mov	r14, r19
    1600:	ff 24       	eor	r15, r15
    1602:	f3 94       	inc	r15
    1604:	00 e1       	ldi	r16, 0x10	; 16
    1606:	15 e0       	ldi	r17, 0x05	; 5
    1608:	20 eb       	ldi	r18, 0xB0	; 176
    160a:	31 e0       	ldi	r19, 0x01	; 1
    160c:	43 e2       	ldi	r20, 0x23	; 35
    160e:	60 e2       	ldi	r22, 0x20	; 32
    1610:	ce 01       	movw	r24, r28
    1612:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    1616:	18 2f       	mov	r17, r24
    1618:	81 11       	cpse	r24, r1
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <_ZN6IRrecv14decodeKaseikyoEv+0x156>
    KASEIKYO_VENDOR_ID_PARITY_BITS + KASEIKYO_ADDRESS_BITS + KASEIKYO_COMMAND_BITS + KASEIKYO_PARITY_BITS,
            3 + (2 * KASEIKYO_VENDOR_ID_BITS), KASEIKYO_BIT_MARK, KASEIKYO_ONE_SPACE,
            KASEIKYO_ZERO_SPACE, false)) {
        DBG_PRINT("Kaseikyo: ");
    161c:	65 e6       	ldi	r22, 0x65	; 101
    161e:	73 e0       	ldi	r23, 0x03	; 3
    1620:	83 e2       	ldi	r24, 0x23	; 35
    1622:	97 e0       	ldi	r25, 0x07	; 7
    1624:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Address, command + parity decode failed");
    1628:	64 ea       	ldi	r22, 0xA4	; 164
    162a:	73 e0       	ldi	r23, 0x03	; 3
    162c:	83 e2       	ldi	r24, 0x23	; 35
    162e:	97 e0       	ldi	r25, 0x07	; 7
    1630:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
        return false;
    1634:	b1 c0       	rjmp	.+354    	; 0x1798 <_ZN6IRrecv14decodeKaseikyoEv+0x2b8>
    }

    // Success
//    decodedIRData.flags = IRDATA_FLAGS_IS_LSB_FIRST; // Not required, since this is the start value
    LongUnion tValue;
    tValue.ULong = decodedIRData.decodedRawData;
    1636:	4f 88       	ldd	r4, Y+23	; 0x17
    1638:	58 8c       	ldd	r5, Y+24	; 0x18
    163a:	69 8c       	ldd	r6, Y+25	; 0x19
    163c:	7a 8c       	ldd	r7, Y+26	; 0x1a
    decodedIRData.address = (tValue.UWord.LowWord >> KASEIKYO_VENDOR_ID_PARITY_BITS); // remove vendor parity
    163e:	c2 01       	movw	r24, r4
    1640:	24 e0       	ldi	r18, 0x04	; 4
    1642:	96 95       	lsr	r25
    1644:	87 95       	ror	r24
    1646:	2a 95       	dec	r18
    1648:	e1 f7       	brne	.-8      	; 0x1642 <_ZN6IRrecv14decodeKaseikyoEv+0x162>
    164a:	98 8b       	std	Y+16, r25	; 0x10
    164c:	8f 87       	std	Y+15, r24	; 0x0f
    decodedIRData.command = tValue.UByte.MidHighByte;
    164e:	86 2d       	mov	r24, r6
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9a 8b       	std	Y+18, r25	; 0x12
    1654:	89 8b       	std	Y+17, r24	; 0x11
    uint8_t tParity = tValue.UByte.LowByte ^ tValue.UByte.MidLowByte ^ tValue.UByte.MidHighByte;
    1656:	04 2d       	mov	r16, r4
    1658:	06 25       	eor	r16, r6
    165a:	05 25       	eor	r16, r5

    if (tVendorParity != (tValue.UByte.LowByte & 0xF)) {
    165c:	2d 2d       	mov	r18, r13
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	84 2d       	mov	r24, r4
    1662:	8f 70       	andi	r24, 0x0F	; 15
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	28 17       	cp	r18, r24
    1668:	39 07       	cpc	r19, r25
    166a:	91 f1       	breq	.+100    	; 0x16d0 <_ZN6IRrecv14decodeKaseikyoEv+0x1f0>
        DBG_PRINT("Kaseikyo: ");
    166c:	65 e6       	ldi	r22, 0x65	; 101
    166e:	73 e0       	ldi	r23, 0x03	; 3
    1670:	83 e2       	ldi	r24, 0x23	; 35
    1672:	97 e0       	ldi	r25, 0x07	; 7
    1674:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT("4 bit VendorID Parity is not correct. expected=0x");
    1678:	6c ec       	ldi	r22, 0xCC	; 204
    167a:	73 e0       	ldi	r23, 0x03	; 3
    167c:	83 e2       	ldi	r24, 0x23	; 35
    167e:	97 e0       	ldi	r25, 0x07	; 7
    1680:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tVendorParity, HEX);
    1684:	40 e1       	ldi	r20, 0x10	; 16
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	6d 2d       	mov	r22, r13
    168a:	83 e2       	ldi	r24, 0x23	; 35
    168c:	97 e0       	ldi	r25, 0x07	; 7
    168e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINT(" received=0x");
    1692:	6e ef       	ldi	r22, 0xFE	; 254
    1694:	73 e0       	ldi	r23, 0x03	; 3
    1696:	83 e2       	ldi	r24, 0x23	; 35
    1698:	97 e0       	ldi	r25, 0x07	; 7
    169a:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(decodedIRData.decodedRawData, HEX);
    169e:	4f 89       	ldd	r20, Y+23	; 0x17
    16a0:	58 8d       	ldd	r21, Y+24	; 0x18
    16a2:	69 8d       	ldd	r22, Y+25	; 0x19
    16a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a6:	20 e1       	ldi	r18, 0x10	; 16
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	83 e2       	ldi	r24, 0x23	; 35
    16ac:	97 e0       	ldi	r25, 0x07	; 7
    16ae:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print5printEmi>
        DBG_PRINT(" VendorID=0x");
    16b2:	6b e0       	ldi	r22, 0x0B	; 11
    16b4:	74 e0       	ldi	r23, 0x04	; 4
    16b6:	83 e2       	ldi	r24, 0x23	; 35
    16b8:	97 e0       	ldi	r25, 0x07	; 7
    16ba:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(tVendorId, HEX);
    16be:	40 e1       	ldi	r20, 0x10	; 16
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	b5 01       	movw	r22, r10
    16c4:	83 e2       	ldi	r24, 0x23	; 35
    16c6:	97 e0       	ldi	r25, 0x07	; 7
    16c8:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN5Print7printlnEji>
        decodedIRData.flags = IRDATA_FLAGS_PARITY_FAILED | IRDATA_FLAGS_IS_LSB_FIRST;
    16cc:	84 e0       	ldi	r24, 0x04	; 4
    16ce:	8e 8b       	std	Y+22, r24	; 0x16
    }

    if (tProtocol == KASEIKYO) {
    16d0:	27 e0       	ldi	r18, 0x07	; 7
    16d2:	92 12       	cpse	r9, r18
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <_ZN6IRrecv14decodeKaseikyoEv+0x208>
        decodedIRData.flags |= IRDATA_FLAGS_EXTRA_INFO;
    16d6:	8e 89       	ldd	r24, Y+22	; 0x16
    16d8:	80 61       	ori	r24, 0x10	; 16
    16da:	8e 8b       	std	Y+22, r24	; 0x16
        // Include vendor ID in address
        decodedIRData.extra |= tVendorId;
    16dc:	8b 89       	ldd	r24, Y+19	; 0x13
    16de:	9c 89       	ldd	r25, Y+20	; 0x14
    16e0:	a8 2a       	or	r10, r24
    16e2:	b9 2a       	or	r11, r25
    16e4:	bc 8a       	std	Y+20, r11	; 0x14
    16e6:	ab 8a       	std	Y+19, r10	; 0x13
    }

    if (tValue.UByte.HighByte != tParity) {
    16e8:	07 15       	cp	r16, r7
    16ea:	09 f4       	brne	.+2      	; 0x16ee <_ZN6IRrecv14decodeKaseikyoEv+0x20e>
    16ec:	46 c0       	rjmp	.+140    	; 0x177a <_ZN6IRrecv14decodeKaseikyoEv+0x29a>
        DBG_PRINT("Kaseikyo: ");
    16ee:	65 e6       	ldi	r22, 0x65	; 101
    16f0:	73 e0       	ldi	r23, 0x03	; 3
    16f2:	83 e2       	ldi	r24, 0x23	; 35
    16f4:	97 e0       	ldi	r25, 0x07	; 7
    16f6:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT("8 bit Parity is not correct. expected=0x");
    16fa:	68 e1       	ldi	r22, 0x18	; 24
    16fc:	74 e0       	ldi	r23, 0x04	; 4
    16fe:	83 e2       	ldi	r24, 0x23	; 35
    1700:	97 e0       	ldi	r25, 0x07	; 7
    1702:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tParity, HEX);
    1706:	40 e1       	ldi	r20, 0x10	; 16
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	60 2f       	mov	r22, r16
    170c:	83 e2       	ldi	r24, 0x23	; 35
    170e:	97 e0       	ldi	r25, 0x07	; 7
    1710:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINT(" received=0x");
    1714:	6e ef       	ldi	r22, 0xFE	; 254
    1716:	73 e0       	ldi	r23, 0x03	; 3
    1718:	83 e2       	ldi	r24, 0x23	; 35
    171a:	97 e0       	ldi	r25, 0x07	; 7
    171c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(decodedIRData.decodedRawData >> KASEIKYO_COMMAND_BITS, HEX);
    1720:	4f 89       	ldd	r20, Y+23	; 0x17
    1722:	58 8d       	ldd	r21, Y+24	; 0x18
    1724:	69 8d       	ldd	r22, Y+25	; 0x19
    1726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1728:	45 2f       	mov	r20, r21
    172a:	56 2f       	mov	r21, r22
    172c:	67 2f       	mov	r22, r23
    172e:	77 27       	eor	r23, r23
    1730:	20 e1       	ldi	r18, 0x10	; 16
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	83 e2       	ldi	r24, 0x23	; 35
    1736:	97 e0       	ldi	r25, 0x07	; 7
    1738:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print5printEmi>
        DBG_PRINT(" address=0x");
    173c:	61 e4       	ldi	r22, 0x41	; 65
    173e:	74 e0       	ldi	r23, 0x04	; 4
    1740:	83 e2       	ldi	r24, 0x23	; 35
    1742:	97 e0       	ldi	r25, 0x07	; 7
    1744:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(decodedIRData.address, HEX);
    1748:	6f 85       	ldd	r22, Y+15	; 0x0f
    174a:	78 89       	ldd	r23, Y+16	; 0x10
    174c:	40 e1       	ldi	r20, 0x10	; 16
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	83 e2       	ldi	r24, 0x23	; 35
    1752:	97 e0       	ldi	r25, 0x07	; 7
    1754:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
        DBG_PRINT(" command=0x");
    1758:	6d e4       	ldi	r22, 0x4D	; 77
    175a:	74 e0       	ldi	r23, 0x04	; 4
    175c:	83 e2       	ldi	r24, 0x23	; 35
    175e:	97 e0       	ldi	r25, 0x07	; 7
    1760:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(decodedIRData.command, HEX);
    1764:	69 89       	ldd	r22, Y+17	; 0x11
    1766:	7a 89       	ldd	r23, Y+18	; 0x12
    1768:	40 e1       	ldi	r20, 0x10	; 16
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	83 e2       	ldi	r24, 0x23	; 35
    176e:	97 e0       	ldi	r25, 0x07	; 7
    1770:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN5Print7printlnEji>
        decodedIRData.flags |= IRDATA_FLAGS_PARITY_FAILED;
    1774:	8e 89       	ldd	r24, Y+22	; 0x16
    1776:	84 60       	ori	r24, 0x04	; 4
    1778:	8e 8b       	std	Y+22, r24	; 0x16
    }

    // check for repeat
    if (decodedIRData.rawDataPtr->rawbuf[0] < (KASEIKYO_REPEAT_PERIOD / MICROS_PER_TICK)) {
    177a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    177c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    177e:	80 85       	ldd	r24, Z+8	; 0x08
    1780:	91 85       	ldd	r25, Z+9	; 0x09
    1782:	88 32       	cpi	r24, 0x28	; 40
    1784:	9a 40       	sbci	r25, 0x0A	; 10
    1786:	18 f4       	brcc	.+6      	; 0x178e <_ZN6IRrecv14decodeKaseikyoEv+0x2ae>
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    1788:	8e 89       	ldd	r24, Y+22	; 0x16
    178a:	81 60       	ori	r24, 0x01	; 1
    178c:	8e 8b       	std	Y+22, r24	; 0x16
    }

    decodedIRData.protocol = tProtocol;
    178e:	9e 86       	std	Y+14, r9	; 0x0e

    decodedIRData.numberOfBits = KASEIKYO_BITS;
    1790:	80 e3       	ldi	r24, 0x30	; 48
    1792:	8d 8b       	std	Y+21, r24	; 0x15

    return true;
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <_ZN6IRrecv14decodeKaseikyoEv+0x2b8>
bool IRrecv::decodeKaseikyo() {

    decode_type_t tProtocol;
    // Check we have enough data (100)- +4 for initial gap, start bit mark and space + stop bit mark
    if (decodedIRData.rawDataPtr->rawlen != ((2 * KASEIKYO_BITS) + 4)) {
        return false;
    1796:	10 e0       	ldi	r17, 0x00	; 0
    decodedIRData.protocol = tProtocol;

    decodedIRData.numberOfBits = KASEIKYO_BITS;

    return true;
}
    1798:	81 2f       	mov	r24, r17
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	7f 90       	pop	r7
    17b2:	6f 90       	pop	r6
    17b4:	5f 90       	pop	r5
    17b6:	4f 90       	pop	r4
    17b8:	08 95       	ret

000017ba <_ZN6IRrecv24decodeLegoPowerFunctionsEv>:
}

/*
 * Mode is stored in the upper nibble of command
 */
bool IRrecv::decodeLegoPowerFunctions() {
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	ec 01       	movw	r28, r24

    // Check header "mark"
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], LEGO_HEADER_MARK)) {
    17d0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    17d2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    17d4:	6e e9       	ldi	r22, 0x9E	; 158
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	82 85       	ldd	r24, Z+10	; 0x0a
    17da:	93 85       	ldd	r25, Z+11	; 0x0b
    17dc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    17e0:	f8 2e       	mov	r15, r24
    17e2:	88 23       	and	r24, r24
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x2e>
    17e6:	f8 c0       	rjmp	.+496    	; 0x19d8 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x21e>
        // no debug output, since this check is mainly to determine the received protocol
        return false;
    }

    // Check we have enough data - +4 for initial gap, start bit mark and space + stop bit mark
    if (decodedIRData.rawDataPtr->rawlen != (2 * LEGO_BITS) + 4) {
    17e8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    17ea:	fc 8d       	ldd	r31, Y+28	; 0x1c
    17ec:	84 81       	ldd	r24, Z+4	; 0x04
    17ee:	84 32       	cpi	r24, 0x24	; 36
    17f0:	e9 f0       	breq	.+58     	; 0x182c <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x72>
        DBG_PRINT("LEGO: ");
    17f2:	65 e6       	ldi	r22, 0x65	; 101
    17f4:	74 e0       	ldi	r23, 0x04	; 4
    17f6:	83 e2       	ldi	r24, 0x23	; 35
    17f8:	97 e0       	ldi	r25, 0x07	; 7
    17fa:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT("Data length=");
    17fe:	60 e4       	ldi	r22, 0x40	; 64
    1800:	72 e0       	ldi	r23, 0x02	; 2
    1802:	83 e2       	ldi	r24, 0x23	; 35
    1804:	97 e0       	ldi	r25, 0x07	; 7
    1806:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(decodedIRData.rawDataPtr->rawlen);
    180a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    180c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    180e:	4a e0       	ldi	r20, 0x0A	; 10
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	64 81       	ldd	r22, Z+4	; 0x04
    1814:	83 e2       	ldi	r24, 0x23	; 35
    1816:	97 e0       	ldi	r25, 0x07	; 7
    1818:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINTLN(" is not 36");
    181c:	6d e4       	ldi	r22, 0x4D	; 77
    181e:	72 e0       	ldi	r23, 0x02	; 2
    1820:	83 e2       	ldi	r24, 0x23	; 35
    1822:	97 e0       	ldi	r25, 0x07	; 7
    1824:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
        return false;
    1828:	f1 2c       	mov	r15, r1
    182a:	d6 c0       	rjmp	.+428    	; 0x19d8 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x21e>
    }
    // Check header "space"
    if (!MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], LEGO_HEADER_SPACE)) {
    182c:	62 e0       	ldi	r22, 0x02	; 2
    182e:	74 e0       	ldi	r23, 0x04	; 4
    1830:	84 85       	ldd	r24, Z+12	; 0x0c
    1832:	95 85       	ldd	r25, Z+13	; 0x0d
    1834:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    1838:	f8 2e       	mov	r15, r24
    183a:	81 11       	cpse	r24, r1
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x96>
        DBG_PRINT("LEGO: ");
    183e:	65 e6       	ldi	r22, 0x65	; 101
    1840:	74 e0       	ldi	r23, 0x04	; 4
    1842:	83 e2       	ldi	r24, 0x23	; 35
    1844:	97 e0       	ldi	r25, 0x07	; 7
    1846:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Header space length is wrong");
    184a:	68 e5       	ldi	r22, 0x58	; 88
    184c:	72 e0       	ldi	r23, 0x02	; 2
    184e:	1a c0       	rjmp	.+52     	; 0x1884 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0xca>
        return false;
    }

    if (!decodePulseDistanceData(LEGO_BITS, 3, LEGO_BIT_MARK, LEGO_ONE_SPACE, LEGO_ZERO_SPACE, true)) {
    1850:	cc 24       	eor	r12, r12
    1852:	c3 94       	inc	r12
    1854:	57 e0       	ldi	r21, 0x07	; 7
    1856:	e5 2e       	mov	r14, r21
    1858:	ff 24       	eor	r15, r15
    185a:	f3 94       	inc	r15
    185c:	09 e2       	ldi	r16, 0x29	; 41
    185e:	12 e0       	ldi	r17, 0x02	; 2
    1860:	2e e9       	ldi	r18, 0x9E	; 158
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	43 e0       	ldi	r20, 0x03	; 3
    1866:	60 e1       	ldi	r22, 0x10	; 16
    1868:	ce 01       	movw	r24, r28
    186a:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    186e:	f8 2e       	mov	r15, r24
    1870:	81 11       	cpse	r24, r1
    1872:	0d c0       	rjmp	.+26     	; 0x188e <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0xd4>
        DBG_PRINT("LEGO: ");
    1874:	65 e6       	ldi	r22, 0x65	; 101
    1876:	74 e0       	ldi	r23, 0x04	; 4
    1878:	83 e2       	ldi	r24, 0x23	; 35
    187a:	97 e0       	ldi	r25, 0x07	; 7
    187c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Decode failed");
    1880:	65 e7       	ldi	r22, 0x75	; 117
    1882:	72 e0       	ldi	r23, 0x02	; 2
    1884:	83 e2       	ldi	r24, 0x23	; 35
    1886:	97 e0       	ldi	r25, 0x07	; 7
    1888:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
        return false;
    188c:	a5 c0       	rjmp	.+330    	; 0x19d8 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x21e>
    }

    // Stop bit
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3 + (2 * LEGO_BITS)], LEGO_BIT_MARK)) {
    188e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1890:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1892:	e2 5b       	subi	r30, 0xB2	; 178
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	6e e9       	ldi	r22, 0x9E	; 158
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    18a2:	f8 2e       	mov	r15, r24
    18a4:	81 11       	cpse	r24, r1
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x108>
        DBG_PRINT("LEGO: ");
    18a8:	65 e6       	ldi	r22, 0x65	; 101
    18aa:	74 e0       	ldi	r23, 0x04	; 4
    18ac:	83 e2       	ldi	r24, 0x23	; 35
    18ae:	97 e0       	ldi	r25, 0x07	; 7
    18b0:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(F("Stop bit mark length is wrong"));
    18b4:	6d e5       	ldi	r22, 0x5D	; 93
    18b6:	71 e0       	ldi	r23, 0x01	; 1
    18b8:	83 e2       	ldi	r24, 0x23	; 35
    18ba:	97 e0       	ldi	r25, 0x07	; 7
    18bc:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    18c0:	8b c0       	rjmp	.+278    	; 0x19d8 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x21e>
    }

    // Success
    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    18c2:	80 e8       	ldi	r24, 0x80	; 128
    18c4:	8e 8b       	std	Y+22, r24	; 0x16
    uint16_t tDecodedValue = decodedIRData.decodedRawData;
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	68 8d       	ldd	r22, Y+24	; 0x18
    18ca:	c8 2e       	mov	r12, r24
    18cc:	d6 2e       	mov	r13, r22
    uint8_t tToggleEscapeChannel = tDecodedValue >> (LEGO_MODE_BITS + LEGO_COMMAND_BITS + LEGO_PARITY_BITS);
    18ce:	a6 2e       	mov	r10, r22
    18d0:	a2 94       	swap	r10
    18d2:	9f e0       	ldi	r25, 0x0F	; 15
    18d4:	a9 22       	and	r10, r25
    uint8_t tMode = (tDecodedValue >> (LEGO_COMMAND_BITS + LEGO_PARITY_BITS)) & 0xF;
    18d6:	06 2f       	mov	r16, r22
    18d8:	0f 70       	andi	r16, 0x0F	; 15
    uint8_t tData = (tDecodedValue >> LEGO_PARITY_BITS) & 0xF; // lego calls this field "data"
    18da:	96 01       	movw	r18, r12
    18dc:	44 e0       	ldi	r20, 0x04	; 4
    18de:	36 95       	lsr	r19
    18e0:	27 95       	ror	r18
    18e2:	4a 95       	dec	r20
    18e4:	e1 f7       	brne	.-8      	; 0x18de <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x124>
    18e6:	92 2f       	mov	r25, r18
    18e8:	9f 70       	andi	r25, 0x0F	; 15
    18ea:	b9 2e       	mov	r11, r25
    uint8_t tParityReceived = tDecodedValue & 0xF;
    18ec:	8f 70       	andi	r24, 0x0F	; 15
    18ee:	e8 2e       	mov	r14, r24

    // This is parity as defined in the specifications
    // But in some scans I saw 0x9 ^ .. as parity formula
    uint8_t tParityComputed = 0xF ^ tToggleEscapeChannel ^ tMode ^ tData;
    18f0:	1f e0       	ldi	r17, 0x0F	; 15
    18f2:	1a 25       	eor	r17, r10
    18f4:	10 27       	eor	r17, r16
    18f6:	19 27       	eor	r17, r25

    // parity check
    if (tParityReceived != tParityComputed) {
    18f8:	81 17       	cp	r24, r17
    18fa:	09 f4       	brne	.+2      	; 0x18fe <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x144>
    18fc:	56 c0       	rjmp	.+172    	; 0x19aa <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x1f0>
        DBG_PRINT("LEGO: ");
    18fe:	65 e6       	ldi	r22, 0x65	; 101
    1900:	74 e0       	ldi	r23, 0x04	; 4
    1902:	83 e2       	ldi	r24, 0x23	; 35
    1904:	97 e0       	ldi	r25, 0x07	; 7
    1906:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT("Parity is not correct. expected=0x");
    190a:	6b ed       	ldi	r22, 0xDB	; 219
    190c:	73 e0       	ldi	r23, 0x03	; 3
    190e:	83 e2       	ldi	r24, 0x23	; 35
    1910:	97 e0       	ldi	r25, 0x07	; 7
    1912:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tParityComputed, HEX);
    1916:	40 e1       	ldi	r20, 0x10	; 16
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	61 2f       	mov	r22, r17
    191c:	83 e2       	ldi	r24, 0x23	; 35
    191e:	97 e0       	ldi	r25, 0x07	; 7
    1920:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINT(" received=0x");
    1924:	6e ef       	ldi	r22, 0xFE	; 254
    1926:	73 e0       	ldi	r23, 0x03	; 3
    1928:	83 e2       	ldi	r24, 0x23	; 35
    192a:	97 e0       	ldi	r25, 0x07	; 7
    192c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tParityReceived, HEX);
    1930:	40 e1       	ldi	r20, 0x10	; 16
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	6e 2d       	mov	r22, r14
    1936:	83 e2       	ldi	r24, 0x23	; 35
    1938:	97 e0       	ldi	r25, 0x07	; 7
    193a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINT(", raw=0x");
    193e:	6c e6       	ldi	r22, 0x6C	; 108
    1940:	74 e0       	ldi	r23, 0x04	; 4
    1942:	83 e2       	ldi	r24, 0x23	; 35
    1944:	97 e0       	ldi	r25, 0x07	; 7
    1946:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tDecodedValue, HEX);
    194a:	40 e1       	ldi	r20, 0x10	; 16
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	b6 01       	movw	r22, r12
    1950:	83 e2       	ldi	r24, 0x23	; 35
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
        DBG_PRINT(", 3 nibbles are 0x");
    1958:	65 e7       	ldi	r22, 0x75	; 117
    195a:	74 e0       	ldi	r23, 0x04	; 4
    195c:	83 e2       	ldi	r24, 0x23	; 35
    195e:	97 e0       	ldi	r25, 0x07	; 7
    1960:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tToggleEscapeChannel, HEX);
    1964:	40 e1       	ldi	r20, 0x10	; 16
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	6a 2d       	mov	r22, r10
    196a:	83 e2       	ldi	r24, 0x23	; 35
    196c:	97 e0       	ldi	r25, 0x07	; 7
    196e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINT(", 0x");
    1972:	68 e8       	ldi	r22, 0x88	; 136
    1974:	74 e0       	ldi	r23, 0x04	; 4
    1976:	83 e2       	ldi	r24, 0x23	; 35
    1978:	97 e0       	ldi	r25, 0x07	; 7
    197a:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tMode, HEX);
    197e:	40 e1       	ldi	r20, 0x10	; 16
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	60 2f       	mov	r22, r16
    1984:	83 e2       	ldi	r24, 0x23	; 35
    1986:	97 e0       	ldi	r25, 0x07	; 7
    1988:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINT(", 0x");
    198c:	68 e8       	ldi	r22, 0x88	; 136
    198e:	74 e0       	ldi	r23, 0x04	; 4
    1990:	83 e2       	ldi	r24, 0x23	; 35
    1992:	97 e0       	ldi	r25, 0x07	; 7
    1994:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(tData, HEX);
    1998:	40 e1       	ldi	r20, 0x10	; 16
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	6b 2d       	mov	r22, r11
    199e:	83 e2       	ldi	r24, 0x23	; 35
    19a0:	97 e0       	ldi	r25, 0x07	; 7
    19a2:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN5Print7printlnEhi>
        // might not be an error, so just continue
        decodedIRData.flags = IRDATA_FLAGS_PARITY_FAILED | IRDATA_FLAGS_IS_MSB_FIRST;
    19a6:	84 e8       	ldi	r24, 0x84	; 132
    19a8:	8e 8b       	std	Y+22, r24	; 0x16
    }

    /*
     * Check for autorepeat (should happen 4 times for one press)
     */
    if (decodedIRData.rawDataPtr->rawbuf[0] < (LEGO_AUTO_REPEAT_PERIOD_MAX / MICROS_PER_TICK)) {
    19aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    19ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
    19ae:	80 85       	ldd	r24, Z+8	; 0x08
    19b0:	91 85       	ldd	r25, Z+9	; 0x09
    19b2:	88 3f       	cpi	r24, 0xF8	; 248
    19b4:	91 41       	sbci	r25, 0x11	; 17
    19b6:	18 f4       	brcc	.+6      	; 0x19be <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x204>
        decodedIRData.flags |= IRDATA_FLAGS_IS_AUTO_REPEAT;
    19b8:	8e 89       	ldd	r24, Y+22	; 0x16
    19ba:	82 60       	ori	r24, 0x02	; 2
    19bc:	8e 8b       	std	Y+22, r24	; 0x16
    }
    decodedIRData.address = tToggleEscapeChannel;
    19be:	af 86       	std	Y+15, r10	; 0x0f
    19c0:	18 8a       	std	Y+16, r1	; 0x10
    decodedIRData.command = tData | tMode << LEGO_COMMAND_BITS;
    19c2:	80 e1       	ldi	r24, 0x10	; 16
    19c4:	08 9f       	mul	r16, r24
    19c6:	b0 01       	movw	r22, r0
    19c8:	11 24       	eor	r1, r1
    19ca:	6b 29       	or	r22, r11
    19cc:	7a 8b       	std	Y+18, r23	; 0x12
    19ce:	69 8b       	std	Y+17, r22	; 0x11
    decodedIRData.protocol = LEGO_PF;
    19d0:	83 e1       	ldi	r24, 0x13	; 19
    19d2:	8e 87       	std	Y+14, r24	; 0x0e
    decodedIRData.numberOfBits = LEGO_BITS;
    19d4:	80 e1       	ldi	r24, 0x10	; 16
    19d6:	8d 8b       	std	Y+21, r24	; 0x15

    return true;
}
    19d8:	8f 2d       	mov	r24, r15
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	df 90       	pop	r13
    19e8:	cf 90       	pop	r12
    19ea:	bf 90       	pop	r11
    19ec:	af 90       	pop	r10
    19ee:	08 95       	ret

000019f0 <_ZN6IRrecv8decodeLGEv>:
 * First check for right data length
 * Next check start bit
 * Next try the decode
 * Last check stop bit
 */
bool IRrecv::decodeLG() {
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29

    // Check we have the right amount of data (60). The +4 is for initial gap, start bit mark and space + stop bit mark.
    if (decodedIRData.rawDataPtr->rawlen != ((2 * LG_BITS) + 4) && (decodedIRData.rawDataPtr->rawlen != 4)) {
    1a00:	dc 01       	movw	r26, r24
    1a02:	5b 96       	adiw	r26, 0x1b	; 27
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	5c 97       	sbiw	r26, 0x1c	; 28
    1a0a:	24 81       	ldd	r18, Z+4	; 0x04
    1a0c:	2c 33       	cpi	r18, 0x3C	; 60
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <_ZN6IRrecv8decodeLGEv+0x26>
    1a10:	24 30       	cpi	r18, 0x04	; 4
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <_ZN6IRrecv8decodeLGEv+0x26>
    1a14:	de c0       	rjmp	.+444    	; 0x1bd2 <_ZN6IRrecv8decodeLGEv+0x1e2>
    1a16:	ec 01       	movw	r28, r24
        // no debug output, since this check is mainly to determine the received protocol
        return false;
    }

    // Check header "mark" this must be done for repeat and data
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], LG_HEADER_MARK)) {
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	73 e2       	ldi	r23, 0x23	; 35
    1a1c:	82 85       	ldd	r24, Z+10	; 0x0a
    1a1e:	93 85       	ldd	r25, Z+11	; 0x0b
    1a20:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <_ZN6IRrecv8decodeLGEv+0x3a>
    1a28:	d4 c0       	rjmp	.+424    	; 0x1bd2 <_ZN6IRrecv8decodeLGEv+0x1e2>
        return false;
    }

    // Check for repeat - here we have another header space length
    if (decodedIRData.rawDataPtr->rawlen == 4) {
    1a2a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a2c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a2e:	24 81       	ldd	r18, Z+4	; 0x04
    1a30:	84 85       	ldd	r24, Z+12	; 0x0c
    1a32:	95 85       	ldd	r25, Z+13	; 0x0d
    1a34:	24 30       	cpi	r18, 0x04	; 4
    1a36:	99 f4       	brne	.+38     	; 0x1a5e <_ZN6IRrecv8decodeLGEv+0x6e>
        if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], LG_REPEAT_HEADER_SPACE)
    1a38:	60 ec       	ldi	r22, 0xC0	; 192
    1a3a:	78 e0       	ldi	r23, 0x08	; 8
    1a3c:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3], LG_BIT_MARK)) {
    1a40:	88 23       	and	r24, r24
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <_ZN6IRrecv8decodeLGEv+0x56>
    1a44:	c6 c0       	rjmp	.+396    	; 0x1bd2 <_ZN6IRrecv8decodeLGEv+0x1e2>
    1a46:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a48:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a4a:	60 e3       	ldi	r22, 0x30	; 48
    1a4c:	72 e0       	ldi	r23, 0x02	; 2
    1a4e:	86 85       	ldd	r24, Z+14	; 0x0e
    1a50:	97 85       	ldd	r25, Z+15	; 0x0f
    1a52:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1a56:	18 2f       	mov	r17, r24
    1a58:	81 11       	cpse	r24, r1
    1a5a:	bd c0       	rjmp	.+378    	; 0x1bd6 <_ZN6IRrecv8decodeLGEv+0x1e6>
    1a5c:	ba c0       	rjmp	.+372    	; 0x1bd2 <_ZN6IRrecv8decodeLGEv+0x1e2>
        }
        return false;
    }

    // Check command header space
    if (!MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], LG_HEADER_SPACE)) {
    1a5e:	60 e8       	ldi	r22, 0x80	; 128
    1a60:	71 e1       	ldi	r23, 0x11	; 17
    1a62:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    1a66:	18 2f       	mov	r17, r24
    1a68:	81 11       	cpse	r24, r1
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <_ZN6IRrecv8decodeLGEv+0x8e>
        DBG_PRINT(F("LG: "));
    1a6c:	63 ed       	ldi	r22, 0xD3	; 211
    1a6e:	71 e0       	ldi	r23, 0x01	; 1
    1a70:	83 e2       	ldi	r24, 0x23	; 35
    1a72:	97 e0       	ldi	r25, 0x07	; 7
    1a74:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Header space length is wrong"));
    1a78:	66 eb       	ldi	r22, 0xB6	; 182
    1a7a:	71 e0       	ldi	r23, 0x01	; 1
    1a7c:	1a c0       	rjmp	.+52     	; 0x1ab2 <_ZN6IRrecv8decodeLGEv+0xc2>
        return false;
    }

    if (!decodePulseDistanceData(LG_BITS, 3, LG_BIT_MARK, LG_ONE_SPACE, LG_ZERO_SPACE, true)) {
    1a7e:	cc 24       	eor	r12, r12
    1a80:	c3 94       	inc	r12
    1a82:	f0 e3       	ldi	r31, 0x30	; 48
    1a84:	ef 2e       	mov	r14, r31
    1a86:	f2 e0       	ldi	r31, 0x02	; 2
    1a88:	ff 2e       	mov	r15, r31
    1a8a:	00 e9       	ldi	r16, 0x90	; 144
    1a8c:	16 e0       	ldi	r17, 0x06	; 6
    1a8e:	20 e3       	ldi	r18, 0x30	; 48
    1a90:	32 e0       	ldi	r19, 0x02	; 2
    1a92:	43 e0       	ldi	r20, 0x03	; 3
    1a94:	6c e1       	ldi	r22, 0x1C	; 28
    1a96:	ce 01       	movw	r24, r28
    1a98:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    1a9c:	18 2f       	mov	r17, r24
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	0d c0       	rjmp	.+26     	; 0x1abc <_ZN6IRrecv8decodeLGEv+0xcc>
        DBG_PRINT(F("LG: "));
    1aa2:	61 eb       	ldi	r22, 0xB1	; 177
    1aa4:	71 e0       	ldi	r23, 0x01	; 1
    1aa6:	83 e2       	ldi	r24, 0x23	; 35
    1aa8:	97 e0       	ldi	r25, 0x07	; 7
    1aaa:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Decode failed"));
    1aae:	63 ea       	ldi	r22, 0xA3	; 163
    1ab0:	71 e0       	ldi	r23, 0x01	; 1
    1ab2:	83 e2       	ldi	r24, 0x23	; 35
    1ab4:	97 e0       	ldi	r25, 0x07	; 7
    1ab6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    1aba:	97 c0       	rjmp	.+302    	; 0x1bea <_ZN6IRrecv8decodeLGEv+0x1fa>
    }

    // Stop bit
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3 + (2 * LG_BITS)], LG_BIT_MARK)) {
    1abc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1abe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ac0:	e2 58       	subi	r30, 0x82	; 130
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 e3       	ldi	r22, 0x30	; 48
    1ac6:	72 e0       	ldi	r23, 0x02	; 2
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1ad0:	18 2f       	mov	r17, r24
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	09 c0       	rjmp	.+18     	; 0x1ae8 <_ZN6IRrecv8decodeLGEv+0xf8>
        DBG_PRINT(F("LG: "));
    1ad6:	6e e9       	ldi	r22, 0x9E	; 158
    1ad8:	71 e0       	ldi	r23, 0x01	; 1
    1ada:	83 e2       	ldi	r24, 0x23	; 35
    1adc:	97 e0       	ldi	r25, 0x07	; 7
    1ade:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Stop bit mark length is wrong"));
    1ae2:	60 e8       	ldi	r22, 0x80	; 128
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	e5 cf       	rjmp	.-54     	; 0x1ab2 <_ZN6IRrecv8decodeLGEv+0xc2>
        return false;
    }

    // Success
    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    1ae8:	80 e8       	ldi	r24, 0x80	; 128
    1aea:	8e 8b       	std	Y+22, r24	; 0x16
    decodedIRData.command = (decodedIRData.decodedRawData >> LG_CHECKSUM_BITS) & 0xFFFF;
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	a9 8d       	ldd	r26, Y+25	; 0x19
    1af2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1af4:	6c 01       	movw	r12, r24
    1af6:	7d 01       	movw	r14, r26
    1af8:	74 e0       	ldi	r23, 0x04	; 4
    1afa:	f6 94       	lsr	r15
    1afc:	e7 94       	ror	r14
    1afe:	d7 94       	ror	r13
    1b00:	c7 94       	ror	r12
    1b02:	7a 95       	dec	r23
    1b04:	d1 f7       	brne	.-12     	; 0x1afa <_ZN6IRrecv8decodeLGEv+0x10a>
    1b06:	a6 01       	movw	r20, r12
    1b08:	da 8a       	std	Y+18, r13	; 0x12
    1b0a:	c9 8a       	std	Y+17, r12	; 0x11
    decodedIRData.address = decodedIRData.decodedRawData >> (LG_COMMAND_BITS + LG_CHECKSUM_BITS); // first 8 bit
    1b0c:	6c 01       	movw	r12, r24
    1b0e:	7d 01       	movw	r14, r26
    1b10:	e4 e1       	ldi	r30, 0x14	; 20
    1b12:	f6 94       	lsr	r15
    1b14:	e7 94       	ror	r14
    1b16:	d7 94       	ror	r13
    1b18:	c7 94       	ror	r12
    1b1a:	ea 95       	dec	r30
    1b1c:	d1 f7       	brne	.-12     	; 0x1b12 <_ZN6IRrecv8decodeLGEv+0x122>
    1b1e:	d8 8a       	std	Y+16, r13	; 0x10
    1b20:	cf 86       	std	Y+15, r12	; 0x0f
    1b22:	24 e0       	ldi	r18, 0x04	; 4
    1b24:	30 e0       	ldi	r19, 0x00	; 0

    /*
     * My guess of the checksum
     */
    uint8_t tChecksum = 0;
    1b26:	00 e0       	ldi	r16, 0x00	; 0
    uint16_t tTempForChecksum = decodedIRData.command;
    for (int i = 0; i < 4; ++i) {
        tChecksum += tTempForChecksum & 0xF; // add low nibble
    1b28:	64 2f       	mov	r22, r20
    1b2a:	6f 70       	andi	r22, 0x0F	; 15
    1b2c:	06 0f       	add	r16, r22
        tTempForChecksum >>= 4; // shift by a nibble
    1b2e:	64 e0       	ldi	r22, 0x04	; 4
    1b30:	56 95       	lsr	r21
    1b32:	47 95       	ror	r20
    1b34:	6a 95       	dec	r22
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <_ZN6IRrecv8decodeLGEv+0x140>
    1b38:	21 50       	subi	r18, 0x01	; 1
    1b3a:	31 09       	sbc	r19, r1
    /*
     * My guess of the checksum
     */
    uint8_t tChecksum = 0;
    uint16_t tTempForChecksum = decodedIRData.command;
    for (int i = 0; i < 4; ++i) {
    1b3c:	a9 f7       	brne	.-22     	; 0x1b28 <_ZN6IRrecv8decodeLGEv+0x138>
        tChecksum += tTempForChecksum & 0xF; // add low nibble
        tTempForChecksum >>= 4; // shift by a nibble
    }
    // Parity check
    if (tChecksum != (decodedIRData.decodedRawData & 0xF)) {
    1b3e:	40 2f       	mov	r20, r16
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	8f 70       	andi	r24, 0x0F	; 15
    1b48:	99 27       	eor	r25, r25
    1b4a:	aa 27       	eor	r26, r26
    1b4c:	bb 27       	eor	r27, r27
    1b4e:	48 17       	cp	r20, r24
    1b50:	59 07       	cpc	r21, r25
    1b52:	6a 07       	cpc	r22, r26
    1b54:	7b 07       	cpc	r23, r27
    1b56:	c1 f1       	breq	.+112    	; 0x1bc8 <_ZN6IRrecv8decodeLGEv+0x1d8>
        DBG_PRINT(F("LG: "));
    1b58:	6b e7       	ldi	r22, 0x7B	; 123
    1b5a:	71 e0       	ldi	r23, 0x01	; 1
    1b5c:	83 e2       	ldi	r24, 0x23	; 35
    1b5e:	97 e0       	ldi	r25, 0x07	; 7
    1b60:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINT("4 bit checksum is not correct. expected=0x");
    1b64:	6d e8       	ldi	r22, 0x8D	; 141
    1b66:	74 e0       	ldi	r23, 0x04	; 4
    1b68:	83 e2       	ldi	r24, 0x23	; 35
    1b6a:	97 e0       	ldi	r25, 0x07	; 7
    1b6c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(tChecksum, HEX);
    1b70:	40 e1       	ldi	r20, 0x10	; 16
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	60 2f       	mov	r22, r16
    1b76:	83 e2       	ldi	r24, 0x23	; 35
    1b78:	97 e0       	ldi	r25, 0x07	; 7
    1b7a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
        DBG_PRINT(" received=0x");
    1b7e:	6e ef       	ldi	r22, 0xFE	; 254
    1b80:	73 e0       	ldi	r23, 0x03	; 3
    1b82:	83 e2       	ldi	r24, 0x23	; 35
    1b84:	97 e0       	ldi	r25, 0x07	; 7
    1b86:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT((decodedIRData.decodedRawData & 0xF), HEX);
    1b8a:	4f 89       	ldd	r20, Y+23	; 0x17
    1b8c:	58 8d       	ldd	r21, Y+24	; 0x18
    1b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b92:	4f 70       	andi	r20, 0x0F	; 15
    1b94:	55 27       	eor	r21, r21
    1b96:	66 27       	eor	r22, r22
    1b98:	77 27       	eor	r23, r23
    1b9a:	20 e1       	ldi	r18, 0x10	; 16
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	83 e2       	ldi	r24, 0x23	; 35
    1ba0:	97 e0       	ldi	r25, 0x07	; 7
    1ba2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print5printEmi>
        DBG_PRINT(" data=0x");
    1ba6:	68 eb       	ldi	r22, 0xB8	; 184
    1ba8:	74 e0       	ldi	r23, 0x04	; 4
    1baa:	83 e2       	ldi	r24, 0x23	; 35
    1bac:	97 e0       	ldi	r25, 0x07	; 7
    1bae:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(decodedIRData.command, HEX);
    1bb2:	69 89       	ldd	r22, Y+17	; 0x11
    1bb4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bb6:	40 e1       	ldi	r20, 0x10	; 16
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	83 e2       	ldi	r24, 0x23	; 35
    1bbc:	97 e0       	ldi	r25, 0x07	; 7
    1bbe:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN5Print7printlnEji>
        decodedIRData.flags |= IRDATA_FLAGS_PARITY_FAILED;
    1bc2:	8e 89       	ldd	r24, Y+22	; 0x16
    1bc4:	84 60       	ori	r24, 0x04	; 4
    1bc6:	8e 8b       	std	Y+22, r24	; 0x16
    }

    decodedIRData.protocol = LG;
    1bc8:	84 e0       	ldi	r24, 0x04	; 4
    1bca:	8e 87       	std	Y+14, r24	; 0x0e
    decodedIRData.numberOfBits = LG_BITS;
    1bcc:	8c e1       	ldi	r24, 0x1C	; 28
    1bce:	8d 8b       	std	Y+21, r24	; 0x15

    return true;
    1bd0:	0c c0       	rjmp	.+24     	; 0x1bea <_ZN6IRrecv8decodeLGEv+0x1fa>
            decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_MSB_FIRST;
            decodedIRData.address = lastDecodedAddress;
            decodedIRData.command = lastDecodedCommand;
            return true;
        }
        return false;
    1bd2:	10 e0       	ldi	r17, 0x00	; 0
    1bd4:	0a c0       	rjmp	.+20     	; 0x1bea <_ZN6IRrecv8decodeLGEv+0x1fa>

    // Check for repeat - here we have another header space length
    if (decodedIRData.rawDataPtr->rawlen == 4) {
        if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], LG_REPEAT_HEADER_SPACE)
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3], LG_BIT_MARK)) {
            decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_MSB_FIRST;
    1bd6:	81 e8       	ldi	r24, 0x81	; 129
    1bd8:	8e 8b       	std	Y+22, r24	; 0x16
            decodedIRData.address = lastDecodedAddress;
    1bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bde:	98 8b       	std	Y+16, r25	; 0x10
    1be0:	8f 87       	std	Y+15, r24	; 0x0f
            decodedIRData.command = lastDecodedCommand;
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	9a 8b       	std	Y+18, r25	; 0x12
    1be8:	89 8b       	std	Y+17, r24	; 0x11

    decodedIRData.protocol = LG;
    decodedIRData.numberOfBits = LG_BITS;

    return true;
}
    1bea:	81 2f       	mov	r24, r17
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	08 95       	ret

00001bfe <_ZN6IRrecv15decodeMagiQuestEv>:
//+=============================================================================
//
/*
 * decodes a 32 bit result, which is nor really compatible with standard decoder layout
 */
bool IRrecv::decodeMagiQuest() {
    1bfe:	3f 92       	push	r3
    1c00:	4f 92       	push	r4
    1c02:	5f 92       	push	r5
    1c04:	6f 92       	push	r6
    1c06:	7f 92       	push	r7
    1c08:	8f 92       	push	r8
    1c0a:	9f 92       	push	r9
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	ce 56       	subi	r28, 0x6E	; 110
    1c26:	d1 09       	sbc	r29, r1
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    unsigned int space_;
    unsigned int ratio_;

#ifdef DEBUG
    char bitstring[(2 * MAGIQUEST_BITS) + 6];
    memset(bitstring, 0, sizeof(bitstring));
    1c32:	9e 01       	movw	r18, r28
    1c34:	2f 5f       	subi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	39 01       	movw	r6, r18
    1c3a:	26 e6       	ldi	r18, 0x66	; 102
    1c3c:	d3 01       	movw	r26, r6
    1c3e:	1d 92       	st	X+, r1
    1c40:	2a 95       	dec	r18
    1c42:	e9 f7       	brne	.-6      	; 0x1c3e <_ZN6IRrecv15decodeMagiQuestEv+0x40>
#endif

    // Check we have enough data (102), + 6 for 2 start and 1 stop bit
    if (decodedIRData.rawDataPtr->rawlen != (2 * MAGIQUEST_BITS) + 6) {
    1c44:	dc 01       	movw	r26, r24
    1c46:	5b 96       	adiw	r26, 0x1b	; 27
    1c48:	ed 91       	ld	r30, X+
    1c4a:	fc 91       	ld	r31, X
    1c4c:	5c 97       	sbiw	r26, 0x1c	; 28
    1c4e:	24 81       	ldd	r18, Z+4	; 0x04
    1c50:	26 36       	cpi	r18, 0x66	; 102
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <_ZN6IRrecv15decodeMagiQuestEv+0x58>
    1c54:	26 c1       	rjmp	.+588    	; 0x1ea2 <_ZN6IRrecv15decodeMagiQuestEv+0x2a4>
    1c56:	7c 01       	movw	r14, r24
        return false;
    }

    // Read the bits in
    data.llword = 0;
    1c58:	a8 96       	adiw	r28, 0x28	; 40
    1c5a:	1f ae       	std	Y+63, r1	; 0x3f
    1c5c:	a8 97       	sbiw	r28, 0x28	; 40
    1c5e:	a9 96       	adiw	r28, 0x29	; 41
    1c60:	1f ae       	std	Y+63, r1	; 0x3f
    1c62:	a9 97       	sbiw	r28, 0x29	; 41
    1c64:	aa 96       	adiw	r28, 0x2a	; 42
    1c66:	1f ae       	std	Y+63, r1	; 0x3f
    1c68:	aa 97       	sbiw	r28, 0x2a	; 42
    1c6a:	ab 96       	adiw	r28, 0x2b	; 43
    1c6c:	1f ae       	std	Y+63, r1	; 0x3f
    1c6e:	ab 97       	sbiw	r28, 0x2b	; 43
    1c70:	ac 96       	adiw	r28, 0x2c	; 44
    1c72:	1f ae       	std	Y+63, r1	; 0x3f
    1c74:	ac 97       	sbiw	r28, 0x2c	; 44
    1c76:	ad 96       	adiw	r28, 0x2d	; 45
    1c78:	1f ae       	std	Y+63, r1	; 0x3f
    1c7a:	ad 97       	sbiw	r28, 0x2d	; 45
    1c7c:	ae 96       	adiw	r28, 0x2e	; 46
    1c7e:	1f ae       	std	Y+63, r1	; 0x3f
    1c80:	ae 97       	sbiw	r28, 0x2e	; 46
    1c82:	af 96       	adiw	r28, 0x2f	; 47
    1c84:	1f ae       	std	Y+63, r1	; 0x3f
    1c86:	af 97       	sbiw	r28, 0x2f	; 47
/*
 * decodes a 32 bit result, which is nor really compatible with standard decoder layout
 */
bool IRrecv::decodeMagiQuest() {
    magiquest_t data;  // Somewhere to build our code
    unsigned int offset = 1;  // Skip the gap reading
    1c88:	cc 24       	eor	r12, r12
    1c8a:	c3 94       	inc	r12
    1c8c:	d1 2c       	mov	r13, r1
        space_ = decodedIRData.rawDataPtr->rawbuf[offset++];
        ratio_ = space_ / mark_;

        DBG_PRINT("MagiQuest: ");
        DBG_PRINT("mark=");
        DBG_PRINT(mark_ * MICROS_PER_TICK);
    1c8e:	42 e3       	ldi	r20, 0x32	; 50
    1c90:	54 2e       	mov	r5, r20
#endif
            } else {
                // It's a 1
                data.llword = (data.llword << 1) | 1;
#ifdef DEBUG
                bitstring[(offset / 2) - 1] = '1';
    1c92:	51 e3       	ldi	r21, 0x31	; 49
    1c94:	45 2e       	mov	r4, r21
        if (MATCH_MARK(space_ + mark_, MAGIQUEST_PERIOD)) {
            if (ratio_ > 1) {
                // It's a 0
                data.llword <<= 1;
#ifdef DEBUG
                bitstring[(offset / 2) - 1] = '0';
    1c96:	60 e3       	ldi	r22, 0x30	; 48
    1c98:	36 2e       	mov	r3, r22
        return false;
    }

    // Read the bits in
    data.llword = 0;
    while (offset + 1 < decodedIRData.rawDataPtr->rawlen) {
    1c9a:	d7 01       	movw	r26, r14
    1c9c:	5b 96       	adiw	r26, 0x1b	; 27
    1c9e:	ed 91       	ld	r30, X+
    1ca0:	fc 91       	ld	r31, X
    1ca2:	5c 97       	sbiw	r26, 0x1c	; 28
    1ca4:	84 81       	ldd	r24, Z+4	; 0x04
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	96 01       	movw	r18, r12
    1caa:	2f 5f       	subi	r18, 0xFF	; 255
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	28 17       	cp	r18, r24
    1cb0:	39 07       	cpc	r19, r25
    1cb2:	08 f0       	brcs	.+2      	; 0x1cb6 <_ZN6IRrecv15decodeMagiQuestEv+0xb8>
    1cb4:	ce c0       	rjmp	.+412    	; 0x1e52 <_ZN6IRrecv15decodeMagiQuestEv+0x254>
    1cb6:	c6 01       	movw	r24, r12
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	e8 0f       	add	r30, r24
    1cbe:	f9 1f       	adc	r31, r25
        mark_ = decodedIRData.rawDataPtr->rawbuf[offset++];
    1cc0:	a0 84       	ldd	r10, Z+8	; 0x08
    1cc2:	b1 84       	ldd	r11, Z+9	; 0x09
        space_ = decodedIRData.rawDataPtr->rawbuf[offset++];
    1cc4:	b2 e0       	ldi	r27, 0x02	; 2
    1cc6:	cb 0e       	add	r12, r27
    1cc8:	d1 1c       	adc	r13, r1
    1cca:	02 85       	ldd	r16, Z+10	; 0x0a
    1ccc:	13 85       	ldd	r17, Z+11	; 0x0b
        ratio_ = space_ / mark_;
    1cce:	c8 01       	movw	r24, r16
    1cd0:	b5 01       	movw	r22, r10
    1cd2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodhi4>
    1cd6:	4b 01       	movw	r8, r22

        DBG_PRINT("MagiQuest: ");
    1cd8:	68 e6       	ldi	r22, 0x68	; 104
    1cda:	75 e0       	ldi	r23, 0x05	; 5
    1cdc:	83 e2       	ldi	r24, 0x23	; 35
    1cde:	97 e0       	ldi	r25, 0x07	; 7
    1ce0:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT("mark=");
    1ce4:	64 e7       	ldi	r22, 0x74	; 116
    1ce6:	75 e0       	ldi	r23, 0x05	; 5
    1ce8:	83 e2       	ldi	r24, 0x23	; 35
    1cea:	97 e0       	ldi	r25, 0x07	; 7
    1cec:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(mark_ * MICROS_PER_TICK);
    1cf0:	5a 9c       	mul	r5, r10
    1cf2:	b0 01       	movw	r22, r0
    1cf4:	5b 9c       	mul	r5, r11
    1cf6:	70 0d       	add	r23, r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	4a e0       	ldi	r20, 0x0A	; 10
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	83 e2       	ldi	r24, 0x23	; 35
    1d00:	97 e0       	ldi	r25, 0x07	; 7
    1d02:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
        DBG_PRINT(" space=");
    1d06:	6a e7       	ldi	r22, 0x7A	; 122
    1d08:	75 e0       	ldi	r23, 0x05	; 5
    1d0a:	83 e2       	ldi	r24, 0x23	; 35
    1d0c:	97 e0       	ldi	r25, 0x07	; 7
    1d0e:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINT(space_ * MICROS_PER_TICK);
    1d12:	50 9e       	mul	r5, r16
    1d14:	b0 01       	movw	r22, r0
    1d16:	51 9e       	mul	r5, r17
    1d18:	70 0d       	add	r23, r0
    1d1a:	11 24       	eor	r1, r1
    1d1c:	4a e0       	ldi	r20, 0x0A	; 10
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	83 e2       	ldi	r24, 0x23	; 35
    1d22:	97 e0       	ldi	r25, 0x07	; 7
    1d24:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
        DBG_PRINT(" ratio=");
    1d28:	62 e8       	ldi	r22, 0x82	; 130
    1d2a:	75 e0       	ldi	r23, 0x05	; 5
    1d2c:	83 e2       	ldi	r24, 0x23	; 35
    1d2e:	97 e0       	ldi	r25, 0x07	; 7
    1d30:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN(ratio_);
    1d34:	4a e0       	ldi	r20, 0x0A	; 10
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	b4 01       	movw	r22, r8
    1d3a:	83 e2       	ldi	r24, 0x23	; 35
    1d3c:	97 e0       	ldi	r25, 0x07	; 7
    1d3e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN5Print7printlnEji>

        if (MATCH_MARK(space_ + mark_, MAGIQUEST_PERIOD)) {
    1d42:	6e e7       	ldi	r22, 0x7E	; 126
    1d44:	74 e0       	ldi	r23, 0x04	; 4
    1d46:	c5 01       	movw	r24, r10
    1d48:	80 0f       	add	r24, r16
    1d4a:	91 1f       	adc	r25, r17
    1d4c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1d50:	18 2f       	mov	r17, r24
    1d52:	88 23       	and	r24, r24
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <_ZN6IRrecv15decodeMagiQuestEv+0x15a>
    1d56:	76 c0       	rjmp	.+236    	; 0x1e44 <_ZN6IRrecv15decodeMagiQuestEv+0x246>
    1d58:	f6 01       	movw	r30, r12
    1d5a:	f6 95       	lsr	r31
    1d5c:	e7 95       	ror	r30
            if (ratio_ > 1) {
    1d5e:	22 e0       	ldi	r18, 0x02	; 2
    1d60:	82 16       	cp	r8, r18
    1d62:	91 04       	cpc	r9, r1
    1d64:	b8 f1       	brcs	.+110    	; 0x1dd4 <_ZN6IRrecv15decodeMagiQuestEv+0x1d6>
                // It's a 0
                data.llword <<= 1;
    1d66:	a8 96       	adiw	r28, 0x28	; 40
    1d68:	2f ad       	ldd	r18, Y+63	; 0x3f
    1d6a:	a8 97       	sbiw	r28, 0x28	; 40
    1d6c:	a9 96       	adiw	r28, 0x29	; 41
    1d6e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d70:	a9 97       	sbiw	r28, 0x29	; 41
    1d72:	aa 96       	adiw	r28, 0x2a	; 42
    1d74:	4f ad       	ldd	r20, Y+63	; 0x3f
    1d76:	aa 97       	sbiw	r28, 0x2a	; 42
    1d78:	ab 96       	adiw	r28, 0x2b	; 43
    1d7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d7c:	ab 97       	sbiw	r28, 0x2b	; 43
    1d7e:	ac 96       	adiw	r28, 0x2c	; 44
    1d80:	6f ad       	ldd	r22, Y+63	; 0x3f
    1d82:	ac 97       	sbiw	r28, 0x2c	; 44
    1d84:	ad 96       	adiw	r28, 0x2d	; 45
    1d86:	7f ad       	ldd	r23, Y+63	; 0x3f
    1d88:	ad 97       	sbiw	r28, 0x2d	; 45
    1d8a:	ae 96       	adiw	r28, 0x2e	; 46
    1d8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d8e:	ae 97       	sbiw	r28, 0x2e	; 46
    1d90:	af 96       	adiw	r28, 0x2f	; 47
    1d92:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d94:	af 97       	sbiw	r28, 0x2f	; 47
    1d96:	01 e0       	ldi	r16, 0x01	; 1
    1d98:	0e 94 2a 19 	call	0x3254	; 0x3254 <__ashldi3>
    1d9c:	a8 96       	adiw	r28, 0x28	; 40
    1d9e:	2f af       	std	Y+63, r18	; 0x3f
    1da0:	a8 97       	sbiw	r28, 0x28	; 40
    1da2:	a9 96       	adiw	r28, 0x29	; 41
    1da4:	3f af       	std	Y+63, r19	; 0x3f
    1da6:	a9 97       	sbiw	r28, 0x29	; 41
    1da8:	aa 96       	adiw	r28, 0x2a	; 42
    1daa:	4f af       	std	Y+63, r20	; 0x3f
    1dac:	aa 97       	sbiw	r28, 0x2a	; 42
    1dae:	ab 96       	adiw	r28, 0x2b	; 43
    1db0:	5f af       	std	Y+63, r21	; 0x3f
    1db2:	ab 97       	sbiw	r28, 0x2b	; 43
    1db4:	ac 96       	adiw	r28, 0x2c	; 44
    1db6:	6f af       	std	Y+63, r22	; 0x3f
    1db8:	ac 97       	sbiw	r28, 0x2c	; 44
    1dba:	ad 96       	adiw	r28, 0x2d	; 45
    1dbc:	7f af       	std	Y+63, r23	; 0x3f
    1dbe:	ad 97       	sbiw	r28, 0x2d	; 45
    1dc0:	ae 96       	adiw	r28, 0x2e	; 46
    1dc2:	8f af       	std	Y+63, r24	; 0x3f
    1dc4:	ae 97       	sbiw	r28, 0x2e	; 46
    1dc6:	af 96       	adiw	r28, 0x2f	; 47
    1dc8:	9f af       	std	Y+63, r25	; 0x3f
    1dca:	af 97       	sbiw	r28, 0x2f	; 47
#ifdef DEBUG
                bitstring[(offset / 2) - 1] = '0';
    1dcc:	ec 0f       	add	r30, r28
    1dce:	fd 1f       	adc	r31, r29
    1dd0:	30 82       	st	Z, r3
    1dd2:	63 cf       	rjmp	.-314    	; 0x1c9a <_ZN6IRrecv15decodeMagiQuestEv+0x9c>
#endif
            } else {
                // It's a 1
                data.llword = (data.llword << 1) | 1;
    1dd4:	a8 96       	adiw	r28, 0x28	; 40
    1dd6:	2f ad       	ldd	r18, Y+63	; 0x3f
    1dd8:	a8 97       	sbiw	r28, 0x28	; 40
    1dda:	a9 96       	adiw	r28, 0x29	; 41
    1ddc:	3f ad       	ldd	r19, Y+63	; 0x3f
    1dde:	a9 97       	sbiw	r28, 0x29	; 41
    1de0:	aa 96       	adiw	r28, 0x2a	; 42
    1de2:	4f ad       	ldd	r20, Y+63	; 0x3f
    1de4:	aa 97       	sbiw	r28, 0x2a	; 42
    1de6:	ab 96       	adiw	r28, 0x2b	; 43
    1de8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dea:	ab 97       	sbiw	r28, 0x2b	; 43
    1dec:	ac 96       	adiw	r28, 0x2c	; 44
    1dee:	6f ad       	ldd	r22, Y+63	; 0x3f
    1df0:	ac 97       	sbiw	r28, 0x2c	; 44
    1df2:	ad 96       	adiw	r28, 0x2d	; 45
    1df4:	7f ad       	ldd	r23, Y+63	; 0x3f
    1df6:	ad 97       	sbiw	r28, 0x2d	; 45
    1df8:	ae 96       	adiw	r28, 0x2e	; 46
    1dfa:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dfc:	ae 97       	sbiw	r28, 0x2e	; 46
    1dfe:	af 96       	adiw	r28, 0x2f	; 47
    1e00:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e02:	af 97       	sbiw	r28, 0x2f	; 47
    1e04:	01 e0       	ldi	r16, 0x01	; 1
    1e06:	0e 94 2a 19 	call	0x3254	; 0x3254 <__ashldi3>
    1e0a:	21 60       	ori	r18, 0x01	; 1
    1e0c:	a8 96       	adiw	r28, 0x28	; 40
    1e0e:	2f af       	std	Y+63, r18	; 0x3f
    1e10:	a8 97       	sbiw	r28, 0x28	; 40
    1e12:	a9 96       	adiw	r28, 0x29	; 41
    1e14:	3f af       	std	Y+63, r19	; 0x3f
    1e16:	a9 97       	sbiw	r28, 0x29	; 41
    1e18:	aa 96       	adiw	r28, 0x2a	; 42
    1e1a:	4f af       	std	Y+63, r20	; 0x3f
    1e1c:	aa 97       	sbiw	r28, 0x2a	; 42
    1e1e:	ab 96       	adiw	r28, 0x2b	; 43
    1e20:	5f af       	std	Y+63, r21	; 0x3f
    1e22:	ab 97       	sbiw	r28, 0x2b	; 43
    1e24:	ac 96       	adiw	r28, 0x2c	; 44
    1e26:	6f af       	std	Y+63, r22	; 0x3f
    1e28:	ac 97       	sbiw	r28, 0x2c	; 44
    1e2a:	ad 96       	adiw	r28, 0x2d	; 45
    1e2c:	7f af       	std	Y+63, r23	; 0x3f
    1e2e:	ad 97       	sbiw	r28, 0x2d	; 45
    1e30:	ae 96       	adiw	r28, 0x2e	; 46
    1e32:	8f af       	std	Y+63, r24	; 0x3f
    1e34:	ae 97       	sbiw	r28, 0x2e	; 46
    1e36:	af 96       	adiw	r28, 0x2f	; 47
    1e38:	9f af       	std	Y+63, r25	; 0x3f
    1e3a:	af 97       	sbiw	r28, 0x2f	; 47
#ifdef DEBUG
                bitstring[(offset / 2) - 1] = '1';
    1e3c:	ec 0f       	add	r30, r28
    1e3e:	fd 1f       	adc	r31, r29
    1e40:	40 82       	st	Z, r4
    1e42:	2b cf       	rjmp	.-426    	; 0x1c9a <_ZN6IRrecv15decodeMagiQuestEv+0x9c>
#endif
            }
        } else {
            DBG_PRINTLN("MATCH_MARK failed");
    1e44:	6a e8       	ldi	r22, 0x8A	; 138
    1e46:	75 e0       	ldi	r23, 0x05	; 5
    1e48:	83 e2       	ldi	r24, 0x23	; 35
    1e4a:	97 e0       	ldi	r25, 0x07	; 7
    1e4c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
            return false;
    1e50:	29 c0       	rjmp	.+82     	; 0x1ea4 <_ZN6IRrecv15decodeMagiQuestEv+0x2a6>
        }
    }
#ifdef DEBUG
    DBG_PRINTLN(bitstring);
    1e52:	b3 01       	movw	r22, r6
    1e54:	83 e2       	ldi	r24, 0x23	; 35
    1e56:	97 e0       	ldi	r25, 0x07	; 7
    1e58:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
#endif

    // Success
    decodedIRData.protocol = MAGIQUEST;
    1e5c:	84 e1       	ldi	r24, 0x14	; 20
    1e5e:	d7 01       	movw	r26, r14
    1e60:	1e 96       	adiw	r26, 0x0e	; 14
    1e62:	8c 93       	st	X, r24
    1e64:	1e 97       	sbiw	r26, 0x0e	; 14
    decodedIRData.numberOfBits = offset / 2;
    1e66:	d6 94       	lsr	r13
    1e68:	c7 94       	ror	r12
    1e6a:	55 96       	adiw	r26, 0x15	; 21
    1e6c:	cc 92       	st	X, r12
    1e6e:	55 97       	sbiw	r26, 0x15	; 21
    decodedIRData.flags = IRDATA_FLAGS_EXTRA_INFO;
    1e70:	80 e1       	ldi	r24, 0x10	; 16
    1e72:	56 96       	adiw	r26, 0x16	; 22
    1e74:	8c 93       	st	X, r24
    1e76:	56 97       	sbiw	r26, 0x16	; 22
    decodedIRData.extra = data.cmd.magnitude;
    1e78:	a9 96       	adiw	r28, 0x29	; 41
    1e7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e7e:	a9 97       	sbiw	r28, 0x29	; 41
    1e80:	54 96       	adiw	r26, 0x14	; 20
    1e82:	9c 93       	st	X, r25
    1e84:	8e 93       	st	-X, r24
    1e86:	53 97       	sbiw	r26, 0x13	; 19
    decodedIRData.decodedRawData = data.cmd.wand_id;
    1e88:	ad 96       	adiw	r28, 0x2d	; 45
    1e8a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e8c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e8e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e90:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e92:	ad 97       	sbiw	r28, 0x2d	; 45
    1e94:	f7 01       	movw	r30, r14
    1e96:	87 8b       	std	Z+23, r24	; 0x17
    1e98:	90 8f       	std	Z+24, r25	; 0x18
    1e9a:	a1 8f       	std	Z+25, r26	; 0x19
    1e9c:	b2 8f       	std	Z+26, r27	; 0x1a

    return true;
    1e9e:	11 e0       	ldi	r17, 0x01	; 1
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <_ZN6IRrecv15decodeMagiQuestEv+0x2a6>
    memset(bitstring, 0, sizeof(bitstring));
#endif

    // Check we have enough data (102), + 6 for 2 start and 1 stop bit
    if (decodedIRData.rawDataPtr->rawlen != (2 * MAGIQUEST_BITS) + 6) {
        return false;
    1ea2:	10 e0       	ldi	r17, 0x00	; 0
    decodedIRData.flags = IRDATA_FLAGS_EXTRA_INFO;
    decodedIRData.extra = data.cmd.magnitude;
    decodedIRData.decodedRawData = data.cmd.wand_id;

    return true;
}
    1ea4:	81 2f       	mov	r24, r17
    1ea6:	c2 59       	subi	r28, 0x92	; 146
    1ea8:	df 4f       	sbci	r29, 0xFF	; 255
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	9f 90       	pop	r9
    1eca:	8f 90       	pop	r8
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	5f 90       	pop	r5
    1ed2:	4f 90       	pop	r4
    1ed4:	3f 90       	pop	r3
    1ed6:	08 95       	ret

00001ed8 <_ZN6IRrecv9decodeNECEv>:
 * Next try the decode
 * Last check stop bit
 *
 * Decodes also Apple
 */
bool IRrecv::decodeNEC() {
    1ed8:	cf 92       	push	r12
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	ec 01       	movw	r28, r24

    // Check we have the right amount of data (68). The +4 is for initial gap, start bit mark and space + stop bit mark.
    if (decodedIRData.rawDataPtr->rawlen != ((2 * NEC_BITS) + 4) && (decodedIRData.rawDataPtr->rawlen != 4)) {
    1ee8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1eea:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1eec:	94 81       	ldd	r25, Z+4	; 0x04
    1eee:	9f 7b       	andi	r25, 0xBF	; 191
    1ef0:	94 30       	cpi	r25, 0x04	; 4
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <_ZN6IRrecv9decodeNECEv+0x1e>
    1ef4:	b6 c0       	rjmp	.+364    	; 0x2062 <_ZN6IRrecv9decodeNECEv+0x18a>
        // no debug output, since this check is mainly to determine the received protocol
        return false;
    }

    // Check header "mark" this must be done for repeat and data
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], NEC_HEADER_MARK)) {
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	73 e2       	ldi	r23, 0x23	; 35
    1efa:	82 85       	ldd	r24, Z+10	; 0x0a
    1efc:	93 85       	ldd	r25, Z+11	; 0x0b
    1efe:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1f02:	88 23       	and	r24, r24
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <_ZN6IRrecv9decodeNECEv+0x30>
    1f06:	ad c0       	rjmp	.+346    	; 0x2062 <_ZN6IRrecv9decodeNECEv+0x18a>
        return false;
    }

    // Check for repeat - here we have another header space length
    if (decodedIRData.rawDataPtr->rawlen == 4) {
    1f08:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f0a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f0c:	24 81       	ldd	r18, Z+4	; 0x04
    1f0e:	84 85       	ldd	r24, Z+12	; 0x0c
    1f10:	95 85       	ldd	r25, Z+13	; 0x0d
    1f12:	24 30       	cpi	r18, 0x04	; 4
    1f14:	51 f4       	brne	.+20     	; 0x1f2a <_ZN6IRrecv9decodeNECEv+0x52>
        if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], NEC_REPEAT_HEADER_SPACE)
    1f16:	60 ec       	ldi	r22, 0xC0	; 192
    1f18:	78 e0       	ldi	r23, 0x08	; 8
    1f1a:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3], NEC_BIT_MARK)) {
    1f1e:	88 23       	and	r24, r24
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <_ZN6IRrecv9decodeNECEv+0x4c>
    1f22:	9f c0       	rjmp	.+318    	; 0x2062 <_ZN6IRrecv9decodeNECEv+0x18a>
    1f24:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f26:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f28:	15 c0       	rjmp	.+42     	; 0x1f54 <_ZN6IRrecv9decodeNECEv+0x7c>
        }
        return false;
    }

    // Check command header space
    if (!MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], NEC_HEADER_SPACE)) {
    1f2a:	60 e8       	ldi	r22, 0x80	; 128
    1f2c:	71 e1       	ldi	r23, 0x11	; 17
    1f2e:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    1f32:	18 2f       	mov	r17, r24
    1f34:	81 11       	cpse	r24, r1
    1f36:	09 c0       	rjmp	.+18     	; 0x1f4a <_ZN6IRrecv9decodeNECEv+0x72>
        DBG_PRINT(F("NEC: "));
    1f38:	6b e5       	ldi	r22, 0x5B	; 91
    1f3a:	72 e0       	ldi	r23, 0x02	; 2
    1f3c:	83 e2       	ldi	r24, 0x23	; 35
    1f3e:	97 e0       	ldi	r25, 0x07	; 7
    1f40:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Header space length is wrong"));
    1f44:	6e e3       	ldi	r22, 0x3E	; 62
    1f46:	72 e0       	ldi	r23, 0x02	; 2
    1f48:	29 c0       	rjmp	.+82     	; 0x1f9c <_ZN6IRrecv9decodeNECEv+0xc4>
        return false;
    }

    // Check for repeat
    if (decodedIRData.rawDataPtr->rawlen == 4) {
    1f4a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f4c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f4e:	84 81       	ldd	r24, Z+4	; 0x04
    1f50:	84 30       	cpi	r24, 0x04	; 4
    1f52:	59 f4       	brne	.+22     	; 0x1f6a <_ZN6IRrecv9decodeNECEv+0x92>
        if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3], NEC_BIT_MARK)) {
    1f54:	60 e3       	ldi	r22, 0x30	; 48
    1f56:	72 e0       	ldi	r23, 0x02	; 2
    1f58:	86 85       	ldd	r24, Z+14	; 0x0e
    1f5a:	97 85       	ldd	r25, Z+15	; 0x0f
    1f5c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1f60:	18 2f       	mov	r17, r24
    1f62:	88 23       	and	r24, r24
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <_ZN6IRrecv9decodeNECEv+0x90>
    1f66:	7d c0       	rjmp	.+250    	; 0x2062 <_ZN6IRrecv9decodeNECEv+0x18a>
    1f68:	7e c0       	rjmp	.+252    	; 0x2066 <_ZN6IRrecv9decodeNECEv+0x18e>
            return true;
        }
        return false;
    }

    if (!decodePulseDistanceData(NEC_BITS, 3, NEC_BIT_MARK, NEC_ONE_SPACE, NEC_ZERO_SPACE, false)) {
    1f6a:	c1 2c       	mov	r12, r1
    1f6c:	80 e3       	ldi	r24, 0x30	; 48
    1f6e:	e8 2e       	mov	r14, r24
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	f8 2e       	mov	r15, r24
    1f74:	00 e9       	ldi	r16, 0x90	; 144
    1f76:	16 e0       	ldi	r17, 0x06	; 6
    1f78:	20 e3       	ldi	r18, 0x30	; 48
    1f7a:	32 e0       	ldi	r19, 0x02	; 2
    1f7c:	43 e0       	ldi	r20, 0x03	; 3
    1f7e:	60 e2       	ldi	r22, 0x20	; 32
    1f80:	ce 01       	movw	r24, r28
    1f82:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    1f86:	18 2f       	mov	r17, r24
    1f88:	81 11       	cpse	r24, r1
    1f8a:	0d c0       	rjmp	.+26     	; 0x1fa6 <_ZN6IRrecv9decodeNECEv+0xce>
        DBG_PRINT(F("NEC: "));
    1f8c:	68 e3       	ldi	r22, 0x38	; 56
    1f8e:	72 e0       	ldi	r23, 0x02	; 2
    1f90:	83 e2       	ldi	r24, 0x23	; 35
    1f92:	97 e0       	ldi	r25, 0x07	; 7
    1f94:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Decode failed"));
    1f98:	6a e2       	ldi	r22, 0x2A	; 42
    1f9a:	72 e0       	ldi	r23, 0x02	; 2
    1f9c:	83 e2       	ldi	r24, 0x23	; 35
    1f9e:	97 e0       	ldi	r25, 0x07	; 7
    1fa0:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    1fa4:	6a c0       	rjmp	.+212    	; 0x207a <_ZN6IRrecv9decodeNECEv+0x1a2>
    }

    // Stop bit
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3 + (2 * NEC_BITS)], NEC_BIT_MARK)) {
    1fa6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1fa8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1faa:	e2 57       	subi	r30, 0x72	; 114
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 e3       	ldi	r22, 0x30	; 48
    1fb0:	72 e0       	ldi	r23, 0x02	; 2
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    1fba:	18 2f       	mov	r17, r24
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	09 c0       	rjmp	.+18     	; 0x1fd2 <_ZN6IRrecv9decodeNECEv+0xfa>
        DBG_PRINT(F("NEC: "));
    1fc0:	64 e2       	ldi	r22, 0x24	; 36
    1fc2:	72 e0       	ldi	r23, 0x02	; 2
    1fc4:	83 e2       	ldi	r24, 0x23	; 35
    1fc6:	97 e0       	ldi	r25, 0x07	; 7
    1fc8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Stop bit mark length is wrong"));
    1fcc:	66 e0       	ldi	r22, 0x06	; 6
    1fce:	72 e0       	ldi	r23, 0x02	; 2
    1fd0:	e5 cf       	rjmp	.-54     	; 0x1f9c <_ZN6IRrecv9decodeNECEv+0xc4>
    }

    // Success
//    decodedIRData.flags = IRDATA_FLAGS_IS_LSB_FIRST; // Not required, since this is the start value
    LongUnion tValue;
    tValue.ULong = decodedIRData.decodedRawData;
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	f9 8c       	ldd	r15, Y+25	; 0x19
    1fd8:	0a 8d       	ldd	r16, Y+26	; 0x1a
    decodedIRData.command = tValue.UByte.MidHighByte;
    1fda:	2f 2d       	mov	r18, r15
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	3a 8b       	std	Y+18, r19	; 0x12
    1fe0:	29 8b       	std	Y+17, r18	; 0x11
    // Address
    if (tValue.UWord.LowWord == APPLE_ADDRESS) {
    1fe2:	9c 01       	movw	r18, r24
    1fe4:	2e 3e       	cpi	r18, 0xEE	; 238
    1fe6:	47 e8       	ldi	r20, 0x87	; 135
    1fe8:	34 07       	cpc	r19, r20
    1fea:	39 f4       	brne	.+14     	; 0x1ffa <_ZN6IRrecv9decodeNECEv+0x122>
        /*
         * Apple
         */
        decodedIRData.protocol = APPLE;
    1fec:	81 e1       	ldi	r24, 0x11	; 17
    1fee:	8e 87       	std	Y+14, r24	; 0x0e
        decodedIRData.command = tValue.UByte.MidHighByte;
        decodedIRData.address = tValue.UByte.HighByte;
    1ff0:	60 2f       	mov	r22, r16
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	78 8b       	std	Y+16, r23	; 0x10
    1ff6:	6f 87       	std	Y+15, r22	; 0x0f
    1ff8:	31 c0       	rjmp	.+98     	; 0x205c <_ZN6IRrecv9decodeNECEv+0x184>

    } else {
        /*
         * NEC
         */
        decodedIRData.protocol = NEC;
    1ffa:	45 e0       	ldi	r20, 0x05	; 5
    1ffc:	4e 87       	std	Y+14, r20	; 0x0e
        if (tValue.UByte.LowByte == (uint8_t) (~tValue.UByte.MidLowByte)) {
    1ffe:	90 95       	com	r25
    2000:	89 13       	cpse	r24, r25
    2002:	04 c0       	rjmp	.+8      	; 0x200c <_ZN6IRrecv9decodeNECEv+0x134>
            // standard 8 bit address NEC protocol
            decodedIRData.address = tValue.UByte.LowByte; // first 8 bit
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	98 8b       	std	Y+16, r25	; 0x10
    2008:	8f 87       	std	Y+15, r24	; 0x0f
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <_ZN6IRrecv9decodeNECEv+0x138>
        } else {
            // extended NEC protocol
            decodedIRData.address = tValue.UWord.LowWord; // first 16 bit
    200c:	38 8b       	std	Y+16, r19	; 0x10
    200e:	2f 87       	std	Y+15, r18	; 0x0f
        }
        // plausi check for command
        if (tValue.UByte.MidHighByte != (uint8_t) (~tValue.UByte.HighByte)) {
    2010:	80 2f       	mov	r24, r16
    2012:	80 95       	com	r24
    2014:	f8 16       	cp	r15, r24
    2016:	11 f1       	breq	.+68     	; 0x205c <_ZN6IRrecv9decodeNECEv+0x184>
            DBG_PRINT(F("NEC: "));
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	72 e0       	ldi	r23, 0x02	; 2
    201c:	83 e2       	ldi	r24, 0x23	; 35
    201e:	97 e0       	ldi	r25, 0x07	; 7
    2020:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
            DBG_PRINT(F("Command=0x"));
    2024:	65 ef       	ldi	r22, 0xF5	; 245
    2026:	71 e0       	ldi	r23, 0x01	; 1
    2028:	83 e2       	ldi	r24, 0x23	; 35
    202a:	97 e0       	ldi	r25, 0x07	; 7
    202c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
            DBG_PRINT(tValue.UByte.MidHighByte, HEX);
    2030:	40 e1       	ldi	r20, 0x10	; 16
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	6f 2d       	mov	r22, r15
    2036:	83 e2       	ldi	r24, 0x23	; 35
    2038:	97 e0       	ldi	r25, 0x07	; 7
    203a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
            DBG_PRINT(F(" is not inverted value of 0x"));
    203e:	68 ed       	ldi	r22, 0xD8	; 216
    2040:	71 e0       	ldi	r23, 0x01	; 1
    2042:	83 e2       	ldi	r24, 0x23	; 35
    2044:	97 e0       	ldi	r25, 0x07	; 7
    2046:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
            DBG_PRINTLN(tValue.UByte.HighByte, HEX);
    204a:	40 e1       	ldi	r20, 0x10	; 16
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	60 2f       	mov	r22, r16
    2050:	83 e2       	ldi	r24, 0x23	; 35
    2052:	97 e0       	ldi	r25, 0x07	; 7
    2054:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN5Print7printlnEhi>
            decodedIRData.flags = IRDATA_FLAGS_PARITY_FAILED | IRDATA_FLAGS_IS_LSB_FIRST;
    2058:	84 e0       	ldi	r24, 0x04	; 4
    205a:	8e 8b       	std	Y+22, r24	; 0x16
        }
    }
    decodedIRData.numberOfBits = NEC_BITS;
    205c:	80 e2       	ldi	r24, 0x20	; 32
    205e:	8d 8b       	std	Y+21, r24	; 0x15

    return true;
    2060:	0c c0       	rjmp	.+24     	; 0x207a <_ZN6IRrecv9decodeNECEv+0x1a2>
            decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_LSB_FIRST;
            decodedIRData.address = lastDecodedAddress;
            decodedIRData.command = lastDecodedCommand;
            return true;
        }
        return false;
    2062:	10 e0       	ldi	r17, 0x00	; 0
    2064:	0a c0       	rjmp	.+20     	; 0x207a <_ZN6IRrecv9decodeNECEv+0x1a2>

    // Check for repeat - here we have another header space length
    if (decodedIRData.rawDataPtr->rawlen == 4) {
        if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], NEC_REPEAT_HEADER_SPACE)
                && MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3], NEC_BIT_MARK)) {
            decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_LSB_FIRST;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	8e 8b       	std	Y+22, r24	; 0x16
            decodedIRData.address = lastDecodedAddress;
    206a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
            decodedIRData.command = lastDecodedCommand;
    2072:	89 a1       	ldd	r24, Y+33	; 0x21
    2074:	9a a1       	ldd	r25, Y+34	; 0x22
    2076:	9a 8b       	std	Y+18, r25	; 0x12
    2078:	89 8b       	std	Y+17, r24	; 0x11
        }
    }
    decodedIRData.numberOfBits = NEC_BITS;

    return true;
}
    207a:	81 2f       	mov	r24, r17
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	cf 90       	pop	r12
    208a:	08 95       	ret

0000208c <_ZN6IRrecv9decodeRC5Ev>:
        if (tNumberOfCommands > 0) {
            // send repeated command in a fixed raster
            delay(RC6_REPEAT_SPACE / 1000);
        }
    }
}
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	ec 01       	movw	r28, r24
    2096:	09 e7       	ldi	r16, 0x79	; 121
    2098:	13 e0       	ldi	r17, 0x03	; 3
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	6e e0       	ldi	r22, 0x0E	; 14
    20a0:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6IRrecv17decodeBiPhaseDataEhhhj>
    20a4:	88 23       	and	r24, r24
    20a6:	69 f1       	breq	.+90     	; 0x2102 <_ZN6IRrecv9decodeRC5Ev+0x76>
    20a8:	90 e8       	ldi	r25, 0x80	; 128
    20aa:	9e 8b       	std	Y+22, r25	; 0x16
    20ac:	6f 89       	ldd	r22, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	26 2f       	mov	r18, r22
    20b2:	2f 73       	andi	r18, 0x3F	; 63
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3a 8b       	std	Y+18, r19	; 0x12
    20b8:	29 8b       	std	Y+17, r18	; 0x11
    20ba:	46 2f       	mov	r20, r22
    20bc:	59 2f       	mov	r21, r25
    20be:	ba 01       	movw	r22, r20
    20c0:	e6 e0       	ldi	r30, 0x06	; 6
    20c2:	76 95       	lsr	r23
    20c4:	67 95       	ror	r22
    20c6:	ea 95       	dec	r30
    20c8:	e1 f7       	brne	.-8      	; 0x20c2 <_ZN6IRrecv9decodeRC5Ev+0x36>
    20ca:	6f 71       	andi	r22, 0x1F	; 31
    20cc:	77 27       	eor	r23, r23
    20ce:	78 8b       	std	Y+16, r23	; 0x10
    20d0:	6f 87       	std	Y+15, r22	; 0x0f
    20d2:	54 fd       	sbrc	r21, 4
    20d4:	04 c0       	rjmp	.+8      	; 0x20de <_ZN6IRrecv9decodeRC5Ev+0x52>
    20d6:	20 5c       	subi	r18, 0xC0	; 192
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	3a 8b       	std	Y+18, r19	; 0x12
    20dc:	29 8b       	std	Y+17, r18	; 0x11
    20de:	93 ff       	sbrs	r25, 3
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <_ZN6IRrecv9decodeRC5Ev+0x5a>
    20e2:	98 e8       	ldi	r25, 0x88	; 136
    20e4:	9e 8b       	std	Y+22, r25	; 0x16
    20e6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    20e8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    20ea:	20 85       	ldd	r18, Z+8	; 0x08
    20ec:	31 85       	ldd	r19, Z+9	; 0x09
    20ee:	23 3e       	cpi	r18, 0xE3	; 227
    20f0:	38 40       	sbci	r19, 0x08	; 8
    20f2:	18 f4       	brcc	.+6      	; 0x20fa <_ZN6IRrecv9decodeRC5Ev+0x6e>
    20f4:	9e 89       	ldd	r25, Y+22	; 0x16
    20f6:	91 60       	ori	r25, 0x01	; 1
    20f8:	9e 8b       	std	Y+22, r25	; 0x16
    20fa:	9c e0       	ldi	r25, 0x0C	; 12
    20fc:	9e 87       	std	Y+14, r25	; 0x0e
    20fe:	9d e0       	ldi	r25, 0x0D	; 13
    2100:	9d 8b       	std	Y+21, r25	; 0x15
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	08 95       	ret

0000210c <_ZN6IRrecv9decodeRC6Ev>:

#if !defined(USE_OLD_DECODE)
bool IRrecv::decodeRC6() {
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	ec 01       	movw	r28, r24
        // no debug output, since this check is mainly to determine the received protocol
        return false;
    }

    // Check header "mark" and "space", this must be done for repeat and data
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], RC6_HEADER_MARK) || !MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], RC6_HEADER_SPACE)) {
    2116:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2118:	fc 8d       	ldd	r31, Y+28	; 0x1c
    211a:	68 e6       	ldi	r22, 0x68	; 104
    211c:	7a e0       	ldi	r23, 0x0A	; 10
    211e:	82 85       	ldd	r24, Z+10	; 0x0a
    2120:	93 85       	ldd	r25, Z+11	; 0x0b
    2122:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <_ZN6IRrecv9decodeRC6Ev+0x20>
    212a:	7a c0       	rjmp	.+244    	; 0x2220 <_ZN6IRrecv9decodeRC6Ev+0x114>
    212c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    212e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2130:	68 e7       	ldi	r22, 0x78	; 120
    2132:	73 e0       	ldi	r23, 0x03	; 3
    2134:	84 85       	ldd	r24, Z+12	; 0x0c
    2136:	95 85       	ldd	r25, Z+13	; 0x0d
    2138:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    213c:	88 23       	and	r24, r24
    213e:	09 f4       	brne	.+2      	; 0x2142 <_ZN6IRrecv9decodeRC6Ev+0x36>
    2140:	6f c0       	rjmp	.+222    	; 0x2220 <_ZN6IRrecv9decodeRC6Ev+0x114>
     *       |__| |__| |_| |_|    |__|_|
     *                         Toggle0
     * ______    _    _   _   _    __ _
     *       |__| |__| |_| |_| |__|  |_|
     */
    if (!decodeBiPhaseData(RC6_LEADING_BIT + RC6_MODE_BITS, 3, 0, RC6_UNIT)) {
    2142:	0c eb       	ldi	r16, 0xBC	; 188
    2144:	11 e0       	ldi	r17, 0x01	; 1
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	43 e0       	ldi	r20, 0x03	; 3
    214a:	64 e0       	ldi	r22, 0x04	; 4
    214c:	ce 01       	movw	r24, r28
    214e:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6IRrecv17decodeBiPhaseDataEhhhj>
    2152:	18 2f       	mov	r17, r24
    2154:	81 11       	cpse	r24, r1
    2156:	09 c0       	rjmp	.+18     	; 0x216a <_ZN6IRrecv9decodeRC6Ev+0x5e>
        DBG_PRINT(F("RC6: "));
    2158:	6f e3       	ldi	r22, 0x3F	; 63
    215a:	73 e0       	ldi	r23, 0x03	; 3
    215c:	83 e2       	ldi	r24, 0x23	; 35
    215e:	97 e0       	ldi	r25, 0x07	; 7
    2160:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Preamble mark or space length is wrong"));
    2164:	68 e1       	ldi	r22, 0x18	; 24
    2166:	73 e0       	ldi	r23, 0x03	; 3
    2168:	56 c0       	rjmp	.+172    	; 0x2216 <_ZN6IRrecv9decodeRC6Ev+0x10a>
        return false;
    }
    if (decodedIRData.decodedRawData != 4) {
    216a:	8f 89       	ldd	r24, Y+23	; 0x17
    216c:	98 8d       	ldd	r25, Y+24	; 0x18
    216e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2170:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2172:	04 97       	sbiw	r24, 0x04	; 4
    2174:	a1 05       	cpc	r26, r1
    2176:	b1 05       	cpc	r27, r1
    2178:	e9 f0       	breq	.+58     	; 0x21b4 <_ZN6IRrecv9decodeRC6Ev+0xa8>
        DBG_PRINT(F("RC6: "));
    217a:	62 e1       	ldi	r22, 0x12	; 18
    217c:	73 e0       	ldi	r23, 0x03	; 3
    217e:	83 e2       	ldi	r24, 0x23	; 35
    2180:	97 e0       	ldi	r25, 0x07	; 7
    2182:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINT(F("Preamble content "));
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	73 e0       	ldi	r23, 0x03	; 3
    218a:	83 e2       	ldi	r24, 0x23	; 35
    218c:	97 e0       	ldi	r25, 0x07	; 7
    218e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINT(decodedIRData.decodedRawData);
    2192:	4f 89       	ldd	r20, Y+23	; 0x17
    2194:	58 8d       	ldd	r21, Y+24	; 0x18
    2196:	69 8d       	ldd	r22, Y+25	; 0x19
    2198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219a:	2a e0       	ldi	r18, 0x0A	; 10
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	83 e2       	ldi	r24, 0x23	; 35
    21a0:	97 e0       	ldi	r25, 0x07	; 7
    21a2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print5printEmi>
        DBG_PRINTLN(F(" is not 4"));
    21a6:	66 ef       	ldi	r22, 0xF6	; 246
    21a8:	72 e0       	ldi	r23, 0x02	; 2
    21aa:	83 e2       	ldi	r24, 0x23	; 35
    21ac:	97 e0       	ldi	r25, 0x07	; 7
    21ae:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
    21b2:	36 c0       	rjmp	.+108    	; 0x2220 <_ZN6IRrecv9decodeRC6Ev+0x114>
    /*
     * Check toggle bit which has double unit length
     * Maybe we do not need to check all the timings
     */
    uint8_t tStartOffset;
    if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[9], RC6_UNIT) && MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[10], 2 * RC6_UNIT)) {
    21b4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21b6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21b8:	6c eb       	ldi	r22, 0xBC	; 188
    21ba:	71 e0       	ldi	r23, 0x01	; 1
    21bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    21be:	93 8d       	ldd	r25, Z+27	; 0x1b
    21c0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    21c4:	88 23       	and	r24, r24
    21c6:	71 f1       	breq	.+92     	; 0x2224 <_ZN6IRrecv9decodeRC6Ev+0x118>
    21c8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21ca:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21cc:	68 e7       	ldi	r22, 0x78	; 120
    21ce:	73 e0       	ldi	r23, 0x03	; 3
    21d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    21d2:	95 8d       	ldd	r25, Z+29	; 0x1d
    21d4:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    21d8:	88 23       	and	r24, r24
    21da:	21 f1       	breq	.+72     	; 0x2224 <_ZN6IRrecv9decodeRC6Ev+0x118>
        // toggle = 0
        if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[11], 2 * RC6_UNIT)) {
    21dc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21de:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21e0:	68 e7       	ldi	r22, 0x78	; 120
    21e2:	73 e0       	ldi	r23, 0x03	; 3
    21e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    21e6:	97 8d       	ldd	r25, Z+31	; 0x1f
    21e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    21ec:	81 11       	cpse	r24, r1
    21ee:	34 c0       	rjmp	.+104    	; 0x2258 <_ZN6IRrecv9decodeRC6Ev+0x14c>
            // Address MSB is 0
            tStartOffset = 13;
        } else if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[11], 3 * RC6_UNIT)) {
    21f0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21f2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21f4:	64 e3       	ldi	r22, 0x34	; 52
    21f6:	75 e0       	ldi	r23, 0x05	; 5
    21f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    21fa:	97 8d       	ldd	r25, Z+31	; 0x1f
    21fc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    2200:	18 2f       	mov	r17, r24
    2202:	81 11       	cpse	r24, r1
    2204:	27 c0       	rjmp	.+78     	; 0x2254 <_ZN6IRrecv9decodeRC6Ev+0x148>
            // Address MSB is 1
            tStartOffset = 12;
        } else {
            DBG_PRINT(F("RC6: "));
    2206:	60 ef       	ldi	r22, 0xF0	; 240
    2208:	72 e0       	ldi	r23, 0x02	; 2
    220a:	83 e2       	ldi	r24, 0x23	; 35
    220c:	97 e0       	ldi	r25, 0x07	; 7
    220e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
            DBG_PRINTLN(F("Toggle mark or space length is wrong"));
    2212:	6b ec       	ldi	r22, 0xCB	; 203
    2214:	72 e0       	ldi	r23, 0x02	; 2
    /*
     * Get address and command
     */
    if (!decodeBiPhaseData(RC6_ADDRESS_BITS + RC6_COMMAND_BITS, tStartOffset, 0, RC6_UNIT)) {
        DBG_PRINT(F("RC6: "));
        DBG_PRINTLN(F("Decode failed"));
    2216:	83 e2       	ldi	r24, 0x23	; 35
    2218:	97 e0       	ldi	r25, 0x07	; 7
    221a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    221e:	67 c0       	rjmp	.+206    	; 0x22ee <_ZN6IRrecv9decodeRC6Ev+0x1e2>
    }

    // Check header "mark" and "space", this must be done for repeat and data
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], RC6_HEADER_MARK) || !MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], RC6_HEADER_SPACE)) {
        // no debug output, since this check is mainly to determine the received protocol
        return false;
    2220:	10 e0       	ldi	r17, 0x00	; 0
    2222:	65 c0       	rjmp	.+202    	; 0x22ee <_ZN6IRrecv9decodeRC6Ev+0x1e2>
        } else {
            DBG_PRINT(F("RC6: "));
            DBG_PRINTLN(F("Toggle mark or space length is wrong"));
            return false;
        }
    } else if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[9], 3 * RC6_UNIT)) {
    2224:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2226:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2228:	64 e3       	ldi	r22, 0x34	; 52
    222a:	75 e0       	ldi	r23, 0x05	; 5
    222c:	82 8d       	ldd	r24, Z+26	; 0x1a
    222e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2230:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    2234:	18 2f       	mov	r17, r24
    2236:	88 23       	and	r24, r24
    2238:	09 f4       	brne	.+2      	; 0x223c <_ZN6IRrecv9decodeRC6Ev+0x130>
    223a:	4e c0       	rjmp	.+156    	; 0x22d8 <_ZN6IRrecv9decodeRC6Ev+0x1cc>
        // Toggle = 1
        decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK;
    223c:	88 e0       	ldi	r24, 0x08	; 8
    223e:	8e 8b       	std	Y+22, r24	; 0x16
        if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[10], 2 * RC6_UNIT)) {
    2240:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2242:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2244:	68 e7       	ldi	r22, 0x78	; 120
    2246:	73 e0       	ldi	r23, 0x03	; 3
    2248:	84 8d       	ldd	r24, Z+28	; 0x1c
    224a:	95 8d       	ldd	r25, Z+29	; 0x1d
    224c:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    2250:	88 23       	and	r24, r24
    2252:	71 f1       	breq	.+92     	; 0x22b0 <_ZN6IRrecv9decodeRC6Ev+0x1a4>
        if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[11], 2 * RC6_UNIT)) {
            // Address MSB is 0
            tStartOffset = 13;
        } else if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[11], 3 * RC6_UNIT)) {
            // Address MSB is 1
            tStartOffset = 12;
    2254:	4c e0       	ldi	r20, 0x0C	; 12
    2256:	01 c0       	rjmp	.+2      	; 0x225a <_ZN6IRrecv9decodeRC6Ev+0x14e>
    uint8_t tStartOffset;
    if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[9], RC6_UNIT) && MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[10], 2 * RC6_UNIT)) {
        // toggle = 0
        if (MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[11], 2 * RC6_UNIT)) {
            // Address MSB is 0
            tStartOffset = 13;
    2258:	4d e0       	ldi	r20, 0x0D	; 13
    }

    /*
     * Get address and command
     */
    if (!decodeBiPhaseData(RC6_ADDRESS_BITS + RC6_COMMAND_BITS, tStartOffset, 0, RC6_UNIT)) {
    225a:	0c eb       	ldi	r16, 0xBC	; 188
    225c:	11 e0       	ldi	r17, 0x01	; 1
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	60 e1       	ldi	r22, 0x10	; 16
    2262:	ce 01       	movw	r24, r28
    2264:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN6IRrecv17decodeBiPhaseDataEhhhj>
    2268:	18 2f       	mov	r17, r24
    226a:	81 11       	cpse	r24, r1
    226c:	09 c0       	rjmp	.+18     	; 0x2280 <_ZN6IRrecv9decodeRC6Ev+0x174>
        DBG_PRINT(F("RC6: "));
    226e:	6f e6       	ldi	r22, 0x6F	; 111
    2270:	72 e0       	ldi	r23, 0x02	; 2
    2272:	83 e2       	ldi	r24, 0x23	; 35
    2274:	97 e0       	ldi	r25, 0x07	; 7
    2276:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Decode failed"));
    227a:	61 e6       	ldi	r22, 0x61	; 97
    227c:	72 e0       	ldi	r23, 0x02	; 2
    227e:	cb cf       	rjmp	.-106    	; 0x2216 <_ZN6IRrecv9decodeRC6Ev+0x10a>
        return false;
    }

    // Success
    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    2280:	80 e8       	ldi	r24, 0x80	; 128
    2282:	8e 8b       	std	Y+22, r24	; 0x16
    LongUnion tValue;
    tValue.ULong = decodedIRData.decodedRawData;
    2284:	2f 89       	ldd	r18, Y+23	; 0x17
    2286:	88 8d       	ldd	r24, Y+24	; 0x18
    decodedIRData.command = tValue.UByte.LowByte;
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	3a 8b       	std	Y+18, r19	; 0x12
    228c:	29 8b       	std	Y+17, r18	; 0x11
    decodedIRData.address = tValue.UByte.MidLowByte;
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	98 8b       	std	Y+16, r25	; 0x10
    2292:	8f 87       	std	Y+15, r24	; 0x0f

    // check for repeat, do not check toggle bit yet
    if (decodedIRData.rawDataPtr->rawbuf[0] < ((RC6_REPEAT_SPACE + (RC6_REPEAT_SPACE / 2)) / MICROS_PER_TICK)) {
    2294:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2296:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2298:	80 85       	ldd	r24, Z+8	; 0x08
    229a:	91 85       	ldd	r25, Z+9	; 0x09
    229c:	8a 38       	cpi	r24, 0x8A	; 138
    229e:	9c 40       	sbci	r25, 0x0C	; 12
    22a0:	10 f4       	brcc	.+4      	; 0x22a6 <_ZN6IRrecv9decodeRC6Ev+0x19a>
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_MSB_FIRST;
    22a2:	81 e8       	ldi	r24, 0x81	; 129
    22a4:	8e 8b       	std	Y+22, r24	; 0x16
    }

    decodedIRData.protocol = RC6;
    22a6:	8d e0       	ldi	r24, 0x0D	; 13
    22a8:	8e 87       	std	Y+14, r24	; 0x0e
    decodedIRData.numberOfBits = RC6_ADDRESS_BITS + RC6_COMMAND_BITS;
    22aa:	80 e1       	ldi	r24, 0x10	; 16
    22ac:	8d 8b       	std	Y+21, r24	; 0x15

    return true;
    22ae:	1f c0       	rjmp	.+62     	; 0x22ee <_ZN6IRrecv9decodeRC6Ev+0x1e2>
        // Toggle = 1
        decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK;
        if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[10], 2 * RC6_UNIT)) {
            // Address MSB is 1
            tStartOffset = 12;
        } else if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[10], 3 * RC6_UNIT)) {
    22b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    22b2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    22b4:	64 e3       	ldi	r22, 0x34	; 52
    22b6:	75 e0       	ldi	r23, 0x05	; 5
    22b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    22ba:	95 8d       	ldd	r25, Z+29	; 0x1d
    22bc:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    22c0:	18 2f       	mov	r17, r24
    22c2:	81 11       	cpse	r24, r1
    22c4:	12 c0       	rjmp	.+36     	; 0x22ea <_ZN6IRrecv9decodeRC6Ev+0x1de>
            // Address MSB is 0
            tStartOffset = 11;
        } else {
            DBG_PRINT(F("RC6: "));
    22c6:	65 ec       	ldi	r22, 0xC5	; 197
    22c8:	72 e0       	ldi	r23, 0x02	; 2
    22ca:	83 e2       	ldi	r24, 0x23	; 35
    22cc:	97 e0       	ldi	r25, 0x07	; 7
    22ce:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
            DBG_PRINTLN(F("Toggle mark or space length is wrong"));
    22d2:	60 ea       	ldi	r22, 0xA0	; 160
    22d4:	72 e0       	ldi	r23, 0x02	; 2
    22d6:	9f cf       	rjmp	.-194    	; 0x2216 <_ZN6IRrecv9decodeRC6Ev+0x10a>
            return false;
        }
    } else {
        DBG_PRINT(F("RC6: "));
    22d8:	6a e9       	ldi	r22, 0x9A	; 154
    22da:	72 e0       	ldi	r23, 0x02	; 2
    22dc:	83 e2       	ldi	r24, 0x23	; 35
    22de:	97 e0       	ldi	r25, 0x07	; 7
    22e0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Toggle mark or space length is wrong"));
    22e4:	65 e7       	ldi	r22, 0x75	; 117
    22e6:	72 e0       	ldi	r23, 0x02	; 2
    22e8:	96 cf       	rjmp	.-212    	; 0x2216 <_ZN6IRrecv9decodeRC6Ev+0x10a>
        if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[10], 2 * RC6_UNIT)) {
            // Address MSB is 1
            tStartOffset = 12;
        } else if (MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[10], 3 * RC6_UNIT)) {
            // Address MSB is 0
            tStartOffset = 11;
    22ea:	4b e0       	ldi	r20, 0x0B	; 11
    22ec:	b6 cf       	rjmp	.-148    	; 0x225a <_ZN6IRrecv9decodeRC6Ev+0x14e>

    decodedIRData.protocol = RC6;
    decodedIRData.numberOfBits = RC6_ADDRESS_BITS + RC6_COMMAND_BITS;

    return true;
}
    22ee:	81 2f       	mov	r24, r17
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret

000022fa <_ZN6IRrecv13decodeSamsungEv>:
        sendSamsungRepeat();
    }
}

//+=============================================================================
bool IRrecv::decodeSamsung() {
    22fa:	cf 92       	push	r12
    22fc:	df 92       	push	r13
    22fe:	ef 92       	push	r14
    2300:	ff 92       	push	r15
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29

    // Check we have enough data (68). The +4 is for initial gap, start bit mark and space + stop bit mark
    if (decodedIRData.rawDataPtr->rawlen != ((2 * SAMSUNG_BITS) + 4)
    230a:	dc 01       	movw	r26, r24
    230c:	5b 96       	adiw	r26, 0x1b	; 27
    230e:	ed 91       	ld	r30, X+
    2310:	fc 91       	ld	r31, X
    2312:	5c 97       	sbiw	r26, 0x1c	; 28
    2314:	24 81       	ldd	r18, Z+4	; 0x04
    2316:	32 2f       	mov	r19, r18
    2318:	3f 7d       	andi	r19, 0xDF	; 223
    231a:	34 34       	cpi	r19, 0x44	; 68
    231c:	11 f0       	breq	.+4      	; 0x2322 <_ZN6IRrecv13decodeSamsungEv+0x28>
            && decodedIRData.rawDataPtr->rawlen != ((2 * SAMSUNG48_BITS) + 4) && (decodedIRData.rawDataPtr->rawlen != 6)) {
    231e:	26 30       	cpi	r18, 0x06	; 6
    2320:	01 f5       	brne	.+64     	; 0x2362 <_ZN6IRrecv13decodeSamsungEv+0x68>
    2322:	ec 01       	movw	r28, r24
        return false;
    }

    // Check header "mark" + "space"
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], SAMSUNG_HEADER_MARK)
    2324:	60 e3       	ldi	r22, 0x30	; 48
    2326:	71 e1       	ldi	r23, 0x11	; 17
    2328:	82 85       	ldd	r24, Z+10	; 0x0a
    232a:	93 85       	ldd	r25, Z+11	; 0x0b
    232c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
            || !MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], SAMSUNG_HEADER_SPACE)) {
    2330:	88 23       	and	r24, r24
    2332:	59 f0       	breq	.+22     	; 0x234a <_ZN6IRrecv13decodeSamsungEv+0x50>
    2334:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2336:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2338:	60 e3       	ldi	r22, 0x30	; 48
    233a:	71 e1       	ldi	r23, 0x11	; 17
    233c:	84 85       	ldd	r24, Z+12	; 0x0c
    233e:	95 85       	ldd	r25, Z+13	; 0x0d
    2340:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    2344:	d8 2e       	mov	r13, r24
    2346:	81 11       	cpse	r24, r1
    2348:	0e c0       	rjmp	.+28     	; 0x2366 <_ZN6IRrecv13decodeSamsungEv+0x6c>
        DBG_PRINT("Samsung: ");
    234a:	6c e9       	ldi	r22, 0x9C	; 156
    234c:	75 e0       	ldi	r23, 0x05	; 5
    234e:	83 e2       	ldi	r24, 0x23	; 35
    2350:	97 e0       	ldi	r25, 0x07	; 7
    2352:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Header mark or space length is wrong");
    2356:	66 ea       	ldi	r22, 0xA6	; 166
    2358:	75 e0       	ldi	r23, 0x05	; 5
    235a:	83 e2       	ldi	r24, 0x23	; 35
    235c:	97 e0       	ldi	r25, 0x07	; 7
    235e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>

        return false;
    2362:	d1 2c       	mov	r13, r1
    2364:	6b c0       	rjmp	.+214    	; 0x243c <_ZN6IRrecv13decodeSamsungEv+0x142>
    }

    // Check for repeat
    if (decodedIRData.rawDataPtr->rawlen == 6) {
    2366:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2368:	fc 8d       	ldd	r31, Y+28	; 0x1c
    236a:	84 81       	ldd	r24, Z+4	; 0x04
    236c:	86 30       	cpi	r24, 0x06	; 6
    236e:	59 f4       	brne	.+22     	; 0x2386 <_ZN6IRrecv13decodeSamsungEv+0x8c>
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT| IRDATA_FLAGS_IS_LSB_FIRST;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	8e 8b       	std	Y+22, r24	; 0x16
        decodedIRData.address = lastDecodedAddress;
    2374:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2376:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f
        decodedIRData.command = lastDecodedCommand;
    237c:	89 a1       	ldd	r24, Y+33	; 0x21
    237e:	9a a1       	ldd	r25, Y+34	; 0x22
    2380:	9a 8b       	std	Y+18, r25	; 0x12
    2382:	89 8b       	std	Y+17, r24	; 0x11
        return true;
    2384:	5b c0       	rjmp	.+182    	; 0x243c <_ZN6IRrecv13decodeSamsungEv+0x142>
    if (decodedIRData.rawDataPtr->rawlen == (2 * SAMSUNG48_BITS) + 4) {
        /*
         * Samsung48
         */
        // decode address
        if (!decodePulseDistanceData(SAMSUNG_ADDRESS_BITS, 3, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE, false)) {
    2386:	c1 2c       	mov	r12, r1
    2388:	96 e2       	ldi	r25, 0x26	; 38
    238a:	e9 2e       	mov	r14, r25
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	f9 2e       	mov	r15, r25
    2390:	02 e7       	ldi	r16, 0x72	; 114
    2392:	16 e0       	ldi	r17, 0x06	; 6
    2394:	26 e2       	ldi	r18, 0x26	; 38
    2396:	32 e0       	ldi	r19, 0x02	; 2
    2398:	43 e0       	ldi	r20, 0x03	; 3
        decodedIRData.address = lastDecodedAddress;
        decodedIRData.command = lastDecodedCommand;
        return true;
    }

    if (decodedIRData.rawDataPtr->rawlen == (2 * SAMSUNG48_BITS) + 4) {
    239a:	84 36       	cpi	r24, 0x64	; 100
    239c:	61 f5       	brne	.+88     	; 0x23f6 <_ZN6IRrecv13decodeSamsungEv+0xfc>
        /*
         * Samsung48
         */
        // decode address
        if (!decodePulseDistanceData(SAMSUNG_ADDRESS_BITS, 3, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE, false)) {
    239e:	60 e1       	ldi	r22, 0x10	; 16
    23a0:	ce 01       	movw	r24, r28
    23a2:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    23a6:	88 23       	and	r24, r24
    23a8:	61 f1       	breq	.+88     	; 0x2402 <_ZN6IRrecv13decodeSamsungEv+0x108>
            DBG_PRINT("Samsung: ");
            DBG_PRINTLN("Decode failed");
            return false;
        }
        decodedIRData.address = decodedIRData.decodedRawData;
    23aa:	8f 89       	ldd	r24, Y+23	; 0x17
    23ac:	98 8d       	ldd	r25, Y+24	; 0x18
    23ae:	98 8b       	std	Y+16, r25	; 0x10
    23b0:	8f 87       	std	Y+15, r24	; 0x0f

        // decode 32 bit command
        if (!decodePulseDistanceData(SAMSUNG_COMMAND32_BITS, 3, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE, false)) {
    23b2:	c1 2c       	mov	r12, r1
    23b4:	86 e2       	ldi	r24, 0x26	; 38
    23b6:	e8 2e       	mov	r14, r24
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	f8 2e       	mov	r15, r24
    23bc:	02 e7       	ldi	r16, 0x72	; 114
    23be:	16 e0       	ldi	r17, 0x06	; 6
    23c0:	26 e2       	ldi	r18, 0x26	; 38
    23c2:	32 e0       	ldi	r19, 0x02	; 2
    23c4:	43 e0       	ldi	r20, 0x03	; 3
    23c6:	60 e2       	ldi	r22, 0x20	; 32
    23c8:	ce 01       	movw	r24, r28
    23ca:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    23ce:	88 23       	and	r24, r24
    23d0:	c1 f0       	breq	.+48     	; 0x2402 <_ZN6IRrecv13decodeSamsungEv+0x108>
        }

        // Success
//    decodedIRData.flags = IRDATA_FLAGS_IS_LSB_FIRST; // Not required, since this is the start value
        LongUnion tValue;
        tValue.ULong = decodedIRData.decodedRawData;
    23d2:	9f 89       	ldd	r25, Y+23	; 0x17
    23d4:	88 8d       	ldd	r24, Y+24	; 0x18
    23d6:	29 8d       	ldd	r18, Y+25	; 0x19
    23d8:	3a 8d       	ldd	r19, Y+26	; 0x1a
        // receive 2 * (8 bits then 8 inverted bits) LSB first
        if (tValue.UByte.HighByte != (uint8_t) (~tValue.UByte.MidHighByte)
    23da:	20 95       	com	r18
    23dc:	32 17       	cp	r19, r18
    23de:	29 f0       	breq	.+10     	; 0x23ea <_ZN6IRrecv13decodeSamsungEv+0xf0>
                && tValue.UByte.MidLowByte != (uint8_t) (~tValue.UByte.LowByte)) {
    23e0:	90 95       	com	r25
    23e2:	98 17       	cp	r25, r24
    23e4:	11 f0       	breq	.+4      	; 0x23ea <_ZN6IRrecv13decodeSamsungEv+0xf0>
            decodedIRData.flags = IRDATA_FLAGS_PARITY_FAILED | IRDATA_FLAGS_IS_LSB_FIRST;
    23e6:	94 e0       	ldi	r25, 0x04	; 4
    23e8:	9e 8b       	std	Y+22, r25	; 0x16
        }
        decodedIRData.command = tValue.UByte.HighByte << 8 | tValue.UByte.MidLowByte;
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	93 2b       	or	r25, r19
    23ee:	9a 8b       	std	Y+18, r25	; 0x12
    23f0:	89 8b       	std	Y+17, r24	; 0x11
        decodedIRData.numberOfBits = SAMSUNG48_BITS;
    23f2:	80 e3       	ldi	r24, 0x30	; 48
    23f4:	20 c0       	rjmp	.+64     	; 0x2436 <_ZN6IRrecv13decodeSamsungEv+0x13c>

    } else {
        /*
         * Samsung32
         */
        if (!decodePulseDistanceData(SAMSUNG_BITS, 3, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE, false)) {
    23f6:	60 e2       	ldi	r22, 0x20	; 32
    23f8:	ce 01       	movw	r24, r28
    23fa:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    23fe:	81 11       	cpse	r24, r1
    2400:	09 c0       	rjmp	.+18     	; 0x2414 <_ZN6IRrecv13decodeSamsungEv+0x11a>
            DBG_PRINT("Samsung: ");
    2402:	6c e9       	ldi	r22, 0x9C	; 156
    2404:	75 e0       	ldi	r23, 0x05	; 5
    2406:	83 e2       	ldi	r24, 0x23	; 35
    2408:	97 e0       	ldi	r25, 0x07	; 7
    240a:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
            DBG_PRINTLN("Decode failed");
    240e:	65 e7       	ldi	r22, 0x75	; 117
    2410:	72 e0       	ldi	r23, 0x02	; 2
    2412:	a3 cf       	rjmp	.-186    	; 0x235a <_ZN6IRrecv13decodeSamsungEv+0x60>
            return false;
        }
        LongUnion tValue;
        tValue.ULong = decodedIRData.decodedRawData;
    2414:	89 8d       	ldd	r24, Y+25	; 0x19
    2416:	3a 8d       	ldd	r19, Y+26	; 0x1a
        decodedIRData.address = tValue.UWord.LowWord;
    2418:	2f 89       	ldd	r18, Y+23	; 0x17
    241a:	98 8d       	ldd	r25, Y+24	; 0x18
    241c:	2f 87       	std	Y+15, r18	; 0x0f
    241e:	98 8b       	std	Y+16, r25	; 0x10

        if (tValue.UByte.MidHighByte == (uint8_t) (~tValue.UByte.HighByte)) {
    2420:	93 2f       	mov	r25, r19
    2422:	90 95       	com	r25
    2424:	89 13       	cpse	r24, r25
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <_ZN6IRrecv13decodeSamsungEv+0x136>
            // 8 bit command protocol
            decodedIRData.command = tValue.UByte.MidHighByte; // first 8 bit
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9a 8b       	std	Y+18, r25	; 0x12
    242c:	89 8b       	std	Y+17, r24	; 0x11
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <_ZN6IRrecv13decodeSamsungEv+0x13a>
        } else {
            // 16 bit command protocol
            decodedIRData.command = tValue.UWord.HighWord; // first 16 bit
    2430:	89 8b       	std	Y+17, r24	; 0x11
    2432:	3a 8b       	std	Y+18, r19	; 0x12
        }
        decodedIRData.numberOfBits = SAMSUNG_BITS;
    2434:	80 e2       	ldi	r24, 0x20	; 32
    2436:	8d 8b       	std	Y+21, r24	; 0x15
    }

    decodedIRData.protocol = SAMSUNG;
    2438:	8e e0       	ldi	r24, 0x0E	; 14
    243a:	8e 87       	std	Y+14, r24	; 0x0e

    return true;
}
    243c:	8d 2d       	mov	r24, r13
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	08 95       	ret

00002450 <_ZN6IRrecv10decodeSonyEv>:
}

//+=============================================================================
#if !defined(USE_OLD_DECODE)

bool IRrecv::decodeSony() {
    2450:	cf 92       	push	r12
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	ec 01       	movw	r28, r24

    // Check header "mark"
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], SONY_HEADER_MARK)) {
    2460:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2462:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2464:	60 e6       	ldi	r22, 0x60	; 96
    2466:	79 e0       	ldi	r23, 0x09	; 9
    2468:	82 85       	ldd	r24, Z+10	; 0x0a
    246a:	93 85       	ldd	r25, Z+11	; 0x0b
    246c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    2470:	18 2f       	mov	r17, r24
    2472:	88 23       	and	r24, r24
    2474:	09 f4       	brne	.+2      	; 0x2478 <_ZN6IRrecv10decodeSonyEv+0x28>
    2476:	6d c0       	rjmp	.+218    	; 0x2552 <_ZN6IRrecv10decodeSonyEv+0x102>
        return false;
    }

    // Check we have enough data. +2 for initial gap and start bit mark and space minus the last/MSB space. NO stop bit!
    if (decodedIRData.rawDataPtr->rawlen != (2 * SONY_BITS_MIN) + 2 && decodedIRData.rawDataPtr->rawlen != (2 * SONY_BITS_MAX) + 2
    2478:	eb 8d       	ldd	r30, Y+27	; 0x1b
    247a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    247c:	84 81       	ldd	r24, Z+4	; 0x04
    247e:	8a 31       	cpi	r24, 0x1A	; 26
    2480:	29 f0       	breq	.+10     	; 0x248c <_ZN6IRrecv10decodeSonyEv+0x3c>
    2482:	8a 32       	cpi	r24, 0x2A	; 42
    2484:	19 f0       	breq	.+6      	; 0x248c <_ZN6IRrecv10decodeSonyEv+0x3c>
            && decodedIRData.rawDataPtr->rawlen != (2 * SONY_BITS_15) + 2) {
    2486:	80 32       	cpi	r24, 0x20	; 32
    2488:	09 f0       	breq	.+2      	; 0x248c <_ZN6IRrecv10decodeSonyEv+0x3c>
    248a:	62 c0       	rjmp	.+196    	; 0x2550 <_ZN6IRrecv10decodeSonyEv+0x100>
        TRACE_PRINT(decodedIRData.rawDataPtr->rawlen);
        TRACE_PRINTLN(" is not 12, 15 or 20");
        return false;
    }
    // Check header "space"
    if (!MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], SONY_SPACE)) {
    248c:	68 e5       	ldi	r22, 0x58	; 88
    248e:	72 e0       	ldi	r23, 0x02	; 2
    2490:	84 85       	ldd	r24, Z+12	; 0x0c
    2492:	95 85       	ldd	r25, Z+13	; 0x0d
    2494:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    2498:	18 2f       	mov	r17, r24
    249a:	81 11       	cpse	r24, r1
    249c:	09 c0       	rjmp	.+18     	; 0x24b0 <_ZN6IRrecv10decodeSonyEv+0x60>
        DBG_PRINT("Sony: ");
    249e:	6b ec       	ldi	r22, 0xCB	; 203
    24a0:	75 e0       	ldi	r23, 0x05	; 5
    24a2:	83 e2       	ldi	r24, 0x23	; 35
    24a4:	97 e0       	ldi	r25, 0x07	; 7
    24a6:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Header space length is wrong");
    24aa:	68 e5       	ldi	r22, 0x58	; 88
    24ac:	72 e0       	ldi	r23, 0x02	; 2
    24ae:	23 c0       	rjmp	.+70     	; 0x24f6 <_ZN6IRrecv10decodeSonyEv+0xa6>
        return false;
    }

    if (!decodePulseWidthData((decodedIRData.rawDataPtr->rawlen - 1) / 2, 3, SONY_ONE_MARK, SONY_ZERO_MARK, SONY_SPACE, false)) {
    24b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    24b2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    24b4:	84 81       	ldd	r24, Z+4	; 0x04
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	bc 01       	movw	r22, r24
    24ba:	61 50       	subi	r22, 0x01	; 1
    24bc:	71 09       	sbc	r23, r1
    24be:	77 fd       	sbrc	r23, 7
    24c0:	bc 01       	movw	r22, r24
    24c2:	75 95       	asr	r23
    24c4:	67 95       	ror	r22
    24c6:	c1 2c       	mov	r12, r1
    24c8:	58 e5       	ldi	r21, 0x58	; 88
    24ca:	e5 2e       	mov	r14, r21
    24cc:	52 e0       	ldi	r21, 0x02	; 2
    24ce:	f5 2e       	mov	r15, r21
    24d0:	08 e5       	ldi	r16, 0x58	; 88
    24d2:	12 e0       	ldi	r17, 0x02	; 2
    24d4:	20 eb       	ldi	r18, 0xB0	; 176
    24d6:	34 e0       	ldi	r19, 0x04	; 4
    24d8:	43 e0       	ldi	r20, 0x03	; 3
    24da:	ce 01       	movw	r24, r28
    24dc:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb>
    24e0:	18 2f       	mov	r17, r24
    24e2:	81 11       	cpse	r24, r1
    24e4:	0d c0       	rjmp	.+26     	; 0x2500 <_ZN6IRrecv10decodeSonyEv+0xb0>
        DBG_PRINT("Sony: ");
    24e6:	6b ec       	ldi	r22, 0xCB	; 203
    24e8:	75 e0       	ldi	r23, 0x05	; 5
    24ea:	83 e2       	ldi	r24, 0x23	; 35
    24ec:	97 e0       	ldi	r25, 0x07	; 7
    24ee:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN5Print5printEPKc>
        DBG_PRINTLN("Decode failed");
    24f2:	65 e7       	ldi	r22, 0x75	; 117
    24f4:	72 e0       	ldi	r23, 0x02	; 2
    24f6:	83 e2       	ldi	r24, 0x23	; 35
    24f8:	97 e0       	ldi	r25, 0x07	; 7
    24fa:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN5Print7printlnEPKc>
        return false;
    24fe:	29 c0       	rjmp	.+82     	; 0x2552 <_ZN6IRrecv10decodeSonyEv+0x102>
    }

    // Success
//    decodedIRData.flags = IRDATA_FLAGS_IS_LSB_FIRST; // Not required, since this is the start value
    uint8_t tCommand = decodedIRData.decodedRawData & 0x7F;  // first 7 bits
    2500:	8f 89       	ldd	r24, Y+23	; 0x17
    2502:	98 8d       	ldd	r25, Y+24	; 0x18
    2504:	a9 8d       	ldd	r26, Y+25	; 0x19
    2506:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2508:	28 2f       	mov	r18, r24
    250a:	2f 77       	andi	r18, 0x7F	; 127
    uint8_t tAddress = decodedIRData.decodedRawData >> 7;    // next 5 or 8 bits
    250c:	37 e0       	ldi	r19, 0x07	; 7
    250e:	b6 95       	lsr	r27
    2510:	a7 95       	ror	r26
    2512:	97 95       	ror	r25
    2514:	87 95       	ror	r24
    2516:	3a 95       	dec	r19
    2518:	d1 f7       	brne	.-12     	; 0x250e <_ZN6IRrecv10decodeSonyEv+0xbe>

    /*
     *  Check for repeat
     */
    if (decodedIRData.rawDataPtr->rawbuf[0] < (SONY_REPEAT_PERIOD / MICROS_PER_TICK)) {
    251a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    251c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    251e:	40 85       	ldd	r20, Z+8	; 0x08
    2520:	51 85       	ldd	r21, Z+9	; 0x09
    2522:	44 38       	cpi	r20, 0x84	; 132
    2524:	53 40       	sbci	r21, 0x03	; 3
    2526:	10 f4       	brcc	.+4      	; 0x252c <_ZN6IRrecv10decodeSonyEv+0xdc>
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT | IRDATA_FLAGS_IS_LSB_FIRST;
    2528:	31 e0       	ldi	r19, 0x01	; 1
    252a:	3e 8b       	std	Y+22, r19	; 0x16
    }
    decodedIRData.command = tCommand;
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	3a 8b       	std	Y+18, r19	; 0x12
    2530:	29 8b       	std	Y+17, r18	; 0x11
    decodedIRData.address = tAddress;
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	98 8b       	std	Y+16, r25	; 0x10
    2536:	8f 87       	std	Y+15, r24	; 0x0f
    decodedIRData.numberOfBits = (decodedIRData.rawDataPtr->rawlen - 1) / 2;
    2538:	24 81       	ldd	r18, Z+4	; 0x04
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	c9 01       	movw	r24, r18
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	97 fd       	sbrc	r25, 7
    2542:	c9 01       	movw	r24, r18
    2544:	95 95       	asr	r25
    2546:	87 95       	ror	r24
    2548:	8d 8b       	std	Y+21, r24	; 0x15
    decodedIRData.protocol = SONY;
    254a:	80 e1       	ldi	r24, 0x10	; 16
    254c:	8e 87       	std	Y+14, r24	; 0x0e

    return true;
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <_ZN6IRrecv10decodeSonyEv+0x102>

bool IRrecv::decodeSony() {

    // Check header "mark"
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], SONY_HEADER_MARK)) {
        return false;
    2550:	10 e0       	ldi	r17, 0x00	; 0
    decodedIRData.address = tAddress;
    decodedIRData.numberOfBits = (decodedIRData.rawDataPtr->rawlen - 1) / 2;
    decodedIRData.protocol = SONY;

    return true;
}
    2552:	81 2f       	mov	r24, r17
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	ff 90       	pop	r15
    255e:	ef 90       	pop	r14
    2560:	cf 90       	pop	r12
    2562:	08 95       	ret

00002564 <_ZN6IRrecv13decodeWhynterEv>:

    interrupts();
}

//+=============================================================================
bool IRrecv::decodeWhynter() {
    2564:	cf 92       	push	r12
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29

    // Check we have the right amount of data (68). The +4 is for initial gap, start bit mark and space + stop bit mark.
    if (decodedIRData.rawDataPtr->rawlen != (2 * WHYNTER_BITS) + 4) {
    2572:	dc 01       	movw	r26, r24
    2574:	5b 96       	adiw	r26, 0x1b	; 27
    2576:	ed 91       	ld	r30, X+
    2578:	fc 91       	ld	r31, X
    257a:	5c 97       	sbiw	r26, 0x1c	; 28
    257c:	24 81       	ldd	r18, Z+4	; 0x04
    257e:	24 34       	cpi	r18, 0x44	; 68
    2580:	f9 f4       	brne	.+62     	; 0x25c0 <_ZN6IRrecv13decodeWhynterEv+0x5c>
    2582:	ec 01       	movw	r28, r24
        return false;
    }

    // Sequence begins with a bit mark and a zero space
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[1], WHYNTER_BIT_MARK)
    2584:	6e ee       	ldi	r22, 0xEE	; 238
    2586:	72 e0       	ldi	r23, 0x02	; 2
    2588:	82 85       	ldd	r24, Z+10	; 0x0a
    258a:	93 85       	ldd	r25, Z+11	; 0x0b
    258c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
            || !MATCH_SPACE(decodedIRData.rawDataPtr->rawbuf[2], WHYNTER_HEADER_SPACE)) {
    2590:	88 23       	and	r24, r24
    2592:	51 f0       	breq	.+20     	; 0x25a8 <_ZN6IRrecv13decodeWhynterEv+0x44>
    2594:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2596:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2598:	62 e2       	ldi	r22, 0x22	; 34
    259a:	7b e0       	ldi	r23, 0x0B	; 11
    259c:	84 85       	ldd	r24, Z+12	; 0x0c
    259e:	95 85       	ldd	r25, Z+13	; 0x0d
    25a0:	0e 94 8b 03 	call	0x716	; 0x716 <_Z11MATCH_SPACEjj>
    25a4:	81 11       	cpse	r24, r1
    25a6:	0e c0       	rjmp	.+28     	; 0x25c4 <_ZN6IRrecv13decodeWhynterEv+0x60>
        DBG_PRINT(F("Whynter: "));
    25a8:	68 e8       	ldi	r22, 0x88	; 136
    25aa:	73 e0       	ldi	r23, 0x03	; 3
    25ac:	83 e2       	ldi	r24, 0x23	; 35
    25ae:	97 e0       	ldi	r25, 0x07	; 7
    25b0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
        DBG_PRINTLN(F("Header mark or space length is wrong"));
    25b4:	63 e6       	ldi	r22, 0x63	; 99
    25b6:	73 e0       	ldi	r23, 0x03	; 3
    25b8:	83 e2       	ldi	r24, 0x23	; 35
    25ba:	97 e0       	ldi	r25, 0x07	; 7
    25bc:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	2b c0       	rjmp	.+86     	; 0x261a <_ZN6IRrecv13decodeWhynterEv+0xb6>
    }

    if (!decodePulseDistanceData(WHYNTER_BITS, 3, WHYNTER_BIT_MARK, WHYNTER_ONE_SPACE, WHYNTER_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    25c4:	cc 24       	eor	r12, r12
    25c6:	c3 94       	inc	r12
    25c8:	8e ee       	ldi	r24, 0xEE	; 238
    25ca:	e8 2e       	mov	r14, r24
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	f8 2e       	mov	r15, r24
    25d0:	06 e6       	ldi	r16, 0x66	; 102
    25d2:	18 e0       	ldi	r17, 0x08	; 8
    25d4:	2e ee       	ldi	r18, 0xEE	; 238
    25d6:	32 e0       	ldi	r19, 0x02	; 2
    25d8:	43 e0       	ldi	r20, 0x03	; 3
    25da:	60 e2       	ldi	r22, 0x20	; 32
    25dc:	ce 01       	movw	r24, r28
    25de:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    25e2:	88 23       	and	r24, r24
    25e4:	69 f3       	breq	.-38     	; 0x25c0 <_ZN6IRrecv13decodeWhynterEv+0x5c>
        return false;
    }

    // trailing mark / stop bit
    if (!MATCH_MARK(decodedIRData.rawDataPtr->rawbuf[3 + (2 * WHYNTER_BITS)], WHYNTER_BIT_MARK)) {
    25e6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    25e8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    25ea:	e2 57       	subi	r30, 0x72	; 114
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	6e ee       	ldi	r22, 0xEE	; 238
    25f0:	72 e0       	ldi	r23, 0x02	; 2
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z10MATCH_MARKjj>
    25fa:	18 2f       	mov	r17, r24
    25fc:	81 11       	cpse	r24, r1
    25fe:	07 c0       	rjmp	.+14     	; 0x260e <_ZN6IRrecv13decodeWhynterEv+0xaa>
        DBG_PRINTLN(F("Stop bit mark length is wrong"));
    2600:	65 e4       	ldi	r22, 0x45	; 69
    2602:	73 e0       	ldi	r23, 0x03	; 3
    2604:	83 e2       	ldi	r24, 0x23	; 35
    2606:	97 e0       	ldi	r25, 0x07	; 7
    2608:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false;
    260c:	06 c0       	rjmp	.+12     	; 0x261a <_ZN6IRrecv13decodeWhynterEv+0xb6>
    }

    // Success
    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    260e:	80 e8       	ldi	r24, 0x80	; 128
    2610:	8e 8b       	std	Y+22, r24	; 0x16
    decodedIRData.numberOfBits = WHYNTER_BITS;
    2612:	80 e2       	ldi	r24, 0x20	; 32
    2614:	8d 8b       	std	Y+21, r24	; 0x15
    decodedIRData.protocol = WHYNTER;
    2616:	85 e1       	ldi	r24, 0x15	; 21
    2618:	8e 87       	std	Y+14, r24	; 0x0e
    return true;
}
    261a:	81 2f       	mov	r24, r17
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	ff 90       	pop	r15
    2626:	ef 90       	pop	r14
    2628:	cf 90       	pop	r12
    262a:	08 95       	ret

0000262c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	08 95       	ret

00002632 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2632:	08 95       	ret

00002634 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	ec 01       	movw	r28, r24
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	8e 81       	ldd	r24, Y+6	; 0x06
    263e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	8e 81       	ldd	r24, Y+6	; 0x06
    264e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    2662:	84 e6       	ldi	r24, 0x64	; 100
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <delayMicroseconds>

0000266e <_ZN13LiquidCrystal10write4bitsEh>:
    266e:	cf 92       	push	r12
    2670:	df 92       	push	r13
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	6c 01       	movw	r12, r24
    2680:	7c 01       	movw	r14, r24
    2682:	87 e0       	ldi	r24, 0x07	; 7
    2684:	e8 0e       	add	r14, r24
    2686:	f1 1c       	adc	r15, r1
    2688:	c0 e0       	ldi	r28, 0x00	; 0
    268a:	d0 e0       	ldi	r29, 0x00	; 0
    268c:	06 2f       	mov	r16, r22
    268e:	10 e0       	ldi	r17, 0x00	; 0
    2690:	b8 01       	movw	r22, r16
    2692:	0c 2e       	mov	r0, r28
    2694:	02 c0       	rjmp	.+4      	; 0x269a <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    2696:	75 95       	asr	r23
    2698:	67 95       	ror	r22
    269a:	0a 94       	dec	r0
    269c:	e2 f7       	brpl	.-8      	; 0x2696 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    269e:	61 70       	andi	r22, 0x01	; 1
    26a0:	f7 01       	movw	r30, r14
    26a2:	81 91       	ld	r24, Z+
    26a4:	7f 01       	movw	r14, r30
    26a6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    26aa:	21 96       	adiw	r28, 0x01	; 1
    26ac:	c4 30       	cpi	r28, 0x04	; 4
    26ae:	d1 05       	cpc	r29, r1
    26b0:	79 f7       	brne	.-34     	; 0x2690 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    26b2:	c6 01       	movw	r24, r12
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <_ZN13LiquidCrystal11pulseEnableEv>

000026c8 <_ZN13LiquidCrystal10write8bitsEh>:
    26c8:	cf 92       	push	r12
    26ca:	df 92       	push	r13
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	6c 01       	movw	r12, r24
    26da:	7c 01       	movw	r14, r24
    26dc:	87 e0       	ldi	r24, 0x07	; 7
    26de:	e8 0e       	add	r14, r24
    26e0:	f1 1c       	adc	r15, r1
    26e2:	c0 e0       	ldi	r28, 0x00	; 0
    26e4:	d0 e0       	ldi	r29, 0x00	; 0
    26e6:	06 2f       	mov	r16, r22
    26e8:	10 e0       	ldi	r17, 0x00	; 0
    26ea:	b8 01       	movw	r22, r16
    26ec:	0c 2e       	mov	r0, r28
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    26f0:	75 95       	asr	r23
    26f2:	67 95       	ror	r22
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    26f8:	61 70       	andi	r22, 0x01	; 1
    26fa:	f7 01       	movw	r30, r14
    26fc:	81 91       	ld	r24, Z+
    26fe:	7f 01       	movw	r14, r30
    2700:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    2704:	21 96       	adiw	r28, 0x01	; 1
    2706:	c8 30       	cpi	r28, 0x08	; 8
    2708:	d1 05       	cpc	r29, r1
    270a:	79 f7       	brne	.-34     	; 0x26ea <_ZN13LiquidCrystal10write8bitsEh+0x22>
    270c:	c6 01       	movw	r24, r12
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <_ZN13LiquidCrystal11pulseEnableEv>

00002722 <_ZN13LiquidCrystal4sendEhh>:
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	ec 01       	movw	r28, r24
    272a:	16 2f       	mov	r17, r22
    272c:	64 2f       	mov	r22, r20
    272e:	8c 81       	ldd	r24, Y+4	; 0x04
    2730:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	8f 3f       	cpi	r24, 0xFF	; 255
    2738:	19 f0       	breq	.+6      	; 0x2740 <_ZN13LiquidCrystal4sendEhh+0x1e>
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    2740:	8f 85       	ldd	r24, Y+15	; 0x0f
    2742:	61 2f       	mov	r22, r17
    2744:	84 ff       	sbrs	r24, 4
    2746:	06 c0       	rjmp	.+12     	; 0x2754 <_ZN13LiquidCrystal4sendEhh+0x32>
    2748:	ce 01       	movw	r24, r28
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <_ZN13LiquidCrystal10write8bitsEh>
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	84 e0       	ldi	r24, 0x04	; 4
    2758:	75 95       	asr	r23
    275a:	67 95       	ror	r22
    275c:	8a 95       	dec	r24
    275e:	e1 f7       	brne	.-8      	; 0x2758 <_ZN13LiquidCrystal4sendEhh+0x36>
    2760:	ce 01       	movw	r24, r28
    2762:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN13LiquidCrystal10write4bitsEh>
    2766:	61 2f       	mov	r22, r17
    2768:	ce 01       	movw	r24, r28
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0c 94 37 13 	jmp	0x266e	; 0x266e <_ZN13LiquidCrystal10write4bitsEh>

00002774 <_ZN13LiquidCrystal7commandEh>:
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	0c 94 91 13 	jmp	0x2722	; 0x2722 <_ZN13LiquidCrystal4sendEhh>

0000277a <_ZN13LiquidCrystal5clearEv>:
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	0e 94 ba 13 	call	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>
    2780:	80 ed       	ldi	r24, 0xD0	; 208
    2782:	97 e0       	ldi	r25, 0x07	; 7
    2784:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <delayMicroseconds>

00002788 <_ZN13LiquidCrystal9setCursorEhh>:
    2788:	fc 01       	movw	r30, r24
    278a:	44 30       	cpi	r20, 0x04	; 4
    278c:	08 f0       	brcs	.+2      	; 0x2790 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    278e:	43 e0       	ldi	r20, 0x03	; 3
    2790:	83 89       	ldd	r24, Z+19	; 0x13
    2792:	48 17       	cp	r20, r24
    2794:	10 f0       	brcs	.+4      	; 0x279a <_ZN13LiquidCrystal9setCursorEhh+0x12>
    2796:	4f ef       	ldi	r20, 0xFF	; 255
    2798:	48 0f       	add	r20, r24
    279a:	df 01       	movw	r26, r30
    279c:	a4 0f       	add	r26, r20
    279e:	b1 1d       	adc	r27, r1
    27a0:	54 96       	adiw	r26, 0x14	; 20
    27a2:	9c 91       	ld	r25, X
    27a4:	69 0f       	add	r22, r25
    27a6:	60 68       	ori	r22, 0x80	; 128
    27a8:	cf 01       	movw	r24, r30
    27aa:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>

000027ae <_ZN13LiquidCrystal7displayEv>:
    27ae:	fc 01       	movw	r30, r24
    27b0:	60 89       	ldd	r22, Z+16	; 0x10
    27b2:	26 2f       	mov	r18, r22
    27b4:	24 60       	ori	r18, 0x04	; 4
    27b6:	20 8b       	std	Z+16, r18	; 0x10
    27b8:	6c 60       	ori	r22, 0x0C	; 12
    27ba:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>

000027be <_ZN13LiquidCrystal5beginEhhh>:
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	ec 01       	movw	r28, r24
    27cc:	42 30       	cpi	r20, 0x02	; 2
    27ce:	18 f0       	brcs	.+6      	; 0x27d6 <_ZN13LiquidCrystal5beginEhhh+0x18>
    27d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d2:	88 60       	ori	r24, 0x08	; 8
    27d4:	8f 87       	std	Y+15, r24	; 0x0f
    27d6:	4b 8b       	std	Y+19, r20	; 0x13
    27d8:	1c 8a       	std	Y+20, r1	; 0x14
    27da:	80 e4       	ldi	r24, 0x40	; 64
    27dc:	8d 8b       	std	Y+21, r24	; 0x15
    27de:	6e 8b       	std	Y+22, r22	; 0x16
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	60 5c       	subi	r22, 0xC0	; 192
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	6f 8b       	std	Y+23, r22	; 0x17
    27e8:	22 23       	and	r18, r18
    27ea:	29 f0       	breq	.+10     	; 0x27f6 <_ZN13LiquidCrystal5beginEhhh+0x38>
    27ec:	41 30       	cpi	r20, 0x01	; 1
    27ee:	19 f4       	brne	.+6      	; 0x27f6 <_ZN13LiquidCrystal5beginEhhh+0x38>
    27f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f2:	84 60       	ori	r24, 0x04	; 4
    27f4:	8f 87       	std	Y+15, r24	; 0x0f
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	8c 81       	ldd	r24, Y+4	; 0x04
    27fa:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <pinMode>
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	8f 3f       	cpi	r24, 0xFF	; 255
    2802:	19 f0       	breq	.+6      	; 0x280a <_ZN13LiquidCrystal5beginEhhh+0x4c>
    2804:	61 e0       	ldi	r22, 0x01	; 1
    2806:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <pinMode>
    280a:	61 e0       	ldi	r22, 0x01	; 1
    280c:	8e 81       	ldd	r24, Y+6	; 0x06
    280e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <pinMode>
    2812:	7e 01       	movw	r14, r28
    2814:	87 e0       	ldi	r24, 0x07	; 7
    2816:	e8 0e       	add	r14, r24
    2818:	f1 1c       	adc	r15, r1
    281a:	00 e0       	ldi	r16, 0x00	; 0
    281c:	10 e0       	ldi	r17, 0x00	; 0
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	84 fd       	sbrc	r24, 4
    2822:	03 c0       	rjmp	.+6      	; 0x282a <_ZN13LiquidCrystal5beginEhhh+0x6c>
    2824:	84 e0       	ldi	r24, 0x04	; 4
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	02 c0       	rjmp	.+4      	; 0x282e <_ZN13LiquidCrystal5beginEhhh+0x70>
    282a:	88 e0       	ldi	r24, 0x08	; 8
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	08 17       	cp	r16, r24
    2830:	19 07       	cpc	r17, r25
    2832:	4c f4       	brge	.+18     	; 0x2846 <_ZN13LiquidCrystal5beginEhhh+0x88>
    2834:	61 e0       	ldi	r22, 0x01	; 1
    2836:	f7 01       	movw	r30, r14
    2838:	81 91       	ld	r24, Z+
    283a:	7f 01       	movw	r14, r30
    283c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <pinMode>
    2840:	0f 5f       	subi	r16, 0xFF	; 255
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	ec cf       	rjmp	.-40     	; 0x281e <_ZN13LiquidCrystal5beginEhhh+0x60>
    2846:	80 e5       	ldi	r24, 0x50	; 80
    2848:	93 ec       	ldi	r25, 0xC3	; 195
    284a:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	8e 81       	ldd	r24, Y+6	; 0x06
    285a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	8f 3f       	cpi	r24, 0xFF	; 255
    2862:	19 f0       	breq	.+6      	; 0x286a <_ZN13LiquidCrystal5beginEhhh+0xac>
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <digitalWrite>
    286a:	6f 85       	ldd	r22, Y+15	; 0x0f
    286c:	64 fd       	sbrc	r22, 4
    286e:	1d c0       	rjmp	.+58     	; 0x28aa <_ZN13LiquidCrystal5beginEhhh+0xec>
    2870:	63 e0       	ldi	r22, 0x03	; 3
    2872:	ce 01       	movw	r24, r28
    2874:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN13LiquidCrystal10write4bitsEh>
    2878:	84 e9       	ldi	r24, 0x94	; 148
    287a:	91 e1       	ldi	r25, 0x11	; 17
    287c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    2880:	63 e0       	ldi	r22, 0x03	; 3
    2882:	ce 01       	movw	r24, r28
    2884:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN13LiquidCrystal10write4bitsEh>
    2888:	84 e9       	ldi	r24, 0x94	; 148
    288a:	91 e1       	ldi	r25, 0x11	; 17
    288c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    2890:	63 e0       	ldi	r22, 0x03	; 3
    2892:	ce 01       	movw	r24, r28
    2894:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN13LiquidCrystal10write4bitsEh>
    2898:	86 e9       	ldi	r24, 0x96	; 150
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	ce 01       	movw	r24, r28
    28a4:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN13LiquidCrystal10write4bitsEh>
    28a8:	16 c0       	rjmp	.+44     	; 0x28d6 <_ZN13LiquidCrystal5beginEhhh+0x118>
    28aa:	60 62       	ori	r22, 0x20	; 32
    28ac:	ce 01       	movw	r24, r28
    28ae:	0e 94 ba 13 	call	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>
    28b2:	84 e9       	ldi	r24, 0x94	; 148
    28b4:	91 e1       	ldi	r25, 0x11	; 17
    28b6:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    28ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    28bc:	60 62       	ori	r22, 0x20	; 32
    28be:	ce 01       	movw	r24, r28
    28c0:	0e 94 ba 13 	call	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>
    28c4:	86 e9       	ldi	r24, 0x96	; 150
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delayMicroseconds>
    28cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    28ce:	60 62       	ori	r22, 0x20	; 32
    28d0:	ce 01       	movw	r24, r28
    28d2:	0e 94 ba 13 	call	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>
    28d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    28d8:	60 62       	ori	r22, 0x20	; 32
    28da:	ce 01       	movw	r24, r28
    28dc:	0e 94 ba 13 	call	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>
    28e0:	84 e0       	ldi	r24, 0x04	; 4
    28e2:	88 8b       	std	Y+16, r24	; 0x10
    28e4:	ce 01       	movw	r24, r28
    28e6:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN13LiquidCrystal7displayEv>
    28ea:	ce 01       	movw	r24, r28
    28ec:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN13LiquidCrystal5clearEv>
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	89 8b       	std	Y+17, r24	; 0x11
    28f4:	66 e0       	ldi	r22, 0x06	; 6
    28f6:	ce 01       	movw	r24, r28
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <_ZN13LiquidCrystal7commandEh>

00002908 <_ZN13LiquidCrystalC1Ehhhhhh>:
    2908:	cf 92       	push	r12
    290a:	ef 92       	push	r14
    290c:	0f 93       	push	r16
    290e:	fc 01       	movw	r30, r24
    2910:	13 82       	std	Z+3, r1	; 0x03
    2912:	12 82       	std	Z+2, r1	; 0x02
    2914:	86 ed       	ldi	r24, 0xD6	; 214
    2916:	95 e0       	ldi	r25, 0x05	; 5
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	64 83       	std	Z+4, r22	; 0x04
    291e:	8f ef       	ldi	r24, 0xFF	; 255
    2920:	85 83       	std	Z+5, r24	; 0x05
    2922:	46 83       	std	Z+6, r20	; 0x06
    2924:	27 83       	std	Z+7, r18	; 0x07
    2926:	00 87       	std	Z+8, r16	; 0x08
    2928:	e1 86       	std	Z+9, r14	; 0x09
    292a:	c2 86       	std	Z+10, r12	; 0x0a
    292c:	13 86       	std	Z+11, r1	; 0x0b
    292e:	14 86       	std	Z+12, r1	; 0x0c
    2930:	15 86       	std	Z+13, r1	; 0x0d
    2932:	16 86       	std	Z+14, r1	; 0x0e
    2934:	17 86       	std	Z+15, r1	; 0x0f
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	60 e1       	ldi	r22, 0x10	; 16
    293c:	cf 01       	movw	r24, r30
    293e:	0f 91       	pop	r16
    2940:	ef 90       	pop	r14
    2942:	cf 90       	pop	r12
    2944:	0c 94 df 13 	jmp	0x27be	; 0x27be <_ZN13LiquidCrystal5beginEhhh>

00002948 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	08 95       	ret

00002954 <__floatunsisf>:
    2954:	e8 94       	clt
    2956:	09 c0       	rjmp	.+18     	; 0x296a <__floatsisf+0x12>

00002958 <__floatsisf>:
    2958:	97 fb       	bst	r25, 7
    295a:	3e f4       	brtc	.+14     	; 0x296a <__floatsisf+0x12>
    295c:	90 95       	com	r25
    295e:	80 95       	com	r24
    2960:	70 95       	com	r23
    2962:	61 95       	neg	r22
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	8f 4f       	sbci	r24, 0xFF	; 255
    2968:	9f 4f       	sbci	r25, 0xFF	; 255
    296a:	99 23       	and	r25, r25
    296c:	a9 f0       	breq	.+42     	; 0x2998 <__floatsisf+0x40>
    296e:	f9 2f       	mov	r31, r25
    2970:	96 e9       	ldi	r25, 0x96	; 150
    2972:	bb 27       	eor	r27, r27
    2974:	93 95       	inc	r25
    2976:	f6 95       	lsr	r31
    2978:	87 95       	ror	r24
    297a:	77 95       	ror	r23
    297c:	67 95       	ror	r22
    297e:	b7 95       	ror	r27
    2980:	f1 11       	cpse	r31, r1
    2982:	f8 cf       	rjmp	.-16     	; 0x2974 <__floatsisf+0x1c>
    2984:	fa f4       	brpl	.+62     	; 0x29c4 <__floatsisf+0x6c>
    2986:	bb 0f       	add	r27, r27
    2988:	11 f4       	brne	.+4      	; 0x298e <__floatsisf+0x36>
    298a:	60 ff       	sbrs	r22, 0
    298c:	1b c0       	rjmp	.+54     	; 0x29c4 <__floatsisf+0x6c>
    298e:	6f 5f       	subi	r22, 0xFF	; 255
    2990:	7f 4f       	sbci	r23, 0xFF	; 255
    2992:	8f 4f       	sbci	r24, 0xFF	; 255
    2994:	9f 4f       	sbci	r25, 0xFF	; 255
    2996:	16 c0       	rjmp	.+44     	; 0x29c4 <__floatsisf+0x6c>
    2998:	88 23       	and	r24, r24
    299a:	11 f0       	breq	.+4      	; 0x29a0 <__floatsisf+0x48>
    299c:	96 e9       	ldi	r25, 0x96	; 150
    299e:	11 c0       	rjmp	.+34     	; 0x29c2 <__floatsisf+0x6a>
    29a0:	77 23       	and	r23, r23
    29a2:	21 f0       	breq	.+8      	; 0x29ac <__floatsisf+0x54>
    29a4:	9e e8       	ldi	r25, 0x8E	; 142
    29a6:	87 2f       	mov	r24, r23
    29a8:	76 2f       	mov	r23, r22
    29aa:	05 c0       	rjmp	.+10     	; 0x29b6 <__floatsisf+0x5e>
    29ac:	66 23       	and	r22, r22
    29ae:	71 f0       	breq	.+28     	; 0x29cc <__floatsisf+0x74>
    29b0:	96 e8       	ldi	r25, 0x86	; 134
    29b2:	86 2f       	mov	r24, r22
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	2a f0       	brmi	.+10     	; 0x29c4 <__floatsisf+0x6c>
    29ba:	9a 95       	dec	r25
    29bc:	66 0f       	add	r22, r22
    29be:	77 1f       	adc	r23, r23
    29c0:	88 1f       	adc	r24, r24
    29c2:	da f7       	brpl	.-10     	; 0x29ba <__floatsisf+0x62>
    29c4:	88 0f       	add	r24, r24
    29c6:	96 95       	lsr	r25
    29c8:	87 95       	ror	r24
    29ca:	97 f9       	bld	r25, 7
    29cc:	08 95       	ret

000029ce <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    29ce:	1f 92       	push	r1
    29d0:	0f 92       	push	r0
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	0f 92       	push	r0
    29d6:	11 24       	eor	r1, r1
    29d8:	2f 93       	push	r18
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	ef 93       	push	r30
    29e0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    29e2:	e0 91 33 07 	lds	r30, 0x0733	; 0x800733 <Serial+0x10>
    29e6:	f0 91 34 07 	lds	r31, 0x0734	; 0x800734 <Serial+0x11>
    29ea:	80 81       	ld	r24, Z
    29ec:	e0 91 39 07 	lds	r30, 0x0739	; 0x800739 <Serial+0x16>
    29f0:	f0 91 3a 07 	lds	r31, 0x073A	; 0x80073a <Serial+0x17>
    29f4:	82 fd       	sbrc	r24, 2
    29f6:	12 c0       	rjmp	.+36     	; 0x2a1c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    29f8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    29fa:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <Serial+0x19>
    29fe:	8f 5f       	subi	r24, 0xFF	; 255
    2a00:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2a02:	20 91 3d 07 	lds	r18, 0x073D	; 0x80073d <Serial+0x1a>
    2a06:	82 17       	cp	r24, r18
    2a08:	51 f0       	breq	.+20     	; 0x2a1e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2a0a:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <Serial+0x19>
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	ed 5d       	subi	r30, 0xDD	; 221
    2a12:	f8 4f       	sbci	r31, 0xF8	; 248
    2a14:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2a16:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <Serial+0x19>
    2a1a:	01 c0       	rjmp	.+2      	; 0x2a1e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2a1c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2a1e:	ff 91       	pop	r31
    2a20:	ef 91       	pop	r30
    2a22:	9f 91       	pop	r25
    2a24:	8f 91       	pop	r24
    2a26:	2f 91       	pop	r18
    2a28:	0f 90       	pop	r0
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	0f 90       	pop	r0
    2a2e:	1f 90       	pop	r1
    2a30:	18 95       	reti

00002a32 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2a32:	1f 92       	push	r1
    2a34:	0f 92       	push	r0
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	0f 92       	push	r0
    2a3a:	11 24       	eor	r1, r1
    2a3c:	2f 93       	push	r18
    2a3e:	3f 93       	push	r19
    2a40:	4f 93       	push	r20
    2a42:	5f 93       	push	r21
    2a44:	6f 93       	push	r22
    2a46:	7f 93       	push	r23
    2a48:	8f 93       	push	r24
    2a4a:	9f 93       	push	r25
    2a4c:	af 93       	push	r26
    2a4e:	bf 93       	push	r27
    2a50:	ef 93       	push	r30
    2a52:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2a54:	83 e2       	ldi	r24, 0x23	; 35
    2a56:	97 e0       	ldi	r25, 0x07	; 7
    2a58:	0e 94 39 18 	call	0x3072	; 0x3072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2a5c:	ff 91       	pop	r31
    2a5e:	ef 91       	pop	r30
    2a60:	bf 91       	pop	r27
    2a62:	af 91       	pop	r26
    2a64:	9f 91       	pop	r25
    2a66:	8f 91       	pop	r24
    2a68:	7f 91       	pop	r23
    2a6a:	6f 91       	pop	r22
    2a6c:	5f 91       	pop	r21
    2a6e:	4f 91       	pop	r20
    2a70:	3f 91       	pop	r19
    2a72:	2f 91       	pop	r18
    2a74:	0f 90       	pop	r0
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	0f 90       	pop	r0
    2a7a:	1f 90       	pop	r1
    2a7c:	18 95       	reti

00002a7e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2a7e:	83 e2       	ldi	r24, 0x23	; 35
    2a80:	97 e0       	ldi	r25, 0x07	; 7
    2a82:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <_ZN14HardwareSerial9availableEv>
    2a86:	21 e0       	ldi	r18, 0x01	; 1
    2a88:	89 2b       	or	r24, r25
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <_Z17Serial0_availablev+0x10>
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
}
    2a8e:	82 2f       	mov	r24, r18
    2a90:	08 95       	ret

00002a92 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2a92:	e3 e2       	ldi	r30, 0x23	; 35
    2a94:	f7 e0       	ldi	r31, 0x07	; 7
    2a96:	13 82       	std	Z+3, r1	; 0x03
    2a98:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2a9a:	88 ee       	ldi	r24, 0xE8	; 232
    2a9c:	93 e0       	ldi	r25, 0x03	; 3
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	84 83       	std	Z+4, r24	; 0x04
    2aa4:	95 83       	std	Z+5, r25	; 0x05
    2aa6:	a6 83       	std	Z+6, r26	; 0x06
    2aa8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2aaa:	81 ef       	ldi	r24, 0xF1	; 241
    2aac:	95 e0       	ldi	r25, 0x05	; 5
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	80 83       	st	Z, r24
    2ab2:	85 ec       	ldi	r24, 0xC5	; 197
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	95 87       	std	Z+13, r25	; 0x0d
    2ab8:	84 87       	std	Z+12, r24	; 0x0c
    2aba:	84 ec       	ldi	r24, 0xC4	; 196
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	97 87       	std	Z+15, r25	; 0x0f
    2ac0:	86 87       	std	Z+14, r24	; 0x0e
    2ac2:	80 ec       	ldi	r24, 0xC0	; 192
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	91 8b       	std	Z+17, r25	; 0x11
    2ac8:	80 8b       	std	Z+16, r24	; 0x10
    2aca:	81 ec       	ldi	r24, 0xC1	; 193
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	93 8b       	std	Z+19, r25	; 0x13
    2ad0:	82 8b       	std	Z+18, r24	; 0x12
    2ad2:	82 ec       	ldi	r24, 0xC2	; 194
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	95 8b       	std	Z+21, r25	; 0x15
    2ad8:	84 8b       	std	Z+20, r24	; 0x14
    2ada:	86 ec       	ldi	r24, 0xC6	; 198
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	97 8b       	std	Z+23, r25	; 0x17
    2ae0:	86 8b       	std	Z+22, r24	; 0x16
    2ae2:	11 8e       	std	Z+25, r1	; 0x19
    2ae4:	12 8e       	std	Z+26, r1	; 0x1a
    2ae6:	13 8e       	std	Z+27, r1	; 0x1b
    2ae8:	14 8e       	std	Z+28, r1	; 0x1c
    2aea:	08 95       	ret

00002aec <initVariant>:
    2aec:	08 95       	ret

00002aee <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2aee:	0e 94 f6 16 	call	0x2dec	; 0x2dec <init>

	initVariant();
    2af2:	0e 94 76 15 	call	0x2aec	; 0x2aec <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2af6:	0e 94 47 08 	call	0x108e	; 0x108e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2afa:	cb e2       	ldi	r28, 0x2B	; 43
    2afc:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    2afe:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <loop>
		if (serialEventRun) serialEventRun();
    2b02:	20 97       	sbiw	r28, 0x00	; 0
    2b04:	e1 f3       	breq	.-8      	; 0x2afe <main+0x10>
    2b06:	0e 94 2b 18 	call	0x3056	; 0x3056 <_Z14serialEventRunv>
    2b0a:	f9 cf       	rjmp	.-14     	; 0x2afe <main+0x10>

00002b0c <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	6c 01       	movw	r12, r24
    2b1e:	7a 01       	movw	r14, r20
    2b20:	8b 01       	movw	r16, r22
    2b22:	c0 e0       	ldi	r28, 0x00	; 0
    2b24:	d0 e0       	ldi	r29, 0x00	; 0
    2b26:	ce 15       	cp	r28, r14
    2b28:	df 05       	cpc	r29, r15
    2b2a:	81 f0       	breq	.+32     	; 0x2b4c <_ZN5Print5writeEPKhj+0x40>
    2b2c:	d8 01       	movw	r26, r16
    2b2e:	6d 91       	ld	r22, X+
    2b30:	8d 01       	movw	r16, r26
    2b32:	d6 01       	movw	r26, r12
    2b34:	ed 91       	ld	r30, X+
    2b36:	fc 91       	ld	r31, X
    2b38:	01 90       	ld	r0, Z+
    2b3a:	f0 81       	ld	r31, Z
    2b3c:	e0 2d       	mov	r30, r0
    2b3e:	c6 01       	movw	r24, r12
    2b40:	09 95       	icall
    2b42:	89 2b       	or	r24, r25
    2b44:	11 f0       	breq	.+4      	; 0x2b4a <_ZN5Print5writeEPKhj+0x3e>
    2b46:	21 96       	adiw	r28, 0x01	; 1
    2b48:	ee cf       	rjmp	.-36     	; 0x2b26 <_ZN5Print5writeEPKhj+0x1a>
    2b4a:	7e 01       	movw	r14, r28
    2b4c:	c7 01       	movw	r24, r14
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
    2b5e:	08 95       	ret

00002b60 <_ZN5Print5writeEPKc>:
    2b60:	61 15       	cp	r22, r1
    2b62:	71 05       	cpc	r23, r1
    2b64:	79 f0       	breq	.+30     	; 0x2b84 <_ZN5Print5writeEPKc+0x24>
    2b66:	fb 01       	movw	r30, r22
    2b68:	01 90       	ld	r0, Z+
    2b6a:	00 20       	and	r0, r0
    2b6c:	e9 f7       	brne	.-6      	; 0x2b68 <_ZN5Print5writeEPKc+0x8>
    2b6e:	31 97       	sbiw	r30, 0x01	; 1
    2b70:	af 01       	movw	r20, r30
    2b72:	46 1b       	sub	r20, r22
    2b74:	57 0b       	sbc	r21, r23
    2b76:	dc 01       	movw	r26, r24
    2b78:	ed 91       	ld	r30, X+
    2b7a:	fc 91       	ld	r31, X
    2b7c:	02 80       	ldd	r0, Z+2	; 0x02
    2b7e:	f3 81       	ldd	r31, Z+3	; 0x03
    2b80:	e0 2d       	mov	r30, r0
    2b82:	09 94       	ijmp
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	08 95       	ret

00002b8a <_ZN5Print5printEPK19__FlashStringHelper>:
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	8c 01       	movw	r16, r24
    2b98:	7b 01       	movw	r14, r22
    2b9a:	c0 e0       	ldi	r28, 0x00	; 0
    2b9c:	d0 e0       	ldi	r29, 0x00	; 0
    2b9e:	f7 01       	movw	r30, r14
    2ba0:	ec 0f       	add	r30, r28
    2ba2:	fd 1f       	adc	r31, r29
    2ba4:	64 91       	lpm	r22, Z
    2ba6:	66 23       	and	r22, r22
    2ba8:	61 f0       	breq	.+24     	; 0x2bc2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2baa:	d8 01       	movw	r26, r16
    2bac:	ed 91       	ld	r30, X+
    2bae:	fc 91       	ld	r31, X
    2bb0:	01 90       	ld	r0, Z+
    2bb2:	f0 81       	ld	r31, Z
    2bb4:	e0 2d       	mov	r30, r0
    2bb6:	c8 01       	movw	r24, r16
    2bb8:	09 95       	icall
    2bba:	89 2b       	or	r24, r25
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2bbe:	21 96       	adiw	r28, 0x01	; 1
    2bc0:	ee cf       	rjmp	.-36     	; 0x2b9e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	ff 90       	pop	r15
    2bce:	ef 90       	pop	r14
    2bd0:	08 95       	ret

00002bd2 <_ZN5Print5printEPKc>:
    2bd2:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <_ZN5Print5writeEPKc>

00002bd6 <_ZN5Print5printEc>:
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	ed 91       	ld	r30, X+
    2bda:	fc 91       	ld	r31, X
    2bdc:	01 90       	ld	r0, Z+
    2bde:	f0 81       	ld	r31, Z
    2be0:	e0 2d       	mov	r30, r0
    2be2:	09 94       	ijmp

00002be4 <_ZN5Print7printlnEv>:
    2be4:	6e ed       	ldi	r22, 0xDE	; 222
    2be6:	75 e0       	ldi	r23, 0x05	; 5
    2be8:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <_ZN5Print5writeEPKc>

00002bec <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	ec 01       	movw	r28, r24
    2bf6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN5Print5printEPK19__FlashStringHelper>
    2bfa:	8c 01       	movw	r16, r24
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN5Print7printlnEv>
    2c02:	80 0f       	add	r24, r16
    2c04:	91 1f       	adc	r25, r17
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	08 95       	ret

00002c10 <_ZN5Print7printlnEPKc>:
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	ec 01       	movw	r28, r24
    2c1a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5Print5writeEPKc>
    2c1e:	8c 01       	movw	r16, r24
    2c20:	ce 01       	movw	r24, r28
    2c22:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN5Print7printlnEv>
    2c26:	80 0f       	add	r24, r16
    2c28:	91 1f       	adc	r25, r17
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	08 95       	ret

00002c34 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    2c34:	8f 92       	push	r8
    2c36:	9f 92       	push	r9
    2c38:	af 92       	push	r10
    2c3a:	bf 92       	push	r11
    2c3c:	ef 92       	push	r14
    2c3e:	ff 92       	push	r15
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	a1 97       	sbiw	r28, 0x21	; 33
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	7c 01       	movw	r14, r24
    2c5a:	fa 01       	movw	r30, r20
    2c5c:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2c5e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2c60:	22 30       	cpi	r18, 0x02	; 2
    2c62:	08 f4       	brcc	.+2      	; 0x2c66 <_ZN5Print11printNumberEmh+0x32>
    2c64:	2a e0       	ldi	r18, 0x0A	; 10
    2c66:	8e 01       	movw	r16, r28
    2c68:	0f 5d       	subi	r16, 0xDF	; 223
    2c6a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    2c6c:	82 2e       	mov	r8, r18
    2c6e:	91 2c       	mov	r9, r1
    2c70:	a1 2c       	mov	r10, r1
    2c72:	b1 2c       	mov	r11, r1
    2c74:	bf 01       	movw	r22, r30
    2c76:	a5 01       	movw	r20, r10
    2c78:	94 01       	movw	r18, r8
    2c7a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__udivmodsi4>
    n /= base;
    2c7e:	f9 01       	movw	r30, r18
    2c80:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2c82:	01 50       	subi	r16, 0x01	; 1
    2c84:	11 09       	sbc	r17, r1
    2c86:	6a 30       	cpi	r22, 0x0A	; 10
    2c88:	10 f4       	brcc	.+4      	; 0x2c8e <_ZN5Print11printNumberEmh+0x5a>
    2c8a:	60 5d       	subi	r22, 0xD0	; 208
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <_ZN5Print11printNumberEmh+0x5c>
    2c8e:	69 5c       	subi	r22, 0xC9	; 201
    2c90:	d8 01       	movw	r26, r16
    2c92:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2c94:	23 2b       	or	r18, r19
    2c96:	24 2b       	or	r18, r20
    2c98:	25 2b       	or	r18, r21
    2c9a:	61 f7       	brne	.-40     	; 0x2c74 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    2c9c:	b8 01       	movw	r22, r16
    2c9e:	c7 01       	movw	r24, r14
    2ca0:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5Print5writeEPKc>
}
    2ca4:	a1 96       	adiw	r28, 0x21	; 33
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	ff 90       	pop	r15
    2cba:	ef 90       	pop	r14
    2cbc:	bf 90       	pop	r11
    2cbe:	af 90       	pop	r10
    2cc0:	9f 90       	pop	r9
    2cc2:	8f 90       	pop	r8
    2cc4:	08 95       	ret

00002cc6 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    2cc6:	21 15       	cp	r18, r1
    2cc8:	31 05       	cpc	r19, r1
    2cca:	41 f4       	brne	.+16     	; 0x2cdc <_ZN5Print5printEmi+0x16>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	ed 91       	ld	r30, X+
    2cd0:	fc 91       	ld	r31, X
    2cd2:	01 90       	ld	r0, Z+
    2cd4:	f0 81       	ld	r31, Z
    2cd6:	e0 2d       	mov	r30, r0
    2cd8:	64 2f       	mov	r22, r20
    2cda:	09 94       	ijmp
  else return printNumber(n, base);
    2cdc:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <_ZN5Print11printNumberEmh>

00002ce0 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    2ce0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    2ce2:	46 2f       	mov	r20, r22
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <_ZN5Print5printEmi>

00002cee <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    2cf8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN5Print5printEhi>
    2cfc:	8c 01       	movw	r16, r24
  n += println();
    2cfe:	ce 01       	movw	r24, r28
    2d00:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN5Print7printlnEv>
  return n;
}
    2d04:	80 0f       	add	r24, r16
    2d06:	91 1f       	adc	r25, r17
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	1f 91       	pop	r17
    2d0e:	0f 91       	pop	r16
    2d10:	08 95       	ret

00002d12 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    2d12:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    2d14:	ab 01       	movw	r20, r22
    2d16:	60 e0       	ldi	r22, 0x00	; 0
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <_ZN5Print5printEmi>

00002d1e <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2d28:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN5Print5printEji>
    2d2c:	8c 01       	movw	r16, r24
  n += println();
    2d2e:	ce 01       	movw	r24, r28
    2d30:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN5Print7printlnEv>
  return n;
}
    2d34:	80 0f       	add	r24, r16
    2d36:	91 1f       	adc	r25, r17
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	08 95       	ret

00002d42 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2d42:	1f 92       	push	r1
    2d44:	0f 92       	push	r0
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	0f 92       	push	r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	2f 93       	push	r18
    2d4e:	3f 93       	push	r19
    2d50:	8f 93       	push	r24
    2d52:	9f 93       	push	r25
    2d54:	af 93       	push	r26
    2d56:	bf 93       	push	r27
    2d58:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <timer0_millis>
    2d5c:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <timer0_millis+0x1>
    2d60:	a0 91 c3 07 	lds	r26, 0x07C3	; 0x8007c3 <timer0_millis+0x2>
    2d64:	b0 91 c4 07 	lds	r27, 0x07C4	; 0x8007c4 <timer0_millis+0x3>
    2d68:	30 91 c0 07 	lds	r19, 0x07C0	; 0x8007c0 <timer0_fract>
    2d6c:	23 e0       	ldi	r18, 0x03	; 3
    2d6e:	23 0f       	add	r18, r19
    2d70:	2d 37       	cpi	r18, 0x7D	; 125
    2d72:	20 f4       	brcc	.+8      	; 0x2d7c <__vector_16+0x3a>
    2d74:	01 96       	adiw	r24, 0x01	; 1
    2d76:	a1 1d       	adc	r26, r1
    2d78:	b1 1d       	adc	r27, r1
    2d7a:	05 c0       	rjmp	.+10     	; 0x2d86 <__vector_16+0x44>
    2d7c:	26 e8       	ldi	r18, 0x86	; 134
    2d7e:	23 0f       	add	r18, r19
    2d80:	02 96       	adiw	r24, 0x02	; 2
    2d82:	a1 1d       	adc	r26, r1
    2d84:	b1 1d       	adc	r27, r1
    2d86:	20 93 c0 07 	sts	0x07C0, r18	; 0x8007c0 <timer0_fract>
    2d8a:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <timer0_millis>
    2d8e:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <timer0_millis+0x1>
    2d92:	a0 93 c3 07 	sts	0x07C3, r26	; 0x8007c3 <timer0_millis+0x2>
    2d96:	b0 93 c4 07 	sts	0x07C4, r27	; 0x8007c4 <timer0_millis+0x3>
    2d9a:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <timer0_overflow_count>
    2d9e:	90 91 c6 07 	lds	r25, 0x07C6	; 0x8007c6 <timer0_overflow_count+0x1>
    2da2:	a0 91 c7 07 	lds	r26, 0x07C7	; 0x8007c7 <timer0_overflow_count+0x2>
    2da6:	b0 91 c8 07 	lds	r27, 0x07C8	; 0x8007c8 <timer0_overflow_count+0x3>
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	a1 1d       	adc	r26, r1
    2dae:	b1 1d       	adc	r27, r1
    2db0:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <timer0_overflow_count>
    2db4:	90 93 c6 07 	sts	0x07C6, r25	; 0x8007c6 <timer0_overflow_count+0x1>
    2db8:	a0 93 c7 07 	sts	0x07C7, r26	; 0x8007c7 <timer0_overflow_count+0x2>
    2dbc:	b0 93 c8 07 	sts	0x07C8, r27	; 0x8007c8 <timer0_overflow_count+0x3>
    2dc0:	bf 91       	pop	r27
    2dc2:	af 91       	pop	r26
    2dc4:	9f 91       	pop	r25
    2dc6:	8f 91       	pop	r24
    2dc8:	3f 91       	pop	r19
    2dca:	2f 91       	pop	r18
    2dcc:	0f 90       	pop	r0
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	0f 90       	pop	r0
    2dd2:	1f 90       	pop	r1
    2dd4:	18 95       	reti

00002dd6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2dd6:	82 30       	cpi	r24, 0x02	; 2
    2dd8:	91 05       	cpc	r25, r1
    2dda:	38 f0       	brcs	.+14     	; 0x2dea <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2de4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <delayMicroseconds+0x10>
    2dea:	08 95       	ret

00002dec <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2dec:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2dee:	84 b5       	in	r24, 0x24	; 36
    2df0:	82 60       	ori	r24, 0x02	; 2
    2df2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2df4:	84 b5       	in	r24, 0x24	; 36
    2df6:	81 60       	ori	r24, 0x01	; 1
    2df8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2dfa:	85 b5       	in	r24, 0x25	; 37
    2dfc:	82 60       	ori	r24, 0x02	; 2
    2dfe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2e00:	85 b5       	in	r24, 0x25	; 37
    2e02:	81 60       	ori	r24, 0x01	; 1
    2e04:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2e06:	ee e6       	ldi	r30, 0x6E	; 110
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	81 60       	ori	r24, 0x01	; 1
    2e0e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2e10:	e1 e8       	ldi	r30, 0x81	; 129
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2e16:	80 81       	ld	r24, Z
    2e18:	82 60       	ori	r24, 0x02	; 2
    2e1a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2e1c:	80 81       	ld	r24, Z
    2e1e:	81 60       	ori	r24, 0x01	; 1
    2e20:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2e22:	e0 e8       	ldi	r30, 0x80	; 128
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	81 60       	ori	r24, 0x01	; 1
    2e2a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2e2c:	e1 eb       	ldi	r30, 0xB1	; 177
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	84 60       	ori	r24, 0x04	; 4
    2e34:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2e36:	e0 eb       	ldi	r30, 0xB0	; 176
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	81 60       	ori	r24, 0x01	; 1
    2e3e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2e40:	ea e7       	ldi	r30, 0x7A	; 122
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	84 60       	ori	r24, 0x04	; 4
    2e48:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2e4a:	80 81       	ld	r24, Z
    2e4c:	82 60       	ori	r24, 0x02	; 2
    2e4e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2e50:	80 81       	ld	r24, Z
    2e52:	81 60       	ori	r24, 0x01	; 1
    2e54:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2e56:	80 81       	ld	r24, Z
    2e58:	80 68       	ori	r24, 0x80	; 128
    2e5a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2e5c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2e60:	08 95       	ret

00002e62 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2e62:	83 30       	cpi	r24, 0x03	; 3
    2e64:	81 f0       	breq	.+32     	; 0x2e86 <turnOffPWM+0x24>
    2e66:	28 f4       	brcc	.+10     	; 0x2e72 <turnOffPWM+0x10>
    2e68:	81 30       	cpi	r24, 0x01	; 1
    2e6a:	99 f0       	breq	.+38     	; 0x2e92 <turnOffPWM+0x30>
    2e6c:	82 30       	cpi	r24, 0x02	; 2
    2e6e:	a1 f0       	breq	.+40     	; 0x2e98 <turnOffPWM+0x36>
    2e70:	08 95       	ret
    2e72:	87 30       	cpi	r24, 0x07	; 7
    2e74:	a9 f0       	breq	.+42     	; 0x2ea0 <turnOffPWM+0x3e>
    2e76:	88 30       	cpi	r24, 0x08	; 8
    2e78:	b9 f0       	breq	.+46     	; 0x2ea8 <turnOffPWM+0x46>
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	d1 f4       	brne	.+52     	; 0x2eb2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e7e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2e82:	8f 7d       	andi	r24, 0xDF	; 223
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2e86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2e8a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2e90:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2e92:	84 b5       	in	r24, 0x24	; 36
    2e94:	8f 77       	andi	r24, 0x7F	; 127
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2e98:	84 b5       	in	r24, 0x24	; 36
    2e9a:	8f 7d       	andi	r24, 0xDF	; 223
    2e9c:	84 bd       	out	0x24, r24	; 36
    2e9e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2ea0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2ea4:	8f 77       	andi	r24, 0x7F	; 127
    2ea6:	03 c0       	rjmp	.+6      	; 0x2eae <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2ea8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2eac:	8f 7d       	andi	r24, 0xDF	; 223
    2eae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2eb2:	08 95       	ret

00002eb4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	fc 01       	movw	r30, r24
    2ebc:	ea 55       	subi	r30, 0x5A	; 90
    2ebe:	fc 4f       	sbci	r31, 0xFC	; 252
    2ec0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	e6 54       	subi	r30, 0x46	; 70
    2ec6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ec8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2eca:	88 23       	and	r24, r24
    2ecc:	61 f1       	breq	.+88     	; 0x2f26 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	ee 51       	subi	r30, 0x1E	; 30
    2ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    2eda:	c5 91       	lpm	r28, Z+
    2edc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2ede:	fc 01       	movw	r30, r24
    2ee0:	e8 52       	subi	r30, 0x28	; 40
    2ee2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ee4:	a5 91       	lpm	r26, Z+
    2ee6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2ee8:	61 11       	cpse	r22, r1
    2eea:	09 c0       	rjmp	.+18     	; 0x2efe <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2eec:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2eee:	f8 94       	cli
		*reg &= ~bit;
    2ef0:	88 81       	ld	r24, Y
    2ef2:	20 95       	com	r18
    2ef4:	82 23       	and	r24, r18
    2ef6:	88 83       	st	Y, r24
		*out &= ~bit;
    2ef8:	ec 91       	ld	r30, X
    2efa:	2e 23       	and	r18, r30
    2efc:	0b c0       	rjmp	.+22     	; 0x2f14 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2efe:	62 30       	cpi	r22, 0x02	; 2
    2f00:	61 f4       	brne	.+24     	; 0x2f1a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2f02:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2f04:	f8 94       	cli
		*reg &= ~bit;
    2f06:	88 81       	ld	r24, Y
    2f08:	32 2f       	mov	r19, r18
    2f0a:	30 95       	com	r19
    2f0c:	83 23       	and	r24, r19
    2f0e:	88 83       	st	Y, r24
		*out |= bit;
    2f10:	ec 91       	ld	r30, X
    2f12:	2e 2b       	or	r18, r30
    2f14:	2c 93       	st	X, r18
		SREG = oldSREG;
    2f16:	9f bf       	out	0x3f, r25	; 63
    2f18:	06 c0       	rjmp	.+12     	; 0x2f26 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2f1a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2f1c:	f8 94       	cli
		*reg |= bit;
    2f1e:	e8 81       	ld	r30, Y
    2f20:	2e 2b       	or	r18, r30
    2f22:	28 83       	st	Y, r18
		SREG = oldSREG;
    2f24:	8f bf       	out	0x3f, r24	; 63
	}
}
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	08 95       	ret

00002f2c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2f2c:	1f 93       	push	r17
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2f32:	28 2f       	mov	r18, r24
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	f9 01       	movw	r30, r18
    2f38:	ee 56       	subi	r30, 0x6E	; 110
    2f3a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f3c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2f3e:	f9 01       	movw	r30, r18
    2f40:	ea 55       	subi	r30, 0x5A	; 90
    2f42:	fc 4f       	sbci	r31, 0xFC	; 252
    2f44:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2f46:	f9 01       	movw	r30, r18
    2f48:	e6 54       	subi	r30, 0x46	; 70
    2f4a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f4c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2f4e:	cc 23       	and	r28, r28
    2f50:	c1 f0       	breq	.+48     	; 0x2f82 <digitalWrite+0x56>
    2f52:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f54:	81 11       	cpse	r24, r1
    2f56:	0e 94 31 17 	call	0x2e62	; 0x2e62 <turnOffPWM>

	out = portOutputRegister(port);
    2f5a:	ec 2f       	mov	r30, r28
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	ee 0f       	add	r30, r30
    2f60:	ff 1f       	adc	r31, r31
    2f62:	e8 52       	subi	r30, 0x28	; 40
    2f64:	fc 4f       	sbci	r31, 0xFC	; 252
    2f66:	a5 91       	lpm	r26, Z+
    2f68:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2f6a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2f6c:	f8 94       	cli

	if (val == LOW) {
    2f6e:	11 11       	cpse	r17, r1
    2f70:	04 c0       	rjmp	.+8      	; 0x2f7a <digitalWrite+0x4e>
		*out &= ~bit;
    2f72:	8c 91       	ld	r24, X
    2f74:	d0 95       	com	r29
    2f76:	d8 23       	and	r29, r24
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <digitalWrite+0x52>
	} else {
		*out |= bit;
    2f7a:	ec 91       	ld	r30, X
    2f7c:	de 2b       	or	r29, r30
    2f7e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2f80:	9f bf       	out	0x3f, r25	; 63
}
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	1f 91       	pop	r17
    2f88:	08 95       	ret

00002f8a <digitalRead>:

int digitalRead(uint8_t pin)
{
    2f8a:	cf 93       	push	r28
    2f8c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	f9 01       	movw	r30, r18
    2f94:	ee 56       	subi	r30, 0x6E	; 110
    2f96:	fc 4f       	sbci	r31, 0xFC	; 252
    2f98:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2f9a:	f9 01       	movw	r30, r18
    2f9c:	ea 55       	subi	r30, 0x5A	; 90
    2f9e:	fc 4f       	sbci	r31, 0xFC	; 252
    2fa0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2fa2:	f9 01       	movw	r30, r18
    2fa4:	e6 54       	subi	r30, 0x46	; 70
    2fa6:	fc 4f       	sbci	r31, 0xFC	; 252
    2fa8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2faa:	cc 23       	and	r28, r28
    2fac:	91 f0       	breq	.+36     	; 0x2fd2 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2fae:	81 11       	cpse	r24, r1
    2fb0:	0e 94 31 17 	call	0x2e62	; 0x2e62 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2fb4:	ec 2f       	mov	r30, r28
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	ee 0f       	add	r30, r30
    2fba:	ff 1f       	adc	r31, r31
    2fbc:	e2 53       	subi	r30, 0x32	; 50
    2fbe:	fc 4f       	sbci	r31, 0xFC	; 252
    2fc0:	a5 91       	lpm	r26, Z+
    2fc2:	b4 91       	lpm	r27, Z
    2fc4:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2fc6:	ed 23       	and	r30, r29
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	21 f4       	brne	.+8      	; 0x2fd6 <digitalRead+0x4c>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <digitalRead+0x4c>
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	08 95       	ret

00002fdc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2fdc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2fde:	91 8d       	ldd	r25, Z+25	; 0x19
    2fe0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2fe2:	89 2f       	mov	r24, r25
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	80 5c       	subi	r24, 0xC0	; 192
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	82 1b       	sub	r24, r18
    2fec:	91 09       	sbc	r25, r1
}
    2fee:	8f 73       	andi	r24, 0x3F	; 63
    2ff0:	99 27       	eor	r25, r25
    2ff2:	08 95       	ret

00002ff4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2ff4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2ff6:	91 8d       	ldd	r25, Z+25	; 0x19
    2ff8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ffa:	98 17       	cp	r25, r24
    2ffc:	31 f0       	breq	.+12     	; 0x300a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2ffe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3000:	e8 0f       	add	r30, r24
    3002:	f1 1d       	adc	r31, r1
    3004:	85 8d       	ldd	r24, Z+29	; 0x1d
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    300a:	8f ef       	ldi	r24, 0xFF	; 255
    300c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    300e:	08 95       	ret

00003010 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3010:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3012:	91 8d       	ldd	r25, Z+25	; 0x19
    3014:	82 8d       	ldd	r24, Z+26	; 0x1a
    3016:	98 17       	cp	r25, r24
    3018:	61 f0       	breq	.+24     	; 0x3032 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    301a:	82 8d       	ldd	r24, Z+26	; 0x1a
    301c:	df 01       	movw	r26, r30
    301e:	a8 0f       	add	r26, r24
    3020:	b1 1d       	adc	r27, r1
    3022:	5d 96       	adiw	r26, 0x1d	; 29
    3024:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3026:	92 8d       	ldd	r25, Z+26	; 0x1a
    3028:	9f 5f       	subi	r25, 0xFF	; 255
    302a:	9f 73       	andi	r25, 0x3F	; 63
    302c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3032:	8f ef       	ldi	r24, 0xFF	; 255
    3034:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3036:	08 95       	ret

00003038 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3038:	fc 01       	movw	r30, r24
    303a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    303c:	44 8d       	ldd	r20, Z+28	; 0x1c
    303e:	25 2f       	mov	r18, r21
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	84 2f       	mov	r24, r20
    3044:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3046:	82 1b       	sub	r24, r18
    3048:	93 0b       	sbc	r25, r19
    304a:	54 17       	cp	r21, r20
    304c:	10 f0       	brcs	.+4      	; 0x3052 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    304e:	cf 96       	adiw	r24, 0x3f	; 63
    3050:	08 95       	ret
  return tail - head - 1;
    3052:	01 97       	sbiw	r24, 0x01	; 1
}
    3054:	08 95       	ret

00003056 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3056:	8f e3       	ldi	r24, 0x3F	; 63
    3058:	95 e1       	ldi	r25, 0x15	; 21
    305a:	89 2b       	or	r24, r25
    305c:	49 f0       	breq	.+18     	; 0x3070 <_Z14serialEventRunv+0x1a>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	89 2b       	or	r24, r25
    3064:	29 f0       	breq	.+10     	; 0x3070 <_Z14serialEventRunv+0x1a>
    3066:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_Z17Serial0_availablev>
    306a:	81 11       	cpse	r24, r1
    306c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3070:	08 95       	ret

00003072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3072:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3074:	84 8d       	ldd	r24, Z+28	; 0x1c
    3076:	df 01       	movw	r26, r30
    3078:	a8 0f       	add	r26, r24
    307a:	b1 1d       	adc	r27, r1
    307c:	a3 5a       	subi	r26, 0xA3	; 163
    307e:	bf 4f       	sbci	r27, 0xFF	; 255
    3080:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3082:	84 8d       	ldd	r24, Z+28	; 0x1c
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	8f 73       	andi	r24, 0x3F	; 63
    308a:	99 27       	eor	r25, r25
    308c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    308e:	a6 89       	ldd	r26, Z+22	; 0x16
    3090:	b7 89       	ldd	r27, Z+23	; 0x17
    3092:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3094:	a0 89       	ldd	r26, Z+16	; 0x10
    3096:	b1 89       	ldd	r27, Z+17	; 0x11
    3098:	8c 91       	ld	r24, X
    309a:	83 70       	andi	r24, 0x03	; 3
    309c:	80 64       	ori	r24, 0x40	; 64
    309e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    30a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    30a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    30a4:	98 13       	cpse	r25, r24
    30a6:	06 c0       	rjmp	.+12     	; 0x30b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    30a8:	02 88       	ldd	r0, Z+18	; 0x12
    30aa:	f3 89       	ldd	r31, Z+19	; 0x13
    30ac:	e0 2d       	mov	r30, r0
    30ae:	80 81       	ld	r24, Z
    30b0:	8f 7d       	andi	r24, 0xDF	; 223
    30b2:	80 83       	st	Z, r24
    30b4:	08 95       	ret

000030b6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    30b6:	ef 92       	push	r14
    30b8:	ff 92       	push	r15
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	ec 01       	movw	r28, r24
  _written = true;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    30c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30cc:	98 13       	cpse	r25, r24
    30ce:	05 c0       	rjmp	.+10     	; 0x30da <_ZN14HardwareSerial5writeEh+0x24>
    30d0:	e8 89       	ldd	r30, Y+16	; 0x10
    30d2:	f9 89       	ldd	r31, Y+17	; 0x11
    30d4:	80 81       	ld	r24, Z
    30d6:	85 fd       	sbrc	r24, 5
    30d8:	26 c0       	rjmp	.+76     	; 0x3126 <_ZN14HardwareSerial5writeEh+0x70>
    30da:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    30dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    30de:	10 e0       	ldi	r17, 0x00	; 0
    30e0:	0f 5f       	subi	r16, 0xFF	; 255
    30e2:	1f 4f       	sbci	r17, 0xFF	; 255
    30e4:	0f 73       	andi	r16, 0x3F	; 63
    30e6:	11 27       	eor	r17, r17
    30e8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    30ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30ec:	e8 12       	cpse	r14, r24
    30ee:	0c c0       	rjmp	.+24     	; 0x3108 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	07 fc       	sbrc	r0, 7
    30f4:	fa cf       	rjmp	.-12     	; 0x30ea <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    30f6:	e8 89       	ldd	r30, Y+16	; 0x10
    30f8:	f9 89       	ldd	r31, Y+17	; 0x11
    30fa:	80 81       	ld	r24, Z
    30fc:	85 ff       	sbrs	r24, 5
    30fe:	f5 cf       	rjmp	.-22     	; 0x30ea <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3100:	ce 01       	movw	r24, r28
    3102:	0e 94 39 18 	call	0x3072	; 0x3072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3106:	f1 cf       	rjmp	.-30     	; 0x30ea <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310a:	fe 01       	movw	r30, r28
    310c:	e8 0f       	add	r30, r24
    310e:	f1 1d       	adc	r31, r1
    3110:	e3 5a       	subi	r30, 0xA3	; 163
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3116:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3118:	f8 94       	cli
    _tx_buffer_head = i;
    311a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    311c:	ea 89       	ldd	r30, Y+18	; 0x12
    311e:	fb 89       	ldd	r31, Y+19	; 0x13
    3120:	80 81       	ld	r24, Z
    3122:	80 62       	ori	r24, 0x20	; 32
    3124:	0a c0       	rjmp	.+20     	; 0x313a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3126:	9f b7       	in	r25, 0x3f	; 63
    3128:	f8 94       	cli
      *_udr = c;
    312a:	ee 89       	ldd	r30, Y+22	; 0x16
    312c:	ff 89       	ldd	r31, Y+23	; 0x17
    312e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3130:	e8 89       	ldd	r30, Y+16	; 0x10
    3132:	f9 89       	ldd	r31, Y+17	; 0x11
    3134:	80 81       	ld	r24, Z
    3136:	83 70       	andi	r24, 0x03	; 3
    3138:	80 64       	ori	r24, 0x40	; 64
    313a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    313c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	1f 91       	pop	r17
    3148:	0f 91       	pop	r16
    314a:	ff 90       	pop	r15
    314c:	ef 90       	pop	r14
    314e:	08 95       	ret

00003150 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3156:	88 8d       	ldd	r24, Y+24	; 0x18
    3158:	88 23       	and	r24, r24
    315a:	c9 f0       	breq	.+50     	; 0x318e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    315c:	ea 89       	ldd	r30, Y+18	; 0x12
    315e:	fb 89       	ldd	r31, Y+19	; 0x13
    3160:	80 81       	ld	r24, Z
    3162:	85 fd       	sbrc	r24, 5
    3164:	05 c0       	rjmp	.+10     	; 0x3170 <_ZN14HardwareSerial5flushEv+0x20>
    3166:	a8 89       	ldd	r26, Y+16	; 0x10
    3168:	b9 89       	ldd	r27, Y+17	; 0x11
    316a:	8c 91       	ld	r24, X
    316c:	86 fd       	sbrc	r24, 6
    316e:	0f c0       	rjmp	.+30     	; 0x318e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	07 fc       	sbrc	r0, 7
    3174:	f5 cf       	rjmp	.-22     	; 0x3160 <_ZN14HardwareSerial5flushEv+0x10>
    3176:	80 81       	ld	r24, Z
    3178:	85 ff       	sbrs	r24, 5
    317a:	f2 cf       	rjmp	.-28     	; 0x3160 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    317c:	a8 89       	ldd	r26, Y+16	; 0x10
    317e:	b9 89       	ldd	r27, Y+17	; 0x11
    3180:	8c 91       	ld	r24, X
    3182:	85 ff       	sbrs	r24, 5
    3184:	ed cf       	rjmp	.-38     	; 0x3160 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3186:	ce 01       	movw	r24, r28
    3188:	0e 94 39 18 	call	0x3072	; 0x3072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    318c:	e7 cf       	rjmp	.-50     	; 0x315c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	08 95       	ret

00003194 <__mulsi3>:
    3194:	db 01       	movw	r26, r22
    3196:	8f 93       	push	r24
    3198:	9f 93       	push	r25
    319a:	0e 94 1f 19 	call	0x323e	; 0x323e <__muluhisi3>
    319e:	bf 91       	pop	r27
    31a0:	af 91       	pop	r26
    31a2:	a2 9f       	mul	r26, r18
    31a4:	80 0d       	add	r24, r0
    31a6:	91 1d       	adc	r25, r1
    31a8:	a3 9f       	mul	r26, r19
    31aa:	90 0d       	add	r25, r0
    31ac:	b2 9f       	mul	r27, r18
    31ae:	90 0d       	add	r25, r0
    31b0:	11 24       	eor	r1, r1
    31b2:	08 95       	ret

000031b4 <__udivmodhi4>:
    31b4:	aa 1b       	sub	r26, r26
    31b6:	bb 1b       	sub	r27, r27
    31b8:	51 e1       	ldi	r21, 0x11	; 17
    31ba:	07 c0       	rjmp	.+14     	; 0x31ca <__udivmodhi4_ep>

000031bc <__udivmodhi4_loop>:
    31bc:	aa 1f       	adc	r26, r26
    31be:	bb 1f       	adc	r27, r27
    31c0:	a6 17       	cp	r26, r22
    31c2:	b7 07       	cpc	r27, r23
    31c4:	10 f0       	brcs	.+4      	; 0x31ca <__udivmodhi4_ep>
    31c6:	a6 1b       	sub	r26, r22
    31c8:	b7 0b       	sbc	r27, r23

000031ca <__udivmodhi4_ep>:
    31ca:	88 1f       	adc	r24, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	5a 95       	dec	r21
    31d0:	a9 f7       	brne	.-22     	; 0x31bc <__udivmodhi4_loop>
    31d2:	80 95       	com	r24
    31d4:	90 95       	com	r25
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	08 95       	ret

000031dc <__udivmodsi4>:
    31dc:	a1 e2       	ldi	r26, 0x21	; 33
    31de:	1a 2e       	mov	r1, r26
    31e0:	aa 1b       	sub	r26, r26
    31e2:	bb 1b       	sub	r27, r27
    31e4:	fd 01       	movw	r30, r26
    31e6:	0d c0       	rjmp	.+26     	; 0x3202 <__udivmodsi4_ep>

000031e8 <__udivmodsi4_loop>:
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	ee 1f       	adc	r30, r30
    31ee:	ff 1f       	adc	r31, r31
    31f0:	a2 17       	cp	r26, r18
    31f2:	b3 07       	cpc	r27, r19
    31f4:	e4 07       	cpc	r30, r20
    31f6:	f5 07       	cpc	r31, r21
    31f8:	20 f0       	brcs	.+8      	; 0x3202 <__udivmodsi4_ep>
    31fa:	a2 1b       	sub	r26, r18
    31fc:	b3 0b       	sbc	r27, r19
    31fe:	e4 0b       	sbc	r30, r20
    3200:	f5 0b       	sbc	r31, r21

00003202 <__udivmodsi4_ep>:
    3202:	66 1f       	adc	r22, r22
    3204:	77 1f       	adc	r23, r23
    3206:	88 1f       	adc	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	1a 94       	dec	r1
    320c:	69 f7       	brne	.-38     	; 0x31e8 <__udivmodsi4_loop>
    320e:	60 95       	com	r22
    3210:	70 95       	com	r23
    3212:	80 95       	com	r24
    3214:	90 95       	com	r25
    3216:	9b 01       	movw	r18, r22
    3218:	ac 01       	movw	r20, r24
    321a:	bd 01       	movw	r22, r26
    321c:	cf 01       	movw	r24, r30
    321e:	08 95       	ret

00003220 <__umulhisi3>:
    3220:	a2 9f       	mul	r26, r18
    3222:	b0 01       	movw	r22, r0
    3224:	b3 9f       	mul	r27, r19
    3226:	c0 01       	movw	r24, r0
    3228:	a3 9f       	mul	r26, r19
    322a:	70 0d       	add	r23, r0
    322c:	81 1d       	adc	r24, r1
    322e:	11 24       	eor	r1, r1
    3230:	91 1d       	adc	r25, r1
    3232:	b2 9f       	mul	r27, r18
    3234:	70 0d       	add	r23, r0
    3236:	81 1d       	adc	r24, r1
    3238:	11 24       	eor	r1, r1
    323a:	91 1d       	adc	r25, r1
    323c:	08 95       	ret

0000323e <__muluhisi3>:
    323e:	0e 94 10 19 	call	0x3220	; 0x3220 <__umulhisi3>
    3242:	a5 9f       	mul	r26, r21
    3244:	90 0d       	add	r25, r0
    3246:	b4 9f       	mul	r27, r20
    3248:	90 0d       	add	r25, r0
    324a:	a4 9f       	mul	r26, r20
    324c:	80 0d       	add	r24, r0
    324e:	91 1d       	adc	r25, r1
    3250:	11 24       	eor	r1, r1
    3252:	08 95       	ret

00003254 <__ashldi3>:
    3254:	0f 93       	push	r16
    3256:	08 30       	cpi	r16, 0x08	; 8
    3258:	90 f0       	brcs	.+36     	; 0x327e <__ashldi3+0x2a>
    325a:	98 2f       	mov	r25, r24
    325c:	87 2f       	mov	r24, r23
    325e:	76 2f       	mov	r23, r22
    3260:	65 2f       	mov	r22, r21
    3262:	54 2f       	mov	r21, r20
    3264:	43 2f       	mov	r20, r19
    3266:	32 2f       	mov	r19, r18
    3268:	22 27       	eor	r18, r18
    326a:	08 50       	subi	r16, 0x08	; 8
    326c:	f4 cf       	rjmp	.-24     	; 0x3256 <__ashldi3+0x2>
    326e:	22 0f       	add	r18, r18
    3270:	33 1f       	adc	r19, r19
    3272:	44 1f       	adc	r20, r20
    3274:	55 1f       	adc	r21, r21
    3276:	66 1f       	adc	r22, r22
    3278:	77 1f       	adc	r23, r23
    327a:	88 1f       	adc	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	0a 95       	dec	r16
    3280:	b2 f7       	brpl	.-20     	; 0x326e <__ashldi3+0x1a>
    3282:	0f 91       	pop	r16
    3284:	08 95       	ret

00003286 <__tablejump2__>:
    3286:	ee 0f       	add	r30, r30
    3288:	ff 1f       	adc	r31, r31
    328a:	05 90       	lpm	r0, Z+
    328c:	f4 91       	lpm	r31, Z
    328e:	e0 2d       	mov	r30, r0
    3290:	09 94       	ijmp

00003292 <_exit>:
    3292:	f8 94       	cli

00003294 <__stop_program>:
    3294:	ff cf       	rjmp	.-2      	; 0x3294 <__stop_program>
